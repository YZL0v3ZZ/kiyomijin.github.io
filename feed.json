{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden",
    "subtitle": "偷得浮生半日闲",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/09/17/CTF%E5%B0%8F%E8%AE%AD/Misc/Misc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99/",
            "url": "http://example.com/2022/09/17/CTF%E5%B0%8F%E8%AE%AD/Misc/Misc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99/",
            "title": "Misc——私有bit隐写",
            "date_published": "2022-09-17T06:02:32.000Z",
            "content_html": "<h2 id=\"0x01-知识点\"><a class=\"anchor\" href=\"#0x01-知识点\">#</a> <strong>0x01 知识点</strong></h2>\n<pre><code>typedef FrameHeader\n\n&#123;// 类型     字段名:bit数\nunsigned int sync:12;                        //同步信息\nunsigned int version:2;                      //版本\nunsigned int layer: 2;                       //层\nunsigned int error protection:1;             //CRC校验\nunsigned int bitrate_index:4;                //位率\nunsigned int sampling_frequency:2;           //采样频率\nunsigned int padding:1;                      //帧长调节\nunsigned int private:1;                      //保留字 【通常藏有flag】\nunsigned int mode:2;                         //声道模式\nunsigned int mode extension:2;        \t\t //扩充模式\nunsigned int copyright:1;                    //版权   【通常藏有flag】\nunsigned int original:1;                     //原版标志\nunsigned int emphasis:2;                     //强调模式\n&#125;\n</code></pre>\n<ul>\n<li>帧长度是压缩时每一帧的长度， <code>包括帧头</code> 的 4 个字节（32bit）。它将填充的空位也计算在内。</li>\n<li>padding 的值会影响每一帧的长度（具体分析见下面的题目），因为只有 1 位，因此长度也只限于在 0 和 1 之间变化</li>\n</ul>\n<h2 id=\"0x02-题目分析\"><a class=\"anchor\" href=\"#0x02-题目分析\">#</a> 0x02 题目分析</h2>\n<p>将解压后的 <code>1.mp3</code>  文件用 010Editor 打开</p>\n<p>可以看到一个 mp3 文件，里面基本上由 mf 数组构成。</p>\n<p><img data-src=\"F:%5Chexo-blog%5Csource_posts%5CCTF%E5%B0%8F%E8%AE%AD%5CMisc%5CMisc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99%5Cimage-20220917115510767.png\" alt=\"image-20220917115510767\" /></p>\n<p>分析详见图片</p>\n<p><img data-src=\"F:%5Chexo-blog%5Csource_posts%5CCTF%E5%B0%8F%E8%AE%AD%5CMisc%5CMisc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99%5Cimage-20220917120013835.png\" alt=\"image-20220917120013835\" /></p>\n<p>接着，可以发现，每个 mf 数组大小不一，有的是 0x1A1，有的 0x1A2</p>\n<p><img data-src=\"F:%5Chexo-blog%5Csource_posts%5CCTF%E5%B0%8F%E8%AE%AD%5CMisc%5CMisc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99%5Cimage-20220917120301874.png\" alt=\"image-20220917120301874\" /></p>\n<blockquote>\n<p>图中可知，private_bit 的数值的在 0 和 1 中变化，可以让 <code>copyright</code>  、 <code>private_bit</code>  这样的单 bit 位在 0 和 1 之间发生改变，进而影响了单独 mf 数组的大小。因此，这两位在整个 mf 数组中连续拼接可能藏有 flag 或者重要的信息，优先提取。</p>\n</blockquote>\n<h2 id=\"0x03-解析脚本\"><a class=\"anchor\" href=\"#0x03-解析脚本\">#</a> 0x03 解析脚本</h2>\n<p>脚本如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># coding:utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token number\">0x399D0</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>  <span class=\"token comment\"># 起始位置，为什么 + 2 下面有解释</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    target_bit <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.mp3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 以二进制打开文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># 提取</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x294C6A</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 结束位置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 从头吃掉第一帧前面的字节 (0x399D0) + frame_sync、 mpeg_id、layer_id、protection_bit 这四个字段 (16bit，即 2 字节)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        byte <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#往后读取一个字节（8 位）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        padding <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;:08b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#从中提取倒数第 2 个 bit 也就是 padding 的值 ord 函数，是 chr 函数的对应，将字符变成 10 进制数字</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        target_bit <span class=\"token operator\">+=</span> <span class=\"token string\">'&#123;:08b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#从中提取倒数第 1 个 bit 也就是 private_bit 的值，需要累加拼接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> padding <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            n <span class=\"token operator\">+=</span> <span class=\"token number\">0x1A2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            n <span class=\"token operator\">+=</span> <span class=\"token number\">0x1A1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>target_bit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">#textArr = re.findall('.&#123;'+str(8)+'&#125;', result)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    textArr <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r'\\d&#123;8&#125;'</span><span class=\"token punctuation\">,</span> target_bit<span class=\"token punctuation\">)</span> <span class=\"token comment\">#利用正则匹配每 8 个数字为一组，将其变为字符串数组方便处理</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>textArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> textArr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">#int (' 二进制数 ', 2) 就转成了 10 进制   chr ('10 进制数 ') 就转成字符</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">#print (flag) #发现后面有很多未知空字符，删也删不掉</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    flag <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r'\\w+\\&#123;.+\\&#125;'</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span> <span class=\"token comment\">#用正则匹配标准 flag</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p 0k4_YOu_Seem_s0_cl3ver_t0_find_f1ag!=\"\">flag</p>\n<p><img data-src=\"F:%5Chexo-blog%5Csource_posts%5CCTF%E5%B0%8F%E8%AE%AD%5CMisc%5CMisc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99%5Cimage-20220917134916608.png\" alt=\"image-20220917134916608\" /></p>\n<h2 id=\"0x04-常用正则补充\"><a class=\"anchor\" href=\"#0x04-常用正则补充\">#</a> 0x04 常用正则 (补充)</h2>\n<p>①<strong>显示不可打印的字符</strong></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>报警</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>字表符</td>\n</tr>\n</tbody>\n</table>\n<p>②<strong>指定预定义的字符集</strong></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>任意一个十进制数字 [0-9]</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>任意一个非十进制数字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>任意一个空白字符 (空格、换行符、换页符、回车符、字表符)</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>任意一个非空白字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>任意一个单词字符</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>任意个非单词字符</td>\n</tr>\n</tbody>\n</table>\n<p>③<strong>限定符 (？*+{n，m}.)</strong><br />\n 限定符主要是用来限定每个字符串出现的次数。</p>\n<table>\n<thead>\n<tr>\n<th>限定字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>？</td>\n<td>零次或一次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>零次或多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>一次或多次</td>\n</tr>\n<tr>\n<td n=\"\"></td>\n<td>n 次</td>\n</tr>\n<tr>\n<td n,=\"\"></td>\n<td>至少 n 次</td>\n</tr>\n<tr>\n<td n,m=\"\"></td>\n<td>n 到 m 次</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配任意一个字符（不包含换行符）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"0x05-再来一道\"><a class=\"anchor\" href=\"#0x05-再来一道\">#</a> 0x05 再来一道</h2>\n<p>翻看了几帧发现 <code>private_bit</code>  位都是 0，似乎并没有存储数据。但是在翻看的时候发现，<ins> <code>uint32 copyright</code>  这一位似乎内藏玄机</ins>，这一位在相邻几帧的数据有 0 有 1，查询得知这是版权位，通常不会出现不同帧有 0 有 1 的情况。</p>\n<p>于是决定将 <code>copyright</code>  位的数据提取出来看看。</p>\n<p><img data-src=\"F:%5Chexo-blog%5Csource_posts%5CCTF%E5%B0%8F%E8%AE%AD%5CMisc%5CMisc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99%5Cimage-20220917134512128.png\" alt=\"image-20220917134512128\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># coding:utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">0xF05A4</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>  <span class=\"token comment\"># 起始位置，为什么 + 2 下面有解释</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>target_bit <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>flag <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2.mp3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以二进制打开文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 提取</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">while</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0xC12623</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 结束位置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 从头吃掉第一帧前面的字节 (0x399D0) + frame_sync、 mpeg_id、layer_id、protection_bit 这四个字段 (16bit，即 2 字节)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    byte <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 往后读取一个字节（8 位）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    padding <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;:08b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 从中提取倒数第 2 个 bit 也就是 padding 的值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    byte <span class=\"token operator\">=</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    target_bit <span class=\"token operator\">+=</span> <span class=\"token string\">'&#123;:08b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 从中提取倒数第 1 个 bit 也就是 copyright 的值，需要累加拼接</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> padding <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        n <span class=\"token operator\">+=</span> <span class=\"token number\">0x415</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        n <span class=\"token operator\">+=</span> <span class=\"token number\">0x414</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>target_bit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># textArr = re.findall('.&#123;'+str(8)+'&#125;', result)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>textArr <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r'\\d&#123;8&#125;'</span><span class=\"token punctuation\">,</span> target_bit<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 利用正则匹配每 8 个数字为一组，将其变为字符串数组方便处理</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>textArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> textArr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># int (' 二进制数 ', 2) 就转成了 10 进制   chr ('10 进制数 ') 就转成字符</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>flag <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r'\\w+\\&#123;.+\\&#125;'</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p b3d7bed5-e8da-4d9c-848c-e5d332d63bcd=\"\">flag</p>\n<p><img data-src=\"F:%5Chexo-blog%5Csource_posts%5CCTF%E5%B0%8F%E8%AE%AD%5CMisc%5CMisc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99%5Cimage-20220917134626086.png\" alt=\"image-20220917134626086\" /></p>\n",
            "tags": [
                "CTF小训",
                "Misc",
                "CTF小训",
                "Misc"
            ]
        },
        {
            "id": "http://example.com/2022/07/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%8D%9A%E5%AE%A2/%E5%A6%82%E4%BD%95%E5%9C%A8shoka%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%86%99%E4%BD%9C%E3%80%81%E5%8F%91%E5%B8%83/",
            "url": "http://example.com/2022/07/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%8D%9A%E5%AE%A2/%E5%A6%82%E4%BD%95%E5%9C%A8shoka%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%86%99%E4%BD%9C%E3%80%81%E5%8F%91%E5%B8%83/",
            "title": "如何在shoka博客中写作、发布",
            "date_published": "2022-07-24T10:27:46.000Z",
            "content_html": "<h1 id=\"博客发布步骤\"><a class=\"anchor\" href=\"#博客发布步骤\">#</a> 博客发布步骤</h1>\n<p>首先，我们发布博客需要 <code>想一想是否得在某个大分类-小分类下</code> ，我这里由于提前想好以后：</p>\n<p>大分类是 —— 计算机科学</p>\n<p>小分类是 —— 博客</p>\n<p>在这下面才有我的这篇 <code>如何在shoka博客中写作、发布</code> 文章</p>\n<h2 id=\"在指定路径下创建文章\"><a class=\"anchor\" href=\"#在指定路径下创建文章\">#</a> 在指定路径下创建文章</h2>\n<pre><code>hexo new 文章名 -p 路径/文件名.md\n</code></pre>\n<p><img data-src=\"pic-1.png\" alt=\"image-20220724185106639\" /></p>\n<p>就会在 &lt;root-dir-of-blog&gt;/source/_posts/ 路径 / 下创建你的文件名同名目录和同名 md 文件</p>\n<p><img data-src=\"pic-2.png\" alt=\"image-20220724185321747\" /></p>\n<p><code>特别注意</code> ：</p>\n<ul>\n<li>在同名文件夹下放置图片等资源，文章内容则要写在 md 文件中。</li>\n</ul>\n<h2 id=\"书写博客内容\"><a class=\"anchor\" href=\"#书写博客内容\">#</a> 书写博客内容</h2>\n<p><img data-src=\"pic-3.png\" alt=\"image-20220724190021732\" /></p>\n<h3 id=\"media-多媒体\"><a class=\"anchor\" href=\"#media-多媒体\">#</a>  <code>media</code>  多媒体</h3>\n<p>本功能基于 Hexo Tag 功能，使用 <code>media</code>  标签，目前可选择两种类型，即 <code>audio</code>  和 <code>video</code> 。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;<span class=\"token tag\">!--swig</span>￼0<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;<span class=\"token tag\">!--swig</span>￼1<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr></table></figure><p>标签包绕一段 yml 格式的内容，格式与背景音乐的配置类似。 亦可以直接使用网易云、虾米、QQ 音乐的播放列表、单曲。</p>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src='[{\"title\":\"列表 1\",\"list\":[\"https://y.qq.com/n/ryqq/playlist/8552016907.html\"]},{\"title\":\"列表 2\",\"list\":[\"https://music.163.com/#/playlist?id=2031842656\"]}]'></div></div></p>\n<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"测试 1\",\"url\":\"https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0\"},{\"name\":\"测试 2\",\"url\":\"https://cdn.kastatic.org/ka-youtube-converted/O_nY1TM2RZM.mp4/O_nY1TM2RZM.mp4#t=0\"}]'></div></div></p>\n<h3 id=\"平常代码块书写\"><a class=\"anchor\" href=\"#平常代码块书写\">#</a> 平常代码块书写</h3>\n<p>其中，讲讲 shoka 中程序代码块的书写，以下内容为 md 文件中格式：</p>\n<p><code>[language] [title] [url] [link text] [mark] [command]</code></p>\n<p>java 命令代码块在 md 文件中的书写：</p>\n<blockquote>\n<p>注意，[language] 前面和代码内容结尾后面都有三个点哦，这个点是 <code>键盘左上角</code> ， <code>ESC下面</code> 那个点！</p>\n</blockquote>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>```java 博客代码块 https<span class=\"token punctuation\">:</span>//kiyomijin.github.io 参考链接</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Scanner in = new Scanner (System.in);</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>System.out.println (in.nextLine ());</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>System.out.println (\"Hello\" + \"world.\");</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>```</pre></td></tr></table></figure><p>效果如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>博客代码块</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9raXlvbWlqaW4uZ2l0aHViLmlv\">参考链接</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span>nextLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>bash 命令代码块在 md 文件中的书写：</p>\n<ul>\n<li><strong>如果没有 url、link text、mark 等的修饰的话</strong>，就不用书写，书写想要的字段就行</li>\n<li>command 命令给第 1、9-10 行标注了 <code>[root@localhost] $</code>  的前缀解释，接着再给第 4-6 行的命令标注了 <code>[admin@remotehost] #</code> 的前缀解释</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>```bash 命令行提示符 command<span class=\"token punctuation\">:</span>(\"<span class=\"token punctuation\">[</span>root@localhost<span class=\"token punctuation\">]</span> $\"<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>9<span class=\"token punctuation\">-</span>10<span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span>\"<span class=\"token punctuation\">[</span>admin@remotehost<span class=\"token punctuation\">]</span> <span class=\"token comment\">#\":4-6)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pwd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ls <span class=\"token punctuation\">-</span>la</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>total 2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>drwxr<span class=\"token punctuation\">-</span>xr<span class=\"token punctuation\">-</span>x   2 chris  chris     11 Jan 10 16<span class=\"token punctuation\">:</span>48 .</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>drwxr<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>r<span class=\"token punctuation\">-</span>x  45 chris  chris     92 Feb 14 11<span class=\"token punctuation\">:</span>10 ..</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">-</span>rwxr<span class=\"token punctuation\">-</span>xr<span class=\"token punctuation\">-</span>x   1 chris  chris    444 Aug 25  2013 backup</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">-</span>rwxr<span class=\"token punctuation\">-</span>xr<span class=\"token punctuation\">-</span>x   1 chris  chris    642 Jan 17 14<span class=\"token punctuation\">:</span>42 deploy</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>git add <span class=\"token punctuation\">-</span>A</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>git commit <span class=\"token punctuation\">-</span>m \"update\"</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>git push</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>```</pre></td></tr></table></figure><p>效果如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">pwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>/usr/home/chris/bin</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">ls</span> -la</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>total <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr-xr-x   <span class=\"token number\">2</span> chris  chris     <span class=\"token number\">11</span> Jan <span class=\"token number\">10</span> <span class=\"token number\">16</span>:48 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[admin@remotehost] #\"></td><td><pre>drwxr--r-x  <span class=\"token number\">45</span> chris  chris     <span class=\"token number\">92</span> Feb <span class=\"token number\">14</span> <span class=\"token number\">11</span>:10 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">444</span> Aug <span class=\"token number\">25</span>  <span class=\"token number\">2013</span> backup</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>-rwxr-xr-x   <span class=\"token number\">1</span> chris  chris    <span class=\"token number\">642</span> Jan <span class=\"token number\">17</span> <span class=\"token number\">14</span>:42 deploy</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"update\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">git</span> push</pre></td></tr></table></figure><h3 id=\"note-提示块\"><a class=\"anchor\" href=\"#note-提示块\">#</a>  <code>note</code>  提示块</h3>\n<pre><code>:::default\n默认默认\n:::\n\n:::primary\n基本基本\n:::\n\n:::info\n提示提示\n:::\n\n:::success\n成功成功\n:::\n\n:::warning\n警告警告\n:::\n\n:::danger\n危险危险\n:::\n\n:::danger no-icon\n危险危险\n:::\n</code></pre>\n<div class=\"note default\">\n<p>默认默认</p>\n</div>\n<div class=\"note primary\">\n<p>基本基本</p>\n</div>\n<div class=\"note info\">\n<p>提示提示</p>\n</div>\n<div class=\"note success\">\n<p>成功成功</p>\n</div>\n<div class=\"note warning\">\n<p>警告警告</p>\n</div>\n<div class=\"note danger\">\n<p>危险危险</p>\n</div>\n<div class=\"note danger no-icon\">\n<p>危险危险</p>\n</div>\n<h3 id=\"emoji-绘文字\"><a class=\"anchor\" href=\"#emoji-绘文字\">#</a>  <code>emoji</code>  绘文字</h3>\n<p>本功能基于  <code>markdown-it-emoji</code>  ，所有标签参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0LWVtb2ppL2Jsb2IvbWFzdGVyL2xpYi9kYXRhL2Z1bGwuanNvbg==\">戳此</span></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">:kissing_heart</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">:ring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">:</span>notes<span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>😘<br />\n💍<br />\n🎶</p>\n<h3 id=\"文字特效\"><a class=\"anchor\" href=\"#文字特效\">#</a> 文字特效</h3>\n<p>本功能基于 <code>markdown-it-ins</code>  、 <code>markdown-it-bracketed-spans</code>  和  <code>markdown-it-attrs</code></p>\n<blockquote>\n<p>本主题风格颜色通用样式：default、primary、success、info、warning、danger</p>\n<p>注意，在 ++、~~ 或 == 号和汉字的中间 <code>不能出现空格</code> 哦，否则无法正常显示！</p>\n</blockquote>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>++下划线++</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++波浪线++<span class=\"token punctuation\">&#123;</span>.wavy<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>++着重点++<span class=\"token punctuation\">&#123;</span>.dot<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>++紫色下划线++<span class=\"token punctuation\">&#123;</span>.primary<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>++绿色波浪线++<span class=\"token punctuation\">&#123;</span>.wavy .success<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>++黄色着重点++<span class=\"token punctuation\">&#123;</span>.dot .warning<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>~~删除线~~</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>~~红色删除线~~<span class=\"token punctuation\">&#123;</span>.danger<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>==荧光高亮==</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>赤橙黄绿青蓝紫<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.rainbow<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>红色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.red<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>粉色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.pink<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>橙色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.orange<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>黄色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.yellow<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>绿色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.green<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">[</span>靛青<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.aqua<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>蓝色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.blue<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>紫色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.purple<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span>灰色<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.grey<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>快捷键 <span class=\"token punctuation\">[</span>Ctrl<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.kbd<span class=\"token punctuation\">&#125;</span> + <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.kbd .red<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>H~2~0</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>29^th^</pre></td></tr></table></figure><p>效果如下：</p>\n<p><ins>下划线</ins><br />\n<ins class=\"wavy\">波浪线</ins><br />\n<ins class=\"dot\">着重点</ins><br />\n<ins class=\"primary\">紫色下划线</ins><br />\n<ins class=\"wavy success\">绿色波浪线</ins><br />\n<ins class=\"dot warning\">黄色着重点</ins><br />\n<s>删除线</s><br />\n<s class=\"danger\">红色删除线</s><br />\n<mark>荧光高亮</mark><br />\n<span class=\"rainbow\">赤橙黄绿青蓝紫</span><br />\n<span class=\"red\">红色</span><br />\n<span class=\"pink\">粉色</span><br />\n<span class=\"orange\">橙色</span><br />\n<span class=\"yellow\">黄色</span><br />\n<span class=\"green\">绿色</span><br />\n<span class=\"aqua\">靛青</span><br />\n<span class=\"blue\">蓝色</span><br />\n<span class=\"purple\">紫色</span><br />\n<span class=\"grey\">灰色</span><br />\n快捷键 <span class=\"kbd\">Ctrl</span> + <span class=\"kbd red\">C</span><br />\nH<sub>2</sub>0<br />\n29<sup>th</sup></p>\n<h3 id=\"collapse-折叠块\"><a class=\"anchor\" href=\"#collapse-折叠块\">#</a> collapse 折叠块</h3>\n<p>能基于 markdown-it-container</p>\n<p>标签为：</p>\n<p>开始行 +++[风格颜色] [标题文字]</p>\n<p>结束行 +++</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+++ 默认默认 这里是一段文字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>++下划线++</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+++primary 紫色</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>info</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>参考信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">::</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">-</span> 第一行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">-</span> 第二行</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>+++info  蓝色</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>;;;id3 卡片 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>这里是卡片 1 的内容</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>;;;id3 卡片 2</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>这里是卡片 2 的内容</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>;;;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>+++success 绿色</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&lt;<span class=\"token tag\">!--swig</span>￼4<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>+++warning 黄色</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token tag\">!</span><span class=\"token tag\">!</span> 警告警告警告警告警告！！<span class=\"token punctuation\">&#123;</span>.bulr<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">[</span>label<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .success<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>+++</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>+++danger 红色</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">[</span>danger<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>.label .danger<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+++</pre></td></tr></table></figure><details><summary>默认默认 这里是一段文字</summary><div>\n<p><ins>下划线</ins></p>\n</div></details>\n<details class=\"primary\"><summary>紫色</summary><div>\n<div class=\"note info\">\n<p>参考信息</p>\n</div>\n<ul>\n<li>第一行</li>\n<li>第二行</li>\n</ul>\n</div></details>\n<details class=\"info\"><summary>蓝色</summary><div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片 1\">\n<p>这里是卡片 1 的内容</p>\n</div>\n<div class=\"tab\" data-id=\"id3\" data-title=\"卡片 2\">\n<p>这里是卡片 2 的内容</p>\n</div>\n</div></details>\n<details class=\"success\"><summary>绿色</summary><div>\n<p><div class=\"links\"><div class=\"item\" title=\"kiyomi\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9raXlvbWlqaW4uZ2l0aHViLmlv\" data-background-image=\"/images/404.png\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9raXlvbWlqaW4uZ2l0aHViLmlv\">kiyomi</span>\n          <p class=\"desc\">https://kiyomijin.github.io</p>\n          </div></div></div></p>\n</div></details>\n<details class=\"warning\"><summary>黄色</summary><div>\n<p><span class=\"spoiler bulr\" title=\"你知道得太多了\">警告警告警告警告警告</span><br />\n<span class=\"label success\"> label</span></p>\n</div></details>\n<details class=\"danger\"><summary>红色</summary><div>\n<p><span class=\"label danger\">danger</span></p>\n</div></details>\n<h2 id=\"发布博客\"><a class=\"anchor\" href=\"#发布博客\">#</a> 发布博客</h2>\n<p>当你文章写完了，想发布到博客上面，先要把文章部署到 <code>github</code>  上面，然后打开你的博客，博客就会读取 <code>github</code>  仓库的内容了。</p>\n<p>具体命令如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> hexo g <span class=\"token punctuation\">-</span>d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\"># 逐步输入以上两条指令，执行完再输入下一条</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\"># 或者一次性输入两条也是可以的，但新手还不建议一次性输入，前期部署可能有时候容易出错</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> hexo clean <span class=\"token important\">&amp;&amp;</span> hexo g <span class=\"token important\">&amp;&amp;</span> hexo d</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\"># 部署完了看一下窗口没有出现报错就可以去博客刷新一下内容了，一般需要几分钟才更新内容</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "博客",
                "博客相关",
                "shoka"
            ]
        },
        {
            "id": "http://example.com/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "url": "http://example.com/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "title": "测试文章",
            "date_published": "2022-07-13T19:13:28.000Z",
            "content_html": "<p>这是一篇测试文章</p>\n<p><img data-src=\"/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png\" class=\"\" title=\"图片引用方法一\"></p>\n<p><img data-src=\"test.png\" alt=\"图片引用方法二\" /></p>\n",
            "tags": [
                "Android",
                "原创"
            ]
        },
        {
            "id": "http://example.com/2022/07/13/hello-world/",
            "url": "http://example.com/2022/07/13/hello-world/",
            "title": "Hello World",
            "date_published": "2022-07-13T15:20:21.111Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}