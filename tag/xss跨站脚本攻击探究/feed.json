{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden • All posts by \"xss跨站脚本攻击探究\" tag",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/05/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E4%BB%8B%E7%BB%8D/",
            "url": "https://kiyomijin.github.io/2022/10/05/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E4%BB%8B%E7%BB%8D/",
            "title": "XSS介绍",
            "date_published": "2022-10-04T16:56:24.000Z",
            "content_html": "<h1 id=\"XSS跨站脚本介绍\"><a href=\"#XSS跨站脚本介绍\" class=\"headerlink\" title=\"XSS跨站脚本介绍\"></a>XSS跨站脚本介绍</h1><p>跨站脚本攻击（Cross Site Scripting）是指攻击者利用网站程序对<strong>用户输入过滤不足</strong>，输入可以显示在页面上对其他用户（普通用户、第三方用户、网站拥有者）造成影响的<code>HTML+Js</code>代码，从而<strong>盗取用户资料</strong>、<strong>利用用户身份进行某种动作</strong>或者<strong>对访问者进行病毒侵害</strong>的一种攻击方式。</p>\n<p>为了与层叠样式表（Cascading Style Sheets）的缩写CSS区分开，跨站脚本攻击通常简写为<code>XSS</code>。</p>\n<p><img src=\"image-20221004202321913.png\" alt=\"image-20221004202321913\"></p>\n<h2 id=\"反射型XSS\"><a href=\"#反射型XSS\" class=\"headerlink\" title=\"反射型XSS\"></a>反射型XSS</h2><p>发射型就是将应用程序的运行结果或错误返回到页面上显示。典型的反射型XSS是在搜索框里体现。</p>\n<h2 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h2><p>存储在服务器、数据库（后台）上，能稳定持久执行的跨站脚本。</p>\n<h2 id=\"DOM型XSS\"><a href=\"#DOM型XSS\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h2><p>能够构成HTML的DOM树的一部分，或者能够影响DOM结构的跨站脚本。</p>\n<h1 id=\"XSS攻击方式与样例\"><a href=\"#XSS攻击方式与样例\" class=\"headerlink\" title=\"XSS攻击方式与样例\"></a>XSS攻击方式与样例</h1><h2 id=\"XSS盗用用户信息\"><a href=\"#XSS盗用用户信息\" class=\"headerlink\" title=\"XSS盗用用户信息\"></a>XSS盗用用户信息</h2><h2 id=\"XSS盗取Cookie\"><a href=\"#XSS盗取Cookie\" class=\"headerlink\" title=\"XSS盗取Cookie\"></a>XSS盗取Cookie</h2><h2 id=\"XSS钓鱼攻击\"><a href=\"#XSS钓鱼攻击\" class=\"headerlink\" title=\"XSS钓鱼攻击\"></a>XSS钓鱼攻击</h2><p>链接上含有攻击代码</p>\n<h2 id=\"XSS蠕虫攻击\"><a href=\"#XSS蠕虫攻击\" class=\"headerlink\" title=\"XSS蠕虫攻击\"></a>XSS蠕虫攻击</h2><p>XSS蠕虫的破坏力和影响力都是巨大的。XSS蠕虫主要发生在用户之间存在交互行为的页面中，当Web引用程序对用户输入的数据信息没有做严格的过滤时，通过结合用户的登录状态、API调用、<code>Ajax的异步提交</code>，就可以实现在植入恶意代码的同时，将恶意代码进行对外发送，即实现了代码的感染和传播，也就形成了XSS蠕虫。</p>\n<p>MySpace的Samy XSS蠕虫攻击事件是出现最早、最出名的XSS蠕虫攻击事件。</p>\n<h1 id=\"通过实验深入了解XSS三个分类\"><a href=\"#通过实验深入了解XSS三个分类\" class=\"headerlink\" title=\"通过实验深入了解XSS三个分类\"></a>通过实验深入了解XSS三个分类</h1><p>首先我们安装DVWA，使用账号：admin，密码：password进行登录</p>\n<p><code>注意</code>：如果登录不上去，就访问<code>127.0.0.1/dvwa/setup.php</code>，点击最下方的<code>Create/Reset</code>按钮</p>\n<p><img src=\"image-20221004210441095.png\" alt=\"image-20221004210441095\"></p>\n<p>设置DVWA Security【从最低难度low开始吧】，点击<code>submit</code>等待刷新设置完成</p>\n<p><img src=\"image-20221004210537809.png\" alt=\"image-20221004210537809\"></p>\n<h2 id=\"DOM型XSS-1\"><a href=\"#DOM型XSS-1\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h2><p><img src=\"image-20221004210944194.png\" alt=\"image-20221004210944194\"></p>\n<p>首先我们看到下拉框，就要想一想，这个下拉框是从哪里来的。</p>\n<p>我们可以F12刷新，看一下XHR请求【Ajax】</p>\n<p>这里讲一下<code>XHR</code>和<code>AJax</code>的关系</p>\n<ul>\n<li><code>XMLHttpRequest</code> （简称<code>XHR</code>）对象用于和服务器交换数据，是基于<code>XML</code>的<code>HTTP</code>请求。</li>\n<li><code>XMLHttpRequest</code>是一个浏览器接口，使得<code>Javascript</code>可以进行<code>HTTP(S)</code>通信。</li>\n<li>自从浏览器提供有了<code>XMLHTTPRequest</code>这个接口之后，Ajax操作就此诞生。</li>\n<li>我们再来说说什么是<code>Ajax</code>，<code>Ajax</code> 即 <code>Asynchronous JavaScript and XML</code>，翻译为：<code>异步</code>的 <code>JavaScript</code>和<code>XML</code>。【<strong>重点！！</strong>】</li>\n<li><code>Ajax</code>就是基于浏览器提供的<code>XMLHttpRequest</code>对象来实现的。【<strong>重点！！</strong>】</li>\n</ul>\n<p>传统的网页（不使用 Ajax）如果需要更新内容，必需重载整个网页面。</p>\n<p>自从有了Ajax之后，我们就可以实现<strong>异步地加载网页</strong>。</p>\n<p>什么叫异步？</p>\n<p>异步，异嘛，不同的意思，这里也就是指<code>不跟</code>浏览器加载执行网页代码的<code>步伐</code>一致，也就是说在一个网页中<code>需要用户操作来触发执行代码</code>，而不是整个网页代码<code>一次性执行完毕</code>(这里的用户操作是指在同一个网页下面请求代码执行渲染，而不是让浏览器直接跳转渲染另一个页面)。</p>\n<p>Ajax指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。所以，XMLHttpRequest 对象如果要用于 Ajax 的话，其 open() 方法的 async 参数必须设置为 true。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">xmlhttp.<span class=\"title function_ invoke__\">open</span>(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;ajax_test.html&quot;</span>,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004211458850.png\" alt=\"image-20221004211458850\"></p>\n<p>所以表明，这个页面<strong>没有单独去请求一个功能链接</strong>来返回下拉链表内容。</p>\n<p>因此，我们直接去看源代码，鼠标右键，查看源代码【XSS攻击是基于前台源码的攻击】。</p>\n<p>搜索关键字符：</p>\n<p><img src=\"image-20221004213743525.png\" alt=\"image-20221004213743525\"></p>\n<p>对于HTML的标签基本定义如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>标签常用于组合块级元素，以便通过 CSS 来对这些元素进行格式化。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 标签用于定义一个段落。 段落和段落之间有空隙。</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span> 标签用于创建供用户输入的 HTML 表单。表单用于向服务端发送数据。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span> 元素包含一个或多个如下的表单元素：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span> 有输入框</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span>&gt;</span>  标签定义多行的文本输入控件</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 提交按钮</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span> 有下拉菜单属性</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span> 单选框</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">optgroup</span>&gt;</span> 复选框</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span> 标签将表单内容的一部分打包，生成一组相关表单的字段。</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span> 标签为 input 元素定义标注（标记）。</span><br></pre></td></tr></table></figure>\n<p>其中，源码中显示这个form标签里面嵌有一段script标签引起的JavaScript代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    if (document.location.href.indexOf(&quot;default=&quot;) &gt;= 0) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;&quot; + lang + &quot;&#x27;</span>&gt;</span>&quot; + (lang) + &quot;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;&#x27;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&#x27;disabled&#x27;</span>&gt;</span>----<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;English&#x27;</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;French&#x27;</span>&gt;</span>French<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;Spanish&#x27;</span>&gt;</span>Spanish<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;German&#x27;</span>&gt;</span>German<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>主逻辑是：</p>\n<p>获取当前form表单document的location对象的href（当前浏览的url值，对于下图就是<code>http://127.0.0.1/DVWA/vulnerabilities/xss_d/</code>）</p>\n<p>然后判断这个url字符串中“default=”第一次出现的位置是否&gt;=0</p>\n<p><img src=\"image-20221004215924339.png\" alt=\"image-20221004215924339\"></p>\n<p>当然，我们回到刚刚的页面上就是在获取这个url</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004220400905.png\" alt=\"image-20221004220400905\"></p>\n<p>substring(start,stop)</p>\n<p>然后截取从“default=”第一次出现的位置 + 8【也就是=号右边第一个字符，把整个“default=”跨了过去】到结尾的内容的字符串，保存到lang变量。</p>\n<p>往document，也就是当前html页面的option标签的value值中写入刚刚获取到的lang值，其选项显示部分使用decoreURI对lang进行解码，由于English中未含有非英文部分，所以就是English。【这一步会往选项里再添加一个English】</p>\n<p>接着往当前html页面的option标签里的value写入空，且关闭其选择属性，加入——这个选项。【这一步会往选项里再添加一个——】</p>\n<p><img src=\"image-20221004221129050.png\" alt=\"image-20221004221129050\"></p>\n<p>那么，我们可以看到，这个lang是从当前url里获取到的，且未经过任何校验就直接写入标签中。</p>\n<p>我们可以控制这个lang变量，使其直接执行js脚本</p>\n<p><img src=\"image-20221004221907384.png\" alt=\"image-20221004221907384\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/DVWA/vulnerabilities/xss_d/?default=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004222113645.png\" alt=\"image-20221004222113645\"></p>\n<p>其改变了当前HTML的页面DOM结构，因此，我们称其为DOM型XSS攻击。</p>\n<h2 id=\"反射型XSS-1\"><a href=\"#反射型XSS-1\" class=\"headerlink\" title=\"反射型XSS\"></a>反射型XSS</h2><p>我们输入11111，结果看到页面回显了”Hello 11111”</p>\n<p><img src=\"image-20221004222654007.png\" alt=\"image-20221004222654007\"></p>\n<p>看一下前台代码，是使用GET请求去将获取text的内容发送给服务器，而text我们可控</p>\n<p><img src=\"image-20221004222954963.png\" alt=\"image-20221004222954963\"></p>\n<p>输入11111，会回显到前台。</p>\n<p><img src=\"image-20221004223147315.png\" alt=\"image-20221004223147315\"></p>\n<p>那么，我们发现11111可能未经过处理，直接放入pre标签显示。</p>\n<p>因此可以在pre标签里插入script标签，完成弹窗操作。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(666)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004223056096.png\" alt=\"image-20221004223056096\"></p>\n<p>因为这个页面将一些交互内容回显到了前台上，使得我们成功利用Js脚本完成攻击，我们称其为反射型XSS攻击。</p>\n<h2 id=\"存储型XSS-1\"><a href=\"#存储型XSS-1\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h2><p><img src=\"image-20221004223720910.png\" alt=\"image-20221004223720910\"></p>\n<p>我们通过留言功能，可以看到我们的输入会被记录在页面上。</p>\n<p><img src=\"image-20221004223847678.png\" alt=\"image-20221004223847678\"></p>\n<p>我们按照刚刚的思路，直接尝试看看能否弹窗。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Name：jack</span><br><span class=\"line\">Message：&lt;script&gt;alert(1234)&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>刷新回来后会一直弹窗</p>\n<p><img src=\"image-20221004224120560.png\" alt=\"image-20221004224120560\"></p>\n<p>我们看下源码信息</p>\n<p><img src=\"image-20221004224444379.png\" alt=\"image-20221004224444379\"></p>\n<p>我们看到Name的maxlength为10，Message的length为50，所以使用Message来做XSS攻击更合适一些</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;alert()&lt;/script&gt;</span><br><span class=\"line\">最简短的js脚本也有24个字符</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004224705526.png\" alt=\"image-20221004224705526\"></p>\n<p>如果两个长度都不限，则都适合用来XSS攻击。</p>\n",
            "tags": [
                "XSS跨站脚本攻击探究"
            ]
        }
    ]
}