<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kiyomijin.github.io</id>
    <title>My Violet Eva Garden • Posts by &#34;g计划&#34; tag</title>
    <link href="https://kiyomijin.github.io" />
    <updated>2022-10-06T05:47:55.000Z</updated>
    <category term="原创" />
    <category term="SQL注入探究" />
    <category term="G计划" />
    <category term="XSS跨站脚本攻击探究" />
    <category term="数据库安全" />
    <category term="文件上传漏洞探究" />
    <category term="CTF小训" />
    <category term="Misc" />
    <entry>
        <id>https://kiyomijin.github.io/2022/10/06/G%E8%AE%A1%E5%88%92/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/</id>
        <title>密码学基础</title>
        <link rel="alternate" href="https://kiyomijin.github.io/2022/10/06/G%E8%AE%A1%E5%88%92/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
        <content type="html">&lt;h1 id=&#34;密码学基础&#34;&gt;&lt;a href=&#34;#密码学基础&#34; class=&#34;headerlink&#34; title=&#34;密码学基础&#34;&gt;&lt;/a&gt;密码学基础&lt;/h1&gt;&lt;h2 id=&#34;分组密码学原理与应用&#34;&gt;&lt;a href=&#34;#分组密码学原理与应用&#34; class=&#34;headerlink&#34; title=&#34;分组密码学原理与应用&#34;&gt;&lt;/a&gt;分组密码学原理与应用&lt;/h2&gt;&lt;h3 id=&#34;原理&#34;&gt;&lt;a href=&#34;#原理&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;对称密钥密码体制又称分组密码体制、单密钥密码体制，是 &lt;strong&gt;加密密钥&lt;/strong&gt; 和 &lt;strong&gt;解密密钥&lt;/strong&gt; &lt;code&gt;相同&lt;/code&gt;的密码体制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;加密算法&lt;/code&gt;、&lt;code&gt;解密算法&lt;/code&gt;是&lt;mark class=&#34;hl-label red&#34;&gt;公开&lt;/mark&gt; 的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;加密算法&lt;/code&gt;必须足够&lt;code&gt;复杂&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其&lt;code&gt;密钥必须保密&lt;/code&gt;并且有足够大的密钥空间，从而使得攻击者在&lt;code&gt;截取密文&lt;/code&gt;和&lt;code&gt;知道加密算法&lt;/code&gt;的情况下，仍然&lt;code&gt;无法还原&lt;/code&gt;出&lt;code&gt;明文&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;假设网络中有&lt;code&gt;n个&lt;/code&gt;使用者，使用者之间共享&lt;code&gt;1个&lt;/code&gt;秘钥，则共有&lt;code&gt;n（n-1）/2个&lt;/code&gt;秘钥。&lt;/p&gt;
&lt;p&gt;分组密码典型算法有：&lt;code&gt;DES&lt;/code&gt;、&lt;code&gt;IDEA&lt;/code&gt;、&lt;code&gt;AES&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;&lt;a href=&#34;#优点&#34; class=&#34;headerlink&#34; title=&#34;优点&#34;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;私钥密码算法&lt;/strong&gt;&lt;code&gt;处理速度快&lt;/code&gt;，人们常常将其用作&lt;code&gt;数据加密处理&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;缺点&#34;&gt;&lt;a href=&#34;#缺点&#34; class=&#34;headerlink&#34; title=&#34;缺点&#34;&gt;&lt;/a&gt;缺点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;密钥&lt;code&gt;分配&lt;/code&gt;问题&lt;/li&gt;
&lt;li&gt;密钥&lt;code&gt;管理&lt;/code&gt;问题&lt;/li&gt;
&lt;li&gt;无法认证&lt;code&gt;源&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用&#34;&gt;&lt;a href=&#34;#应用&#34; class=&#34;headerlink&#34; title=&#34;应用&#34;&gt;&lt;/a&gt;应用&lt;/h3&gt;&lt;h4 id=&#34;DES【64-56】&#34;&gt;&lt;a href=&#34;#DES【64-56】&#34; class=&#34;headerlink&#34; title=&#34;DES【64-56】&#34;&gt;&lt;/a&gt;DES【64-56】&lt;/h4&gt;&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;DES 是分组加密算法，能够支持64比特的明文块加密，其密钥长度为56比特。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;三重DES&lt;/code&gt;（Triple Data Encryption Algorithm，&lt;code&gt;TDEA&lt;/code&gt;），也称为&lt;code&gt;3DES&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;工作机制是使用DES对明文进行&lt;mark class=&#34;hl-label blue&#34;&gt;加密一解密一加密&lt;/mark&gt;  操作，即对DES加密后的密文进行解密再加密，而解密则相反。&lt;/p&gt;
&lt;p&gt;设&lt;code&gt;EK()&lt;/code&gt;和&lt;code&gt;DK()&lt;/code&gt;代表DES算法的加密和解密过程，代表DES算法使用的密钥，&lt;code&gt;I&lt;/code&gt;代表明文输入，&lt;code&gt;O&lt;/code&gt;代表密文输出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TDEA&lt;/strong&gt; &lt;code&gt;加密&lt;/code&gt; 操作如下: &lt;mark class=&#34;hl-label blue&#34;&gt;加密一解密一加密&lt;/mark&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221006141353459.png&#34; alt=&#34;image-20221006141353459&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TDEA&lt;/strong&gt; &lt;code&gt;解密&lt;/code&gt; 操作如下: &lt;mark class=&#34;hl-label blue&#34;&gt;解密一加密一解密&lt;/mark&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221006141424648.png&#34; alt=&#34;image-20221006141424648&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;IDEA【64-128】&#34;&gt;&lt;a href=&#34;#IDEA【64-128】&#34; class=&#34;headerlink&#34; title=&#34;IDEA【64-128】&#34;&gt;&lt;/a&gt;IDEA【64-128】&lt;/h4&gt;&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;IDEA（International Data Encryption Algorithm）是国际数据加密算法的简记，是一个分组加密处理算法，其明文和密文分组都是64比特，密钥长度为128比特。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;该算法是由来学嘉（X.J.Lai）和Massey提出的建议标准算法，已在&lt;code&gt;PGP&lt;/code&gt;中得到应用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;既可用于加密又可用于解密&lt;/code&gt; ，该算法的设计思想是&lt;mark class=&#34;hl-label blue&#34;&gt;混合使用来自不同代数群中的运算&lt;/mark&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;AES【64-128、192、256】&#34;&gt;&lt;a href=&#34;#AES【64-128、192、256】&#34; class=&#34;headerlink&#34; title=&#34;AES【64-128、192、256】&#34;&gt;&lt;/a&gt;AES【64-128、192、256】&lt;/h4&gt;&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;AES是确定非保密的、公开的、全球免费使用的分组密码算法。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;p&gt;其密码&lt;code&gt;必须是没有密级&lt;/code&gt;的，绝不能像商业秘密那样来保护它&lt;/p&gt;
&lt;p&gt;算法的全部描述&lt;code&gt;必须公开披露&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;密码&lt;code&gt;必须可以在世界范围内免费使用&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;分组长度&lt;/code&gt;至少为&lt;code&gt;128比特&lt;/code&gt;，&lt;code&gt;密钥长度&lt;/code&gt;至少为&lt;code&gt;128、192和256比特&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从参与AES的候选算法中，最终选择 &lt;code&gt;Rijndael&lt;/code&gt;作为 &lt;code&gt;AES&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;国产密码中的&lt;/p&gt;
&lt;h4 id=&#34;SM1【128-128】&#34;&gt;&lt;a href=&#34;#SM1【128-128】&#34; class=&#34;headerlink&#34; title=&#34;SM1【128-128】&#34;&gt;&lt;/a&gt;SM1【128-128】&lt;/h4&gt;&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;SM1 算法是一种对称加密算法，分组长度为 128 比特，密钥长度为 128 比特。&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&#34;SM4【128-128】&#34;&gt;&lt;a href=&#34;#SM4【128-128】&#34; class=&#34;headerlink&#34; title=&#34;SM4【128-128】&#34;&gt;&lt;/a&gt;SM4【128-128】&lt;/h4&gt;&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;SM4 算法也是一种对称加密算法，分组长度为 128 比特，密钥长度为 128 比特。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;加密算法与密钥扩展算法都采用32轮非线性迭代结构。&lt;/p&gt;
&lt;p&gt;数据解密和数据加密的算法结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。详见GM/T0002-2012《SM4分组密码算法》。&lt;/p&gt;
&lt;h2 id=&#34;公钥密码学原理与应用&#34;&gt;&lt;a href=&#34;#公钥密码学原理与应用&#34; class=&#34;headerlink&#34; title=&#34;公钥密码学原理与应用&#34;&gt;&lt;/a&gt;公钥密码学原理与应用&lt;/h2&gt;&lt;h3 id=&#34;原理-1&#34;&gt;&lt;a href=&#34;#原理-1&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;公钥密码体制，也称&lt;code&gt;非对称密码体制&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其基本原理是：在加密和解密的过程中&lt;strong&gt;使用不同的密钥处理&lt;/strong&gt;方式。&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;加密密钥&lt;/code&gt;可以&lt;mark class=&#34;hl-label red&#34;&gt;公开&lt;/mark&gt; ，而只需要把&lt;code&gt;解密密钥&lt;/code&gt;&lt;strong&gt;安全存放即可&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在安全性方面，&lt;strong&gt;即使密码算法公开&lt;/strong&gt;，由加密密钥推知解密密钥也是计算不可行的。&lt;/p&gt;
&lt;h3 id=&#34;优点-1&#34;&gt;&lt;a href=&#34;#优点-1&#34; class=&#34;headerlink&#34; title=&#34;优点&#34;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;密钥分发方便，能以公开方式分配加密密钥：如因特网中个人安全通信经常将自己的公钥发布在网页中，方便其他人用它进行安全加密&lt;/li&gt;
&lt;li&gt;密钥保管量少：所有发送方共用一个公开秘钥，只要接收方保护好解密秘钥，就能实现安全通信&lt;/li&gt;
&lt;li&gt;支持数字签名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有三种公钥密码体制类型被证明是安全和有效的，即&lt;code&gt;RSA&lt;/code&gt;体制、&lt;code&gt;ELGamal&lt;/code&gt;体制、&lt;code&gt;椭圆曲线&lt;/code&gt;密码体制。&lt;/p&gt;
&lt;h3 id=&#34;应用-1&#34;&gt;&lt;a href=&#34;#应用-1&#34; class=&#34;headerlink&#34; title=&#34;应用&#34;&gt;&lt;/a&gt;应用&lt;/h3&gt;&lt;h4 id=&#34;RSA【n的长度1024，长期2048】&#34;&gt;&lt;a href=&#34;#RSA【n的长度1024，长期2048】&#34; class=&#34;headerlink&#34; title=&#34;RSA【n的长度1024，长期2048】&#34;&gt;&lt;/a&gt;RSA【n的长度1024，长期2048】&lt;/h4&gt;&lt;p&gt;RSA算法是非对称算法，在RSA加密算法中，&lt;code&gt;公钥&lt;/code&gt;和&lt;code&gt;私钥&lt;/code&gt;都可以用于加密消息，&lt;strong&gt;用于 加密消息的密钥 与 用于解密消息的密钥 相反&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;RSA算法提供了一种保护网络通信和数据存储的&lt;code&gt;机密性&lt;/code&gt;、&lt;code&gt;完整性&lt;/code&gt;、&lt;code&gt;真实性&lt;/code&gt;和&lt;code&gt;不可否认性&lt;/code&gt;的方法。&lt;/p&gt;
&lt;p&gt;目前&lt;code&gt;SSH&lt;/code&gt;、&lt;code&gt;OpenPGP&lt;/code&gt;、&lt;code&gt;S/MIME&lt;/code&gt;、&lt;code&gt;SSL/TLS&lt;/code&gt;网络协议&lt;code&gt;都依赖于RSA&lt;/code&gt;进行加密和数字签名功能。&lt;/p&gt;
&lt;p&gt;RSA算法在&lt;code&gt;浏览器中使用&lt;/code&gt;，能够在不可信任的互联网中建立安全连接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RSA签名验证&lt;/code&gt;是&lt;code&gt;网络连接系统&lt;/code&gt;中最常见的执行操作之一。&lt;/p&gt;
&lt;p&gt;RSA算法基于&lt;mark class=&#34;hl-label blue&#34;&gt;大整数因子分解的困难性&lt;/mark&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221006151440385.png&#34; alt=&#34;image-20221006151440385&#34;&gt;&lt;/p&gt;
&lt;p&gt;国产密码算法&lt;/p&gt;
&lt;p&gt;国产密码算法是指由国家密码研究相关机构自主研发，具有相关知识产权的商用密码算法。&lt;/p&gt;
&lt;p&gt;1999年国务院发布实施的《商用密码管理条例》第一章第二条规定：“本条例所称商用密码，是指对不涉及国家秘密内容的信息进行加密保护或者安全认证所使用的密码技术和密码产品。”目前，已经公布的国产密码算法主要有SM1分组密码算法、SM2椭圆曲线公钥密码算法、SM3密码杂凑算法、SM4分组算法、SM9标识密码算法。各国产商用密码算法的特性统计如表3-1所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221006151616629.png&#34; alt=&#34;image-20221006151616629&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;SM2【椭圆素数域256】&#34;&gt;&lt;a href=&#34;#SM2【椭圆素数域256】&#34; class=&#34;headerlink&#34; title=&#34;SM2【椭圆素数域256】&#34;&gt;&lt;/a&gt;SM2【椭圆素数域256】&lt;/h4&gt;&lt;p&gt;SM2算法&lt;code&gt;基于椭圆曲线&lt;/code&gt;，应用于公钥密码系统。&lt;/p&gt;
&lt;p&gt;对于一般椭圆曲线的离散对数问题，目前只存在指数级计算复杂度的求解方法。与大数分解问题及有限域上离散对数问题相比，椭圆曲线离散对数问题的求解难度要大得多。因此，在相同安全程度的要求下，椭圆曲线密码较其他公钥密码所需的密钥规模要小得多。&lt;/p&gt;
&lt;p&gt;SM2算法可以用于数字签名、密钥交换、公钥加密。详见GM/T 0009-2012《SM2密码算法使用规范》。&lt;/p&gt;
&lt;h4 id=&#34;SM3【杂凑256】&#34;&gt;&lt;a href=&#34;#SM3【杂凑256】&#34; class=&#34;headerlink&#34; title=&#34;SM3【杂凑256】&#34;&gt;&lt;/a&gt;SM3【杂凑256】&lt;/h4&gt;&lt;p&gt;SM3杂凑算法对长度为l（1&amp;lt;24）比特的消息m，经过填充、迭代压缩，生成杂凑值，&lt;code&gt;杂凑值输出长度为256比特&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;详见GM/T0004-2012《SM3密码杂凑算法》。&lt;/p&gt;
&lt;h4 id=&#34;Hash函数与数字签名&#34;&gt;&lt;a href=&#34;#Hash函数与数字签名&#34; class=&#34;headerlink&#34; title=&#34;Hash函数与数字签名&#34;&gt;&lt;/a&gt;Hash函数与数字签名&lt;/h4&gt;&lt;p&gt;杂凑函数简称Hash函数，它能够将任意长度的信息转换成固定长度的哈希值（又称数字摘要或消息摘要），并且任意不同消息或文件所生成的哈希值是不一样的。令h表示Hash函数，则h满足下列条件：&lt;br&gt;（1）h的输入可以是任意长度的消息或文件M；&lt;br&gt;（2）h的输出的长度是固定的；&lt;br&gt;（3）给定h和M，计算h（M）是容易的；&lt;br&gt;（4）给定h的描述，找两个不同的消息M，和M2，使得h（M）=h（M2）是计算上不可行的。&lt;br&gt;Hash函数的安全性，是指在现有的计算资源下，找到一个碰撞是不可能的。Hash函数在网络安全应用中，不仅能用于保护消息或文件的完整性，而且也能用作密码信息的安全存储。&lt;br&gt;例如，网页防篡改应用。网页文件管理者首先用网页文件生成系列Hash值，并将Hash值备份存放在安全的地方。然后定时再计算这些网页文件的Hash值，如果新产生的Hash值与备份的Hash值不一样，则说明网页文件被篡改了。&lt;/p&gt;
&lt;h5 id=&#34;MD5【输入512-输出128】&#34;&gt;&lt;a href=&#34;#MD5【输入512-输出128】&#34; class=&#34;headerlink&#34; title=&#34;MD5【输入512-输出128】&#34;&gt;&lt;/a&gt;MD5【输入512-输出128】&lt;/h5&gt;&lt;p&gt;MD5（Message Digest Algorithm-5）算法是由Rivest设计的，于1992年公开，RFC1321对其进行了详细描述。&lt;/p&gt;
&lt;p&gt;MD5以&lt;code&gt;512位&lt;/code&gt;数据块为单位来处理输入，产生&lt;code&gt;128位&lt;/code&gt;的消息摘要，即&lt;strong&gt;MD5能产生128比特长度的哈希值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;MD5使用广泛，常用在文件完整性检查。但是，据最新研究表明，MD5的安全性受到挑战，王小云教授及其研究团队提出了Hash函数快速寻找碰撞攻击的方法，相关研究工作表明MD5的安全性已经不足。&lt;/p&gt;
&lt;h5 id=&#34;SHA【输入512-输出160】&#34;&gt;&lt;a href=&#34;#SHA【输入512-输出160】&#34; class=&#34;headerlink&#34; title=&#34;SHA【输入512-输出160】&#34;&gt;&lt;/a&gt;SHA【输入512-输出160】&lt;/h5&gt;&lt;p&gt;SHA（Secure Hash Algorithm）算法由NIST开发，并在1993年作为联邦信息处理标准公布。&lt;/p&gt;
&lt;p&gt;SHA-1与MD5的设计原理类似，同样也以&lt;code&gt;512位&lt;/code&gt;数据块为单位来处理输入，产生&lt;code&gt;160位&lt;/code&gt;的哈希值，具有&lt;strong&gt;比MD5更强的安全性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;SHA算法的安全性不断改进，已发布的版本有SHA-2、SHA-3。SHA算法产生的哈希值长度有SHA-224、SHA-256、SHA-384、SHA-512等。&lt;/p&gt;
&lt;h5 id=&#34;SM3【输入512-输出256】&#34;&gt;&lt;a href=&#34;#SM3【输入512-输出256】&#34; class=&#34;headerlink&#34; title=&#34;SM3【输入512-输出256】&#34;&gt;&lt;/a&gt;SM3【输入512-输出256】&lt;/h5&gt;&lt;p&gt;SM3 是国家密码管理局千 2010 年公布的商用密码杂凑算法标准 该算法消息分组长度为512 比特，输出杂凑值长度为 256 比特，采用 Merkle-Damgard 结构。&lt;/p&gt;
&lt;h4 id=&#34;数字签名&#34;&gt;&lt;a href=&#34;#数字签名&#34; class=&#34;headerlink&#34; title=&#34;数字签名&#34;&gt;&lt;/a&gt;数字签名&lt;/h4&gt;&lt;p&gt;数字签名（Digital Signature）是指签名者使用私钥对待签名数据的杂凑值做密码运算得到的结果。该结果只能用签名者的公钥进行验证，用于确认待签名数据的完整性、签名者身份的真实性和签名行为的抗抵赖性。数字签名的目的是通过网络信息安全技术手段实现传统的纸面签字或者盖章的功能，以确认交易当事人的真实身份，保证交易的安全性、真实性和不可抵赖性。数字签名具有与手写签名一样的特点，是可信的、不可伪造的、不可重用的、不可抵赖的以及不可修改的。数字签名至少应满足以下三个条件：&lt;br&gt;（1）&lt;code&gt;不可否认&lt;/code&gt;。签名者事后不能否认自己的签名。&lt;br&gt;（2）&lt;code&gt;真实性&lt;/code&gt;。接收者能验证签名，而任何其他人都不能伪造签名。&lt;br&gt;（3）&lt;code&gt;可鉴别性&lt;/code&gt;。当双方关于签名的真伪发生争执时，第三方能解决双方之间发生的争执。&lt;/p&gt;
&lt;p&gt;一个数字签名方案一般由签名算法和验证算法组成。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;签名算法密钥&lt;/code&gt;是&lt;code&gt;秘密&lt;/code&gt;的，&lt;strong&gt;只有签名的人掌握&lt;/strong&gt;；而&lt;code&gt;验证算法&lt;/code&gt;则是&lt;code&gt;公开&lt;/code&gt;的，以便他人验证。&lt;/p&gt;
&lt;p&gt;典型的数字签名方案有RSA签名体制、Rabin签名体制、ElGamal签名体制和DSS（Data Signature Standard）标准。&lt;/p&gt;
&lt;p&gt;签名与加密很相似，一般是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;签名方利用&lt;code&gt;秘密密钥&lt;/code&gt;（私钥）对需签名的数据进行&lt;code&gt;加密&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;验证方利用签名者的&lt;code&gt;公开密钥&lt;/code&gt;（公钥）对签名数据做&lt;code&gt;解密&lt;/code&gt;运算。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;签名与加密的不同之处在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;加密&lt;/code&gt;的目的是&lt;strong&gt;保护信息不被非授权用户访问&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;签名&lt;/code&gt;的目的是&lt;strong&gt;使消息接收者辨别 【信息的发送者，是谁】，信息是否被他人篡改&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="G计划" />
        <updated>2022-10-06T05:47:55.000Z</updated>
    </entry>
</feed>
