<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kiyomijin.github.io</id>
    <title>My Violet Eva Garden • Posts by &#34;g计划&#34; tag</title>
    <link href="https://kiyomijin.github.io" />
    <updated>2022-10-06T05:47:55.000Z</updated>
    <category term="原创" />
    <category term="G计划" />
    <category term="XSS跨站脚本攻击探究" />
    <category term="数据库安全" />
    <category term="SQL注入探究" />
    <category term="文件上传漏洞探究" />
    <category term="CTF小训" />
    <category term="Misc" />
    <entry>
        <id>https://kiyomijin.github.io/2022/10/06/G%E8%AE%A1%E5%88%92/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/</id>
        <title>密码学基础</title>
        <link rel="alternate" href="https://kiyomijin.github.io/2022/10/06/G%E8%AE%A1%E5%88%92/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
        <content type="html">&lt;h1 id=&#34;密码学基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#密码学基础&#34;&gt;#&lt;/a&gt; 密码学基础&lt;/h1&gt;
&lt;p&gt;密码学有三大原则：&lt;strong&gt;扩散、混淆、雪崩效应&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;扩散&lt;/code&gt; 就是让明文中的每一位影响密文中的许多位，或者说让密文中的每一位受明文中的许多位的影响．这样可以隐蔽明文的统计特性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;混淆&lt;/code&gt; 就是将密文与密钥之间的统计关系变得尽可能复杂，使得对手即使获取了关于密文的一些统计特性，也无法推测密钥。使用复杂的非线性代替变换可以达到比较好的混淆效果，而简单的线性代替变换得到的混淆效果则不理想。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;雪崩效应（Avalanche effect）&lt;/code&gt; 指加密算法【尤其是&lt;strong&gt;块密码&lt;/strong&gt; (分组密码) 和加密&lt;strong&gt;散列函数&lt;/strong&gt;】的一种理想属性。雪崩效应就是一种不稳定的平衡状态也是加密算法的一种特征，它指明文或密钥的少量变化会引起密文的很大变化。雪崩效应是指当输入发生最微小的改变（例如，反转一个二进制位）时，也会导致输出的剧变（如，输出中一半的二进制位发生反转）。在高品质的块密码中，无论密钥或明文的任何细微变化都应当引起密文的剧烈改变。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;目前只有 RSA 算法不具有雪崩效应。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;分组密码学原理与应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分组密码学原理与应用&#34;&gt;#&lt;/a&gt; 分组密码学原理与应用&lt;/h2&gt;
&lt;h3 id=&#34;原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;对称密钥密码体制又称分组密码体制、单密钥密码体制，是 &lt;strong&gt;加密密钥&lt;/strong&gt; 和 &lt;strong&gt;解密密钥&lt;/strong&gt;  &lt;code&gt;相同&lt;/code&gt; 的密码体制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;加密算法&lt;/code&gt; 、 &lt;code&gt;解密算法&lt;/code&gt; 是&lt;mark class=&#34;hl-label red&#34;&gt;公开&lt;/mark&gt; 的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;加密算法&lt;/code&gt; 必须足够 &lt;code&gt;复杂&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;其 &lt;code&gt;密钥必须保密&lt;/code&gt; 并且有足够大的密钥空间，从而使得攻击者在 &lt;code&gt;截取密文&lt;/code&gt; 和 &lt;code&gt;知道加密算法&lt;/code&gt; 的情况下，仍然 &lt;code&gt;无法还原&lt;/code&gt; 出 &lt;code&gt;明文&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;假设网络中有 &lt;code&gt;n个&lt;/code&gt; 使用者，使用者之间共享 &lt;code&gt;1个&lt;/code&gt; 秘钥，则共有 &lt;code&gt;n（n-1）/2个&lt;/code&gt; 秘钥。&lt;/p&gt;
&lt;p&gt;分组密码典型算法有： &lt;code&gt;DES&lt;/code&gt; 、 &lt;code&gt;IDEA&lt;/code&gt; 、 &lt;code&gt;AES&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;私钥密码算法&lt;/strong&gt; &lt;code&gt;处理速度快&lt;/code&gt; ，人们常常将其用作 &lt;code&gt;数据加密处理&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;密钥 &lt;code&gt;分配&lt;/code&gt; 问题&lt;/li&gt;
&lt;li&gt;密钥 &lt;code&gt;管理&lt;/code&gt; 问题&lt;/li&gt;
&lt;li&gt;无法认证 &lt;code&gt;源&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#应用&#34;&gt;#&lt;/a&gt; 应用&lt;/h3&gt;
&lt;h4 id=&#34;des64-56&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#des64-56&#34;&gt;#&lt;/a&gt; DES【64-56】&lt;/h4&gt;
&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;DES 是分组加密算法，能够支持 64 比特的明文块加密，其密钥长度为 56 比特。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;三重DES&lt;/code&gt; （Triple Data Encryption Algorithm， &lt;code&gt;TDEA&lt;/code&gt; ），也称为 &lt;code&gt;3DES&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;工作机制是使用 DES 对明文进行&lt;mark class=&#34;hl-label blue&#34;&gt;加密一解密一加密&lt;/mark&gt;  操作，即对 DES 加密后的密文进行解密再加密，而解密则相反。&lt;/p&gt;
&lt;p&gt;设 &lt;code&gt;EK()&lt;/code&gt;  和 &lt;code&gt;DK()&lt;/code&gt;  代表 DES 算法的加密和解密过程，代表 DES 算法使用的密钥， &lt;code&gt;I&lt;/code&gt;  代表明文输入， &lt;code&gt;O&lt;/code&gt;  代表密文输出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TDEA&lt;/strong&gt;  &lt;code&gt;加密&lt;/code&gt;  操作如下: &lt;mark class=&#34;hl-label blue&#34;&gt;加密一解密一加密&lt;/mark&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221006141353459.png&#34; alt=&#34;image-20221006141353459&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TDEA&lt;/strong&gt;  &lt;code&gt;解密&lt;/code&gt;  操作如下: &lt;mark class=&#34;hl-label blue&#34;&gt;解密一加密一解密&lt;/mark&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221006141424648.png&#34; alt=&#34;image-20221006141424648&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准定义了三种密钥&lt;/strong&gt;（针对&lt;strong&gt;密钥 K1,K2,K3&lt;/strong&gt;）选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密钥选项 1:  &lt;code&gt;K1≠K2≠K3&lt;/code&gt; ，强度最高，拥有 &lt;code&gt;3 x 56 = 168个&lt;/code&gt; 独立的密钥位&lt;/li&gt;
&lt;li&gt;密钥选项 2:  &lt;code&gt;K1≠K2&lt;/code&gt; ，但 &lt;code&gt;K3=K1&lt;/code&gt; ，强度其次，拥有 &lt;code&gt;2 x 56 = 112个&lt;/code&gt; 独立的密钥位&lt;/li&gt;
&lt;li&gt;密钥选项 3:  &lt;code&gt;K1=K2=K3&lt;/code&gt; ，强度最弱，拥有 &lt;code&gt;1 x 56 = 56个&lt;/code&gt; 独立的密钥位&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;idea64-128&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#idea64-128&#34;&gt;#&lt;/a&gt; IDEA【64-128】&lt;/h4&gt;
&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;IDEA（International Data Encryption Algorithm）是国际数据加密算法的简记，是一个分组加密处理算法，其明文和密文分组都是 64 比特，密钥长度为 128 比特。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;该算法是由来学嘉（X.J.Lai）和 Massey 提出的建议标准算法，已在 &lt;code&gt;PGP&lt;/code&gt;  中得到应用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt; 既可用于加密又可用于解密&lt;/code&gt;  ，该算法的设计思想是&lt;mark class=&#34;hl-label blue&#34;&gt;混合使用来自不同代数群中的运算&lt;/mark&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;aes64-128-192-256&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aes64-128-192-256&#34;&gt;#&lt;/a&gt; AES【64-128、192、256】&lt;/h4&gt;
&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;AES 是确定非保密的、公开的、全球免费使用的分组密码算法。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;p&gt;其密码 &lt;code&gt;必须是没有密级&lt;/code&gt; 的，绝不能像商业秘密那样来保护它&lt;/p&gt;
&lt;p&gt;算法的全部描述 &lt;code&gt;必须公开披露&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;密码 &lt;code&gt;必须可以在世界范围内免费使用&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;分组长度&lt;/code&gt; 至少为 &lt;code&gt;128比特&lt;/code&gt; ， &lt;code&gt;密钥长度&lt;/code&gt; 至少为 &lt;code&gt;128、192和256比特&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从参与 AES 的候选算法中，最终选择  &lt;code&gt;Rijndael&lt;/code&gt;  作为  &lt;code&gt;AES&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;国产密码中的&lt;/p&gt;
&lt;h4 id=&#34;sm1128-128&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sm1128-128&#34;&gt;#&lt;/a&gt; SM1【128-128】&lt;/h4&gt;
&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;SM1 算法是一种对称加密算法，分组长度为 128 比特，密钥长度为 128 比特。&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&#34;sm4128-128&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sm4128-128&#34;&gt;#&lt;/a&gt; SM4【128-128】&lt;/h4&gt;
&lt;div class=&#34;note blue icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-battery-half&#34;&gt;&lt;/i&gt;&lt;p&gt;SM4 算法也是一种对称加密算法，分组长度为 128 比特，密钥长度为 128 比特。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;加密算法与密钥扩展算法都采用 32 轮非线性迭代结构。&lt;/p&gt;
&lt;p&gt;数据解密和数据加密的算法结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。详见 GM/T0002-2012《SM4 分组密码算法》。&lt;/p&gt;
&lt;h4 id=&#34;数字信封对称密钥公钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字信封对称密钥公钥&#34;&gt;#&lt;/a&gt; 数字信封（对称密钥 + 公钥）&lt;/h4&gt;
&lt;p&gt;数字信封是一种综合利用了 &lt;code&gt;对称加密技术&lt;/code&gt; 和 &lt;code&gt;非对称加密技术&lt;/code&gt; 两者的优点进行 &lt;code&gt;信息安全传输&lt;/code&gt; 的一种技术。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发送方采用 &lt;code&gt;对称密钥&lt;/code&gt; 来 &lt;code&gt;加密信息内容&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;发送方再用接收方的 &lt;code&gt;公开密钥&lt;/code&gt; 来 &lt;code&gt;加密对称密钥&lt;/code&gt; （这部分称数字信封），将它和加密后的信息一起发送给接收方&lt;/li&gt;
&lt;li&gt;接收方先用自己的 &lt;code&gt;私有密钥&lt;/code&gt; 打开数字信封，得到 &lt;code&gt;对称密钥&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接收方最后使用 &lt;code&gt;对称密钥&lt;/code&gt; 解开加密信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数字信封既发挥了对称加密算法速度快、安全性好的优点，又发挥了非对称加密算法密钥管理方便的优点。&lt;/p&gt;
&lt;h2 id=&#34;公钥密码学原理与应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#公钥密码学原理与应用&#34;&gt;#&lt;/a&gt; 公钥密码学原理与应用&lt;/h2&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理-2&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;公钥密码体制，也称 &lt;code&gt;非对称密码体制&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;其基本原理是：在加密和解密的过程中&lt;strong&gt;使用不同的密钥处理&lt;/strong&gt;方式。&lt;/p&gt;
&lt;p&gt;其中， &lt;code&gt;加密密钥&lt;/code&gt; 可以&lt;mark class=&#34;hl-label red&#34;&gt;公开&lt;/mark&gt; ，而只需要把 &lt;code&gt;解密密钥&lt;/code&gt; &lt;strong&gt;安全存放即可&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在安全性方面，&lt;strong&gt;即使密码算法公开&lt;/strong&gt;，由加密密钥推知解密密钥也是计算不可行的。&lt;/p&gt;
&lt;h3 id=&#34;优点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-2&#34;&gt;#&lt;/a&gt; 优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;密钥 &lt;code&gt;分发方便&lt;/code&gt; ，能以公开方式分配加密密钥：如因特网中个人安全通信经常将自己的公钥发布在网页中，方便其他人用它进行安全加密&lt;/li&gt;
&lt;li&gt;密钥 &lt;code&gt;保管量少&lt;/code&gt; ：所有发送方共用一个公开秘钥，只要接收方保护好解密秘钥，就能实现安全通信&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;数字签名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有三种公钥密码体制类型被证明是安全和有效的，即 &lt;code&gt;RSA&lt;/code&gt;  体制、 &lt;code&gt;ELGamal&lt;/code&gt;  体制、 &lt;code&gt;椭圆曲线&lt;/code&gt; 密码体制（也叫 &lt;code&gt;EC&lt;/code&gt; ）。&lt;/p&gt;
&lt;h3 id=&#34;应用-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#应用-2&#34;&gt;#&lt;/a&gt; 应用&lt;/h3&gt;
&lt;h4 id=&#34;rsan的长度1024长期安全2048&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rsan的长度1024长期安全2048&#34;&gt;#&lt;/a&gt; RSA【n 的长度 1024，长期安全 2048】&lt;/h4&gt;
&lt;p&gt;RSA 算法是非对称算法，在 RSA 加密算法中， &lt;code&gt;公钥&lt;/code&gt; 和 &lt;code&gt;私钥&lt;/code&gt; 都可以用于加密消息，&lt;strong&gt;用于 加密消息的密钥 与 用于解密消息的密钥 相反&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;RSA 算法提供了一种保护网络通信和数据存储的 &lt;code&gt;机密性&lt;/code&gt; 、 &lt;code&gt;完整性&lt;/code&gt; 、 &lt;code&gt;真实性&lt;/code&gt; 和 &lt;code&gt;不可否认性&lt;/code&gt; 的方法。&lt;/p&gt;
&lt;p&gt;目前 &lt;code&gt;SSH&lt;/code&gt; 、 &lt;code&gt;OpenPGP&lt;/code&gt; 、 &lt;code&gt;S/MIME&lt;/code&gt; 、 &lt;code&gt;SSL/TLS&lt;/code&gt;  网络协议 &lt;code&gt;都依赖于RSA&lt;/code&gt;  进行加密和数字签名功能。&lt;/p&gt;
&lt;p&gt;RSA 算法在 &lt;code&gt;浏览器中使用&lt;/code&gt; ，能够在不可信任的互联网中建立安全连接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RSA签名验证&lt;/code&gt; 是 &lt;code&gt;网络连接系统&lt;/code&gt; 中最常见的执行操作之一。&lt;/p&gt;
&lt;p&gt;RSA 算法基于&lt;mark class=&#34;hl-label blue&#34;&gt;大整数因子分解的困难性&lt;/mark&gt; &lt;/p&gt;
&lt;h5 id=&#34;rsa计算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rsa计算&#34;&gt;#&lt;/a&gt; RSA 计算&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;n=p*q&lt;/li&gt;
&lt;li&gt;φ(n)=(p-1)*(q-1) 求 φ(n)&lt;/li&gt;
&lt;li&gt;e*d mod φ(n) =1 求 e d 其中之一&lt;/li&gt;
&lt;li&gt;c=m^e mod n 加密&lt;/li&gt;
&lt;li&gt;m=c^d mod n 解密&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;字符说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符说明&#34;&gt;#&lt;/a&gt; 字符说明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;p，q 为两个素数，n 为 p，q 乘积。&lt;/li&gt;
&lt;li&gt;φ() 为欧拉函数，φ(n) 为小于或等于 n 的正整数中与 n 互质的数的数目【简单记住 (p-1)*(q-1) 公式就行】&lt;/li&gt;
&lt;li&gt;e 为随机一个整数，d 也是一个数字，题中会给出 e 和 d 其中一个不用纠结，可以用公式 3 求出来 ed 其中之一&lt;/li&gt;
&lt;li&gt;mod 是取余函数，例如 3*5 mod 14，取余就是 1&lt;/li&gt;
&lt;li&gt;c 是密文，m 是明文&lt;/li&gt;
&lt;li d=&#34;&#34;&gt;公钥为 {e，n}，私钥为&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;例题&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;考虑RSA密码体制，令p=3，q=11，d=7，m=5，给出密文C的计算过程。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n = 3×11 = 33；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;φ(n) = 2×10 = 20；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;因为d=7, 根据e*d modφ(n) = 1；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;求出e=3；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;C = m^e mod n = 53 mod 33 = 26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;即:C为26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;国产密码算法&lt;/p&gt;
&lt;p&gt;国产密码算法是指由国家密码研究相关机构自主研发，具有相关知识产权的商用密码算法。&lt;/p&gt;
&lt;p&gt;1999 年国务院发布实施的《商用密码管理条例》第一章第二条规定：“本条例所称商用密码，是指对不涉及国家秘密内容的信息进行加密保护或者安全认证所使用的密码技术和密码产品。” 目前，已经公布的国产密码算法主要有 SM1 分组密码算法、SM2 椭圆曲线公钥密码算法、SM3 密码杂凑算法、SM4 分组算法、SM9 标识密码算法。各国产商用密码算法的特性统计如表 3-1 所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221006151616629.png&#34; alt=&#34;image-20221006151616629&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;sm2椭圆素数域256&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sm2椭圆素数域256&#34;&gt;#&lt;/a&gt; SM2【椭圆素数域 256】&lt;/h4&gt;
&lt;p&gt;SM2 算法 &lt;code&gt;基于椭圆曲线&lt;/code&gt; ，应用于公钥密码系统。&lt;/p&gt;
&lt;p&gt;对于一般椭圆曲线的离散对数问题，目前只存在指数级计算复杂度的求解方法。与大数分解问题及有限域上离散对数问题相比，椭圆曲线离散对数问题的求解难度要大得多。因此，在相同安全程度的要求下，椭圆曲线密码较其他公钥密码所需的密钥规模要小得多。&lt;/p&gt;
&lt;p&gt;SM2 算法可以用于数字签名、密钥交换、公钥加密。详见 GM/T 0009-2012《SM2 密码算法使用规范》。&lt;/p&gt;
&lt;h4 id=&#34;sm3杂凑256&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sm3杂凑256&#34;&gt;#&lt;/a&gt; SM3【杂凑 256】&lt;/h4&gt;
&lt;p&gt;SM3 杂凑算法对长度为 l（1&amp;lt;24）比特的消息 m，经过填充、迭代压缩，生成杂凑值， &lt;code&gt;杂凑值输出长度为256比特&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;详见 GM/T0004-2012《SM3 密码杂凑算法》。&lt;/p&gt;
&lt;h4 id=&#34;hash函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hash函数&#34;&gt;#&lt;/a&gt; Hash 函数&lt;/h4&gt;
&lt;p&gt;杂凑函数简称 Hash 函数，它能够将任意长度的信息转换成固定长度的哈希值（又称数字摘要或消息摘要），并且任意不同消息或文件所生成的哈希值是不一样的。令 h 表示 Hash 函数，则 h 满足下列条件：&lt;br&gt;
（1）h 的输入可以是任意长度的消息或文件 M；&lt;br&gt;
（2）h 的输出的长度是固定的；&lt;br&gt;
（3）给定 h 和 M，计算 h（M）是容易的；&lt;br&gt;
（4）给定 h 的描述，找两个不同的消息 M，和 M2，使得 h（M）=h（M2）是计算上不可行的。&lt;br&gt;
Hash 函数的安全性，是指在现有的计算资源下，找到一个碰撞是不可能的。Hash 函数在网络安全应用中，不仅能用于保护消息或文件的完整性，而且也能用作密码信息的安全存储。&lt;br&gt;
例如，网页防篡改应用。网页文件管理者首先用网页文件生成系列 Hash 值，并将 Hash 值备份存放在安全的地方。然后定时再计算这些网页文件的 Hash 值，如果新产生的 Hash 值与备份的 Hash 值不一样，则说明网页文件被篡改了。&lt;/p&gt;
&lt;h5 id=&#34;md5输入512-输出128&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#md5输入512-输出128&#34;&gt;#&lt;/a&gt; MD5【输入 512 - 输出 128】&lt;/h5&gt;
&lt;p&gt;MD5（Message Digest Algorithm-5）算法是由 Rivest 设计的，于 1992 年公开，RFC1321 对其进行了详细描述。&lt;/p&gt;
&lt;p&gt;MD5 以 &lt;code&gt;512位&lt;/code&gt; 数据块为单位来处理输入，产生 &lt;code&gt;128位&lt;/code&gt; 的消息摘要，即&lt;strong&gt; MD5 能产生 128 比特长度的哈希值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;MD5 使用广泛，常用在文件完整性检查。但是，据最新研究表明，MD5 的安全性受到挑战，王小云教授及其研究团队提出了 Hash 函数快速寻找碰撞攻击的方法，相关研究工作表明 MD5 的安全性已经不足。&lt;/p&gt;
&lt;h5 id=&#34;sha输入512-输出160&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sha输入512-输出160&#34;&gt;#&lt;/a&gt; SHA【输入 512 - 输出 160】&lt;/h5&gt;
&lt;p&gt;SHA（Secure Hash Algorithm）算法由 NIST 开发，并在 1993 年作为联邦信息处理标准公布。&lt;/p&gt;
&lt;p&gt;SHA-1 与 MD5 的设计原理类似，同样也以 &lt;code&gt;512位&lt;/code&gt; 数据块为单位来处理输入，产生 &lt;code&gt;160位&lt;/code&gt; 的哈希值，具有&lt;strong&gt;比 MD5 更强的安全性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;SHA 算法的安全性不断改进，已发布的版本有 SHA-2、SHA-3。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注意&lt;/code&gt; ：SHA 算法产生的哈希值长度有 SHA-224、SHA-256、SHA-384、SHA-512 等。但一般只考 SHA-1&lt;/p&gt;
&lt;h5 id=&#34;sm3输入512-输出256&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sm3输入512-输出256&#34;&gt;#&lt;/a&gt; SM3【输入 512 - 输出 256】&lt;/h5&gt;
&lt;p&gt;SM3 是国家密码管理局千 2010 年公布的商用密码杂凑算法标准 该算法消息分组长度为 &lt;code&gt;512 比特&lt;/code&gt; ，输出杂凑值长度为 &lt;code&gt; 256 比特&lt;/code&gt; ，采用 Merkle-Damgard 结构。&lt;/p&gt;
&lt;h4 id=&#34;数字签名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数字签名&#34;&gt;#&lt;/a&gt; 数字签名&lt;/h4&gt;
&lt;p&gt;数字签名（Digital Signature）是指签名者使用私钥对待签名数据的杂凑值做密码运算得到的结果。&lt;/p&gt;
&lt;p&gt;该结果只能用签名者的公钥进行验证，用于确认待签名数据的完整性、签名者身份的真实性和签名行为的抗抵赖性。&lt;/p&gt;
&lt;p&gt;数字签名的目的是&lt;strong&gt;通过网络信息安全技术手段实现传统的纸面签字或者盖章的功能&lt;/strong&gt;，以 &lt;code&gt;确认交易当事人的真实身份&lt;/code&gt; ， &lt;code&gt;保证交易的安全性&lt;/code&gt; 、 &lt;code&gt;真实性&lt;/code&gt; 和 &lt;code&gt;不可抵赖性&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;数字签名具有与手写签名一样的特点，是&lt;strong&gt;可信的、不可伪造的、不可重用的、不可抵赖的&lt;/strong&gt;以及&lt;mark class=&#34;hl-label red&#34;&gt;不可修改&lt;/mark&gt; 的。&lt;/p&gt;
&lt;p&gt;数字签名至少应满足以下三个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;不可否认&lt;/code&gt; 。签名者事后不能否认自己的签名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;真实性&lt;/code&gt; 。接收者能验证签名，而任何其他人都不能伪造签名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;可鉴别性&lt;/code&gt; 。当双方关于签名的真伪发生争执时，第三方能解决双方之间发生的争执。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个数字签名方案一般由签名算法和验证算法组成。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;签名算法密钥&lt;/code&gt; 是 &lt;code&gt;秘密&lt;/code&gt; 的，&lt;strong&gt;只有签名的人掌握&lt;/strong&gt;；而 &lt;code&gt;验证算法&lt;/code&gt; 则是 &lt;code&gt;公开&lt;/code&gt; 的，以便他人验证。&lt;/p&gt;
&lt;p&gt;典型的数字签名方案有 RSA 签名体制、Rabin 签名体制、ElGamal 签名体制和 DSS（Data Signature Standard）标准。&lt;/p&gt;
&lt;p&gt;签名与加密很相似，一般是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;签名方利用 &lt;code&gt;秘密密钥&lt;/code&gt; （私钥）对需签名的数据进行 &lt;code&gt;加密&lt;/code&gt; ，&lt;/li&gt;
&lt;li&gt;验证方利用签名者的 &lt;code&gt;公开密钥&lt;/code&gt; （公钥）对签名数据做 &lt;code&gt;解密&lt;/code&gt; 运算。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;签名与加密的不同之处在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;加密&lt;/code&gt; 的目的是&lt;strong&gt;保护信息不被非授权用户访问&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;签名&lt;/code&gt; 的目的是&lt;strong&gt;使消息接收者辨别 【信息的发送者，是谁】，信息是否被他人篡改&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="G计划" />
        <updated>2022-10-06T05:47:55.000Z</updated>
    </entry>
</feed>
