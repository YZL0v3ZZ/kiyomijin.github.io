{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden • All posts by \"文件上传漏洞探究\" category",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%89%8D%E5%8F%B0JS%E9%AA%8C%E8%AF%81%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/",
            "url": "https://kiyomijin.github.io/2022/10/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8E%A2%E7%A9%B6/%E5%89%8D%E5%8F%B0JS%E9%AA%8C%E8%AF%81%E5%AE%A1%E8%AE%A1+%E7%BB%95%E8%BF%87/",
            "title": "前台JS验证审计+绕过",
            "date_published": "2022-10-02T16:34:47.000Z",
            "content_html": "<h1 id=\"文件上传漏洞\"><a class=\"markdownIt-Anchor\" href=\"#文件上传漏洞\">#</a> 文件上传漏洞</h1>\n<p>在讲前台 JS 绕过之前，由于是文件上传漏洞探究系列的第一讲，先来简单介绍一下文件上传漏洞。</p>\n<h2 id=\"文件上传漏洞的原因\"><a class=\"markdownIt-Anchor\" href=\"#文件上传漏洞的原因\">#</a> 文件上传漏洞的原因</h2>\n<ul>\n<li>对于上传文件的后缀名 (扩展名) 没有做较为严格的限制</li>\n<li>对于上传文件的 MIMETYPE (content-type，用于描述文件类型的一种描述方法)，没有做检查</li>\n<li>权限上没有对于上传的文件目录设置不可执行权限</li>\n<li>web server 对于上传文件或者指定目录的行为没有做限制。</li>\n</ul>\n<p>​\t在 Web 中进行文件上传的原理是通过将表单设置为 <code>multipart/form-data</code> ，同时加入文件域，而后通过 HTTP 协议将文件内容发送到服务器，服务器端读取这个分段（<strong>multipart</strong>）的数据信息，并将其中的文件内容提取出来并保存。</p>\n<p>​\t通常，在进行文件保存的时候，服务器端会读取文件的原始文件名，并从这个原始文件名中得出文件的扩展名，而后随机为文件起一个文件名（为了防止重复），并且加上原始文件的扩展名来保存到服务器上。</p>\n<h2 id=\"文件上传漏洞的危害\"><a class=\"markdownIt-Anchor\" href=\"#文件上传漏洞的危害\">#</a> 文件上传漏洞的危害</h2>\n<ul>\n<li>上传 web 木马文件、控制 web 服务器文件、远程命令执行等</li>\n<li>上传系统病毒、木马文件进行挖矿、僵尸网络</li>\n<li>上传系统溢出程序进行权限提升</li>\n<li>修改 web 页面实现钓鱼、挂马、暗链等操作</li>\n<li>内网渗透</li>\n<li>在权限得到提升的情况下，想做什么就做什么</li>\n</ul>\n<h2 id=\"文件上传合法性检测方法\"><a class=\"markdownIt-Anchor\" href=\"#文件上传合法性检测方法\">#</a> 文件上传合法性检测方法</h2>\n<ul>\n<li>前端 Js 验证</li>\n<li>MIME 类型验证</li>\n<li>黑名单 / 白名单</li>\n<li>检查文件内容 (getimagesize () 函数用于获取图像信息、校验关键字)</li>\n<li>禁止本地文件包含漏洞</li>\n<li>使用安全的 web 服务 (Apache、nginx (/test.png/xxx.php)、IIS 解析漏洞 (1.php;jpg))</li>\n</ul>\n<h2 id=\"文件上传漏洞8种常见绕过方法\"><a class=\"markdownIt-Anchor\" href=\"#文件上传漏洞8种常见绕过方法\">#</a> 文件上传漏洞 8 种常见绕过方法</h2>\n<p>（整体会有 20 多种，这里列举常见 8 种）</p>\n<ul>\n<li>前端 Js 绕过</li>\n<li>MIME 类型绕过</li>\n<li>后缀名大小写绕过 /php4、php5</li>\n<li>00 截断</li>\n<li>覆盖.htaccess</li>\n<li>Windows 文件流特性绕过</li>\n<li>双写文件名绕过</li>\n<li>条件竞争</li>\n</ul>\n<h2 id=\"文件下载漏洞概念\"><a class=\"markdownIt-Anchor\" href=\"#文件下载漏洞概念\">#</a> 文件下载漏洞概念</h2>\n<ul>\n<li>一些网站由于业务需求，往往需要提供文件查看或文件下载功能，但若对用户查看或下载的文件不做限制，则恶意用户就能够查看或下载任意敏感文件，这就是文件查看与下载漏洞。</li>\n<li>下载服务器任意文件，如脚本代码、服务及系统配置文件等可用得到的代码进一步做代码审计，得到更多可利用漏洞。</li>\n</ul>\n<h2 id=\"如何查找任意文件下载漏洞呢\"><a class=\"markdownIt-Anchor\" href=\"#如何查找任意文件下载漏洞呢\">#</a> 如何查找任意文件下载漏洞呢？</h2>\n<p>查找传入文件名的参数：</p>\n<ul>\n<li>导入文件等参数，要是直接输入文件名，就有可能有注入点。</li>\n</ul>\n<p>注意如下几个参数名：</p>\n<ul>\n<li>RealPath, FilePath, filepath, Path, path, inputFile, url, urls, Lang, dis, data, readfile, filep</li>\n<li>src, menu, META-INF, WEB-INF</li>\n</ul>\n<p>代码中如何查找漏洞：</p>\n<p>PHP 为例，有如下代码，就有可能存在任意文件下载漏洞</p>\n<ul>\n<li>readfile</li>\n<li>fopen</li>\n<li>file_get_contents</li>\n</ul>\n<h2 id=\"windows敏感文件路径\"><a class=\"markdownIt-Anchor\" href=\"#windows敏感文件路径\">#</a> Windows 敏感文件路径</h2>\n<p><img src=\"image-20221003011837881.png\" alt=\"image-20221003011837881\"></p>\n<h2 id=\"linux敏感文件路径\"><a class=\"markdownIt-Anchor\" href=\"#linux敏感文件路径\">#</a> Linux 敏感文件路径</h2>\n<p><img src=\"image-20221003011901170.png\" alt=\"image-20221003011901170\"></p>\n<h2 id=\"修复文件下载漏洞\"><a class=\"markdownIt-Anchor\" href=\"#修复文件下载漏洞\">#</a> 修复文件下载漏洞</h2>\n<p>PHP 为例：</p>\n<ul>\n<li>过滤.(点)，使用户在 url 种不能回溯上级目录</li>\n<li>正则严格判断用户输入参数的格式</li>\n<li>php.ini 配置 open_basedir 限定文件访问范围</li>\n</ul>\n<p>OK，进入主题</p>\n<h1 id=\"配置虚拟主机\"><a class=\"markdownIt-Anchor\" href=\"#配置虚拟主机\">#</a> 配置虚拟主机</h1>\n<p>虚拟主机，能够将我们的多个 apache 做成域名的方式访问。</p>\n<p>打开 phpStudyB\\Apache\\conf\\httpd.conf 文件，一共修改两处：</p>\n<ul>\n<li>取消 LoadModule 关于 vhost_alias 的注释</li>\n</ul>\n<p><img src=\"image-20221003113249079.png\" alt=\"image-20221003113249079\"></p>\n<ul>\n<li>取消 Virtual hosts 的 Include 所在行注释</li>\n</ul>\n<p><img src=\"image-20221003113333330.png\" alt=\"image-20221003113333330\"></p>\n<p>再打开 C:\\phpStudyB\\Apache\\conf\\extra\\httpd-vhosts.conf 文件</p>\n<p><img src=\"image-20221003113809255.png\" alt=\"image-20221003113809255\"></p>\n<p>接下来就是重启 phpStudy 就行了。</p>\n<h1 id=\"一句话木马\"><a class=\"markdownIt-Anchor\" href=\"#一句话木马\">#</a> 一句话木马</h1>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> @<span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[abcd]);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>简而言之，就是只有一句代码的木马。@eval 就是执行一些传的参数命令，$_POST 接收我们的 POST 请求，参数的名称是 abcd。总之，就是可以 <code>执行</code> 我们发送的带参数的命令请求。</p>\n<p>功能是实现：数据库管理、生成虚拟终端、文件管理。</p>\n<h1 id=\"前台js验证审计绕过\"><a class=\"markdownIt-Anchor\" href=\"#前台js验证审计绕过\">#</a> 前台 JS 验证审计 + 绕过</h1>\n<h2 id=\"前台js验证审计\"><a class=\"markdownIt-Anchor\" href=\"#前台js验证审计\">#</a> 前台 Js 验证审计</h2>\n<p>上传 backdoor.php (含有一句话木马)</p>\n<p><img src=\"image-20221003124200976.png\" alt=\"image-20221003124200976\"></p>\n<p>ok，我们开始抓包</p>\n<p>启动 BurpSuit，intercept on，结果再次点击上传按钮，却没有抓到任何的包</p>\n<p>我们 F12 看源码进行代码审计</p>\n<h3 id=\"上传按钮代码审计\"><a class=\"markdownIt-Anchor\" href=\"#上传按钮代码审计\">#</a> 上传按钮代码审计</h3>\n<p>首先我们知道，重要的上传逻辑肯定在这些字样的附近：</p>\n<p><img src=\"image-20221003124524219.png\" alt=\"image-20221003124524219\"></p>\n<p>那么我们找到 &quot;<strong> 上传区</strong> &quot;、&quot;<strong> 请选择要上传的图片</strong> &quot; 这个字样，就能精准定位到相关源码附近。</p>\n<p><img src=\"image-20221003124332517.png\" alt=\"image-20221003124332517\"></p>\n<p>上面一段代码的主要逻辑：</p>\n<ul>\n<li>\n<p>属于 <code>form</code>  数据，使用 <code>POST</code>  请求</p>\n</li>\n<li>\n<p>有<strong>两个</strong>输入 <code>input</code> ：</p>\n<ul>\n<li>\n<p>一个是 input_file，类型是 <code>file</code> ，命名为 upload_file，意为待上传的文件。</p>\n</li>\n<li>\n<p>一个是 button，类型是 <code>submit</code> ，命名为 submit，按钮名称为 “上传”</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>form</code>  请求在点击 submit 时<strong>会触发的方法</strong> —— <code>onsubmit</code></p>\n<ul>\n<li>return checkFile ()：属于 <code>JavaScript(简称Js)</code>  语法，意为将会调用 <code>checkFile()</code> ，并将其结果返回</li>\n<li><code>onsubmit</code>  就是在提交之前<strong>验证上传文件的合法性，属于前端验证</strong></li>\n</ul>\n</li>\n</ul>\n<p>好的，继续来看一下关键的 <code>checkFile()</code>  函数都干了什么：</p>\n<p><img src=\"image-20221003125613717.png\" alt=\"image-20221003125613717\"></p>\n<p><strong>checkFile () 函数主要逻辑：</strong></p>\n<ul>\n<li>\n<p>通过 <code>getElementsByName()</code>  函数，参数为 <code>upload_file</code>  来获取其数组中第一个元素值 (下标从 0 开始)—— 也就是<strong> upload_file 对应的文件</strong>。</p>\n</li>\n<li>\n<p>如果 <code>upload_file对应的文件</code> 为空，那么就弹出 &quot;请选择要上传的文件！&quot;</p>\n</li>\n<li>\n<p>如果非空，则继续往下走</p>\n<ul>\n<li>定义了允许上传的文件类型为 “.jpg| .png| .gif”</li>\n</ul>\n</li>\n<li>\n<p>通过 lastIndexOf 函数获取 <code>最后一个.</code>  出现的位置进行截取字符串，获得的是 <code>最后一个.</code>  右边的字符串 ——<strong> 获得上传文件后缀名</strong></p>\n</li>\n<li>\n<p>判断 <code>上传文件后缀名</code> 是否在刚刚定义的类型里面</p>\n<ul>\n<li>如果不在则弹出 “该文件不允许上传…”，并 return  <code>false</code></li>\n<li>否则 return  <code>true</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前台js验证绕过\"><a class=\"markdownIt-Anchor\" href=\"#前台js验证绕过\">#</a> 前台 Js 验证绕过</h2>\n<p>我们再次刷新上传页面，使用 BurpSuit 抓到页面返回的源码信息</p>\n<p><img src=\"image-20221003130553004.png\" alt=\"image-20221003130553004\"></p>\n<p>直接找到刚刚定位的 checkFile () 函数，将其内容改成 <code>return true;</code> ，意为<strong>无论什么文件，恒返回真</strong>。</p>\n<p><img src=\"image-20221003130644011.png\" alt=\"image-20221003130644011\"></p>\n<p>点击 &quot;Forward&quot; 按钮。</p>\n<p>然后上传我们的一句话木马，backdoor.php，点击 “上传”，之后就可以成功抓到包。</p>\n<p><img src=\"image-20221003130804344.png\" alt=\"image-20221003130804344\"></p>\n<p>之后一顿 Forward，提交过去。</p>\n<p>显示了我们上传的 php，即上传成功。</p>\n<p><img src=\"image-20221003130947145.png\" alt=\"image-20221003130947145\"></p>\n<p>我们使用中国菜刀连接获取 webshell 即可。</p>\n",
            "tags": [
                "文件上传漏洞探究"
            ]
        }
    ]
}