{
    "version": "https://jsonfeed.org/version/1",
    "title": "My Violet Eva Garden • All posts by \"g计划\" category",
    "description": "",
    "home_page_url": "https://kiyomijin.github.io",
    "items": [
        {
            "id": "https://kiyomijin.github.io/2022/10/06/G%E8%AE%A1%E5%88%92/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/",
            "url": "https://kiyomijin.github.io/2022/10/06/G%E8%AE%A1%E5%88%92/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%9F%BA%E7%A1%80/",
            "title": "密码学基础",
            "date_published": "2022-10-06T05:47:55.000Z",
            "content_html": "<h1 id=\"密码学基础\"><a href=\"#密码学基础\" class=\"headerlink\" title=\"密码学基础\"></a>密码学基础</h1><p>密码学有三大原则：<strong>扩散、混淆、雪崩效应</strong></p>\n<ul>\n<li><code>扩散</code>就是让明文中的每一位影响密文中的许多位，或者说让密文中的每一位受明文中的许多位的影响．这样可以隐蔽明文的统计特性。</li>\n<li><code>混淆</code>就是将密文与密钥之间的统计关系变得尽可能复杂，使得对手即使获取了关于密文的一些统计特性，也无法推测密钥。使用复杂的非线性代替变换可以达到比较好的混淆效果，而简单的线性代替变换得到的混淆效果则不理想。</li>\n<li><code>雪崩效应（Avalanche effect）</code>指加密算法【尤其是<strong>块密码</strong>(分组密码)和加密<strong>散列函数</strong>】的一种理想属性。雪崩效应就是一种不稳定的平衡状态也是加密算法的一种特征，它指明文或密钥的少量变化会引起密文的很大变化。雪崩效应是指当输入发生最微小的改变（例如，反转一个二进制位）时，也会导致输出的剧变（如，输出中一半的二进制位发生反转）。在高品质的块密码中，无论密钥或明文的任何细微变化都应当引起密文的剧烈改变。</li>\n</ul>\n<div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>目前只有RSA算法不具有雪崩效应。</p>\n</div>\n<h2 id=\"分组密码学原理与应用\"><a href=\"#分组密码学原理与应用\" class=\"headerlink\" title=\"分组密码学原理与应用\"></a>分组密码学原理与应用</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>对称密钥密码体制又称分组密码体制、单密钥密码体制，是 <strong>加密密钥</strong> 和 <strong>解密密钥</strong> <code>相同</code>的密码体制。</p>\n<p><code>加密算法</code>、<code>解密算法</code>是<mark class=\"hl-label red\">公开</mark> 的。</p>\n<p><code>加密算法</code>必须足够<code>复杂</code>。</p>\n<p>其<code>密钥必须保密</code>并且有足够大的密钥空间，从而使得攻击者在<code>截取密文</code>和<code>知道加密算法</code>的情况下，仍然<code>无法还原</code>出<code>明文</code>。</p>\n<p>假设网络中有<code>n个</code>使用者，使用者之间共享<code>1个</code>秘钥，则共有<code>n（n-1）/2个</code>秘钥。</p>\n<p>分组密码典型算法有：<code>DES</code>、<code>IDEA</code>、<code>AES</code>。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p><strong>私钥密码算法</strong><code>处理速度快</code>，人们常常将其用作<code>数据加密处理</code>。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>密钥<code>分配</code>问题</li>\n<li>密钥<code>管理</code>问题</li>\n<li>无法认证<code>源</code></li>\n</ul>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><h4 id=\"DES【64-56】\"><a href=\"#DES【64-56】\" class=\"headerlink\" title=\"DES【64-56】\"></a>DES【64-56】</h4><div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>DES 是分组加密算法，能够支持64比特的明文块加密，其密钥长度为56比特。</p>\n</div>\n<p><code>三重DES</code>（Triple Data Encryption Algorithm，<code>TDEA</code>），也称为<code>3DES</code>。</p>\n<p>工作机制是使用DES对明文进行<mark class=\"hl-label blue\">加密一解密一加密</mark>  操作，即对DES加密后的密文进行解密再加密，而解密则相反。</p>\n<p>设<code>EK()</code>和<code>DK()</code>代表DES算法的加密和解密过程，代表DES算法使用的密钥，<code>I</code>代表明文输入，<code>O</code>代表密文输出。</p>\n<p><strong>TDEA</strong> <code>加密</code> 操作如下: <mark class=\"hl-label blue\">加密一解密一加密</mark> </p>\n<p><img src=\"image-20221006141353459.png\" alt=\"image-20221006141353459\"></p>\n<p><strong>TDEA</strong> <code>解密</code> 操作如下: <mark class=\"hl-label blue\">解密一加密一解密</mark> </p>\n<p><img src=\"image-20221006141424648.png\" alt=\"image-20221006141424648\"></p>\n<p><strong>标准定义了三种密钥</strong>（针对<strong>密钥K1,K2,K3</strong>）选项：</p>\n<ul>\n<li>密钥选项1: <code>K1≠K2≠K3</code>，强度最高，拥有<code>3 x 56 = 168个</code>独立的密钥位</li>\n<li>密钥选项2: <code>K1≠K2</code>，但<code>K3=K1</code>，强度其次，拥有<code>2 x 56 = 112个</code>独立的密钥位</li>\n<li>密钥选项3: <code>K1=K2=K3</code>，强度最弱，拥有<code>1 x 56 = 56个</code>独立的密钥位</li>\n</ul>\n<h4 id=\"IDEA【64-128】\"><a href=\"#IDEA【64-128】\" class=\"headerlink\" title=\"IDEA【64-128】\"></a>IDEA【64-128】</h4><div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>IDEA（International Data Encryption Algorithm）是国际数据加密算法的简记，是一个分组加密处理算法，其明文和密文分组都是64比特，密钥长度为128比特。</p>\n</div>\n<p>该算法是由来学嘉（X.J.Lai）和Massey提出的建议标准算法，已在<code>PGP</code>中得到应用。</p>\n<p><code>既可用于加密又可用于解密</code> ，该算法的设计思想是<mark class=\"hl-label blue\">混合使用来自不同代数群中的运算</mark> 。</p>\n<h4 id=\"AES【64-128、192、256】\"><a href=\"#AES【64-128、192、256】\" class=\"headerlink\" title=\"AES【64-128、192、256】\"></a>AES【64-128、192、256】</h4><div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>AES是确定非保密的、公开的、全球免费使用的分组密码算法。</p>\n</div>\n<p>特点：</p>\n<p>其密码<code>必须是没有密级</code>的，绝不能像商业秘密那样来保护它</p>\n<p>算法的全部描述<code>必须公开披露</code></p>\n<p>密码<code>必须可以在世界范围内免费使用</code></p>\n<p><code>分组长度</code>至少为<code>128比特</code>，<code>密钥长度</code>至少为<code>128、192和256比特</code></p>\n<p>从参与AES的候选算法中，最终选择 <code>Rijndael</code>作为 <code>AES</code></p>\n<p>国产密码中的</p>\n<h4 id=\"SM1【128-128】\"><a href=\"#SM1【128-128】\" class=\"headerlink\" title=\"SM1【128-128】\"></a>SM1【128-128】</h4><div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>SM1 算法是一种对称加密算法，分组长度为 128 比特，密钥长度为 128 比特。</p>\n</div>\n<h4 id=\"SM4【128-128】\"><a href=\"#SM4【128-128】\" class=\"headerlink\" title=\"SM4【128-128】\"></a>SM4【128-128】</h4><div class=\"note blue icon-padding simple\"><i class=\"note-icon fas fa-battery-half\"></i><p>SM4 算法也是一种对称加密算法，分组长度为 128 比特，密钥长度为 128 比特。</p>\n</div>\n<p>加密算法与密钥扩展算法都采用32轮非线性迭代结构。</p>\n<p>数据解密和数据加密的算法结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。详见GM/T0002-2012《SM4分组密码算法》。</p>\n<h4 id=\"数字信封（对称密钥-公钥）\"><a href=\"#数字信封（对称密钥-公钥）\" class=\"headerlink\" title=\"数字信封（对称密钥+公钥）\"></a>数字信封（对称密钥+公钥）</h4><p>数字信封是一种综合利用了<code>对称加密技术</code>和<code>非对称加密技术</code>两者的优点进行<code>信息安全传输</code>的一种技术。</p>\n<ol>\n<li>发送方采用<code>对称密钥</code>来<code>加密信息内容</code></li>\n<li>发送方再用接收方的<code>公开密钥</code>来<code>加密对称密钥</code>（这部分称数字信封），将它和加密后的信息一起发送给接收方</li>\n<li>接收方先用自己的<code>私有密钥</code>打开数字信封，得到<code>对称密钥</code></li>\n<li>接收方最后使用<code>对称密钥</code>解开加密信息。</li>\n</ol>\n<p>数字信封既发挥了对称加密算法速度快、安全性好的优点，又发挥了非对称加密算法密钥管理方便的优点。</p>\n<h2 id=\"公钥密码学原理与应用\"><a href=\"#公钥密码学原理与应用\" class=\"headerlink\" title=\"公钥密码学原理与应用\"></a>公钥密码学原理与应用</h2><h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>公钥密码体制，也称<code>非对称密码体制</code>。</p>\n<p>其基本原理是：在加密和解密的过程中<strong>使用不同的密钥处理</strong>方式。</p>\n<p>其中，<code>加密密钥</code>可以<mark class=\"hl-label red\">公开</mark> ，而只需要把<code>解密密钥</code><strong>安全存放即可</strong>。</p>\n<p>在安全性方面，<strong>即使密码算法公开</strong>，由加密密钥推知解密密钥也是计算不可行的。</p>\n<h3 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>密钥<code>分发方便</code>，能以公开方式分配加密密钥：如因特网中个人安全通信经常将自己的公钥发布在网页中，方便其他人用它进行安全加密</li>\n<li>密钥<code>保管量少</code>：所有发送方共用一个公开秘钥，只要接收方保护好解密秘钥，就能实现安全通信</li>\n<li>支持<code>数字签名</code></li>\n</ul>\n<p>有三种公钥密码体制类型被证明是安全和有效的，即<code>RSA</code>体制、<code>ELGamal</code>体制、<code>椭圆曲线</code>密码体制（也叫<code>EC</code>）。</p>\n<h3 id=\"应用-1\"><a href=\"#应用-1\" class=\"headerlink\" title=\"应用\"></a>应用</h3><h4 id=\"RSA【n的长度1024，长期安全2048】\"><a href=\"#RSA【n的长度1024，长期安全2048】\" class=\"headerlink\" title=\"RSA【n的长度1024，长期安全2048】\"></a>RSA【n的长度1024，长期安全2048】</h4><p>RSA算法是非对称算法，在RSA加密算法中，<code>公钥</code>和<code>私钥</code>都可以用于加密消息，<strong>用于 加密消息的密钥 与 用于解密消息的密钥 相反</strong>。</p>\n<p>RSA算法提供了一种保护网络通信和数据存储的<code>机密性</code>、<code>完整性</code>、<code>真实性</code>和<code>不可否认性</code>的方法。</p>\n<p>目前<code>SSH</code>、<code>OpenPGP</code>、<code>S/MIME</code>、<code>SSL/TLS</code>网络协议<code>都依赖于RSA</code>进行加密和数字签名功能。</p>\n<p>RSA算法在<code>浏览器中使用</code>，能够在不可信任的互联网中建立安全连接。</p>\n<p><code>RSA签名验证</code>是<code>网络连接系统</code>中最常见的执行操作之一。</p>\n<p>RSA算法基于<mark class=\"hl-label blue\">大整数因子分解的困难性</mark> </p>\n<h5 id=\"RSA计算\"><a href=\"#RSA计算\" class=\"headerlink\" title=\"RSA计算\"></a>RSA计算</h5><ol>\n<li>n=p*q</li>\n<li>φ(n)=(p-1)*(q-1) 求φ(n)</li>\n<li>e*d mod φ(n) =1 求e d其中之一</li>\n<li>c=m^e mod n 加密</li>\n<li>m=c^d mod n 解密</li>\n</ol>\n<h5 id=\"字符说明\"><a href=\"#字符说明\" class=\"headerlink\" title=\"字符说明\"></a>字符说明</h5><ul>\n<li>p，q为两个素数，n为p，q乘积。</li>\n<li>φ()为欧拉函数，φ(n)为小于或等于n的正整数中与n互质的数的数目【简单记住(p-1)*(q-1) 公式就行】</li>\n<li>e为随机一个整数，d也是一个数字，题中会给出e和d其中一个不用纠结，可以用公式3求出来ed其中之一</li>\n<li>mod是取余函数，例如3*5 mod 14，取余就是1</li>\n<li>c是密文，m是明文</li>\n<li>公钥为{e，n}，私钥为{d}</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">例题</span><br><span class=\"line\">考虑RSA密码体制，令p=3，q=11，d=7，m=5，给出密文C的计算过程。</span><br><span class=\"line\">解:</span><br><span class=\"line\">n = 3×11 = 33；</span><br><span class=\"line\">φ(n) = 2×10 = 20；</span><br><span class=\"line\">因为d=7, 根据e*d modφ(n) = 1；</span><br><span class=\"line\">求出e=3；</span><br><span class=\"line\">C = m^e mod n = 53 mod 33 = 26</span><br><span class=\"line\"></span><br><span class=\"line\">即:C为26</span><br></pre></td></tr></table></figure>\n<p>国产密码算法</p>\n<p>国产密码算法是指由国家密码研究相关机构自主研发，具有相关知识产权的商用密码算法。</p>\n<p>1999年国务院发布实施的《商用密码管理条例》第一章第二条规定：“本条例所称商用密码，是指对不涉及国家秘密内容的信息进行加密保护或者安全认证所使用的密码技术和密码产品。”目前，已经公布的国产密码算法主要有SM1分组密码算法、SM2椭圆曲线公钥密码算法、SM3密码杂凑算法、SM4分组算法、SM9标识密码算法。各国产商用密码算法的特性统计如表3-1所示。</p>\n<p><img src=\"image-20221006151616629.png\" alt=\"image-20221006151616629\"></p>\n<h4 id=\"SM2【椭圆素数域256】\"><a href=\"#SM2【椭圆素数域256】\" class=\"headerlink\" title=\"SM2【椭圆素数域256】\"></a>SM2【椭圆素数域256】</h4><p>SM2算法<code>基于椭圆曲线</code>，应用于公钥密码系统。</p>\n<p>对于一般椭圆曲线的离散对数问题，目前只存在指数级计算复杂度的求解方法。与大数分解问题及有限域上离散对数问题相比，椭圆曲线离散对数问题的求解难度要大得多。因此，在相同安全程度的要求下，椭圆曲线密码较其他公钥密码所需的密钥规模要小得多。</p>\n<p>SM2算法可以用于数字签名、密钥交换、公钥加密。详见GM/T 0009-2012《SM2密码算法使用规范》。</p>\n<h4 id=\"SM3【杂凑256】\"><a href=\"#SM3【杂凑256】\" class=\"headerlink\" title=\"SM3【杂凑256】\"></a>SM3【杂凑256】</h4><p>SM3杂凑算法对长度为l（1&lt;24）比特的消息m，经过填充、迭代压缩，生成杂凑值，<code>杂凑值输出长度为256比特</code>。</p>\n<p>详见GM/T0004-2012《SM3密码杂凑算法》。</p>\n<h4 id=\"Hash函数\"><a href=\"#Hash函数\" class=\"headerlink\" title=\"Hash函数\"></a>Hash函数</h4><p>杂凑函数简称Hash函数，它能够将任意长度的信息转换成固定长度的哈希值（又称数字摘要或消息摘要），并且任意不同消息或文件所生成的哈希值是不一样的。令h表示Hash函数，则h满足下列条件：<br>（1）h的输入可以是任意长度的消息或文件M；<br>（2）h的输出的长度是固定的；<br>（3）给定h和M，计算h（M）是容易的；<br>（4）给定h的描述，找两个不同的消息M，和M2，使得h（M）=h（M2）是计算上不可行的。<br>Hash函数的安全性，是指在现有的计算资源下，找到一个碰撞是不可能的。Hash函数在网络安全应用中，不仅能用于保护消息或文件的完整性，而且也能用作密码信息的安全存储。<br>例如，网页防篡改应用。网页文件管理者首先用网页文件生成系列Hash值，并将Hash值备份存放在安全的地方。然后定时再计算这些网页文件的Hash值，如果新产生的Hash值与备份的Hash值不一样，则说明网页文件被篡改了。</p>\n<h5 id=\"MD5【输入512-输出128】\"><a href=\"#MD5【输入512-输出128】\" class=\"headerlink\" title=\"MD5【输入512-输出128】\"></a>MD5【输入512-输出128】</h5><p>MD5（Message Digest Algorithm-5）算法是由Rivest设计的，于1992年公开，RFC1321对其进行了详细描述。</p>\n<p>MD5以<code>512位</code>数据块为单位来处理输入，产生<code>128位</code>的消息摘要，即<strong>MD5能产生128比特长度的哈希值</strong>。</p>\n<p>MD5使用广泛，常用在文件完整性检查。但是，据最新研究表明，MD5的安全性受到挑战，王小云教授及其研究团队提出了Hash函数快速寻找碰撞攻击的方法，相关研究工作表明MD5的安全性已经不足。</p>\n<h5 id=\"SHA【输入512-输出160】\"><a href=\"#SHA【输入512-输出160】\" class=\"headerlink\" title=\"SHA【输入512-输出160】\"></a>SHA【输入512-输出160】</h5><p>SHA（Secure Hash Algorithm）算法由NIST开发，并在1993年作为联邦信息处理标准公布。</p>\n<p>SHA-1与MD5的设计原理类似，同样也以<code>512位</code>数据块为单位来处理输入，产生<code>160位</code>的哈希值，具有<strong>比MD5更强的安全性</strong>。</p>\n<p>SHA算法的安全性不断改进，已发布的版本有SHA-2、SHA-3。</p>\n<p><code>注意</code>：SHA算法产生的哈希值长度有SHA-224、SHA-256、SHA-384、SHA-512等。但一般只考SHA-1</p>\n<h5 id=\"SM3【输入512-输出256】\"><a href=\"#SM3【输入512-输出256】\" class=\"headerlink\" title=\"SM3【输入512-输出256】\"></a>SM3【输入512-输出256】</h5><p>SM3 是国家密码管理局千 2010 年公布的商用密码杂凑算法标准 该算法消息分组长度为<code>512 比特</code>，输出杂凑值长度为<code>256 比特</code>，采用 Merkle-Damgard 结构。</p>\n<h4 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h4><p>数字签名（Digital Signature）是指签名者使用私钥对待签名数据的杂凑值做密码运算得到的结果。</p>\n<p>该结果只能用签名者的公钥进行验证，用于确认待签名数据的完整性、签名者身份的真实性和签名行为的抗抵赖性。</p>\n<p>数字签名的目的是<strong>通过网络信息安全技术手段实现传统的纸面签字或者盖章的功能</strong>，以<code>确认交易当事人的真实身份</code>，<code>保证交易的安全性</code>、<code>真实性</code>和<code>不可抵赖性</code>。</p>\n<p>数字签名具有与手写签名一样的特点，是<strong>可信的、不可伪造的、不可重用的、不可抵赖的</strong>以及<mark class=\"hl-label red\">不可修改</mark> 的。</p>\n<p>数字签名至少应满足以下三个条件：</p>\n<ol>\n<li><code>不可否认</code>。签名者事后不能否认自己的签名。</li>\n<li><code>真实性</code>。接收者能验证签名，而任何其他人都不能伪造签名。</li>\n<li><code>可鉴别性</code>。当双方关于签名的真伪发生争执时，第三方能解决双方之间发生的争执。</li>\n</ol>\n<p>一个数字签名方案一般由签名算法和验证算法组成。</p>\n<p><code>签名算法密钥</code>是<code>秘密</code>的，<strong>只有签名的人掌握</strong>；而<code>验证算法</code>则是<code>公开</code>的，以便他人验证。</p>\n<p>典型的数字签名方案有RSA签名体制、Rabin签名体制、ElGamal签名体制和DSS（Data Signature Standard）标准。</p>\n<p>签名与加密很相似，一般是：</p>\n<ul>\n<li>签名方利用<code>秘密密钥</code>（私钥）对需签名的数据进行<code>加密</code>，</li>\n<li>验证方利用签名者的<code>公开密钥</code>（公钥）对签名数据做<code>解密</code>运算。</li>\n</ul>\n<p>签名与加密的不同之处在于：</p>\n<ul>\n<li><code>加密</code>的目的是<strong>保护信息不被非授权用户访问</strong></li>\n<li><code>签名</code>的目的是<strong>使消息接收者辨别 【信息的发送者，是谁】，信息是否被他人篡改</strong>。</li>\n</ul>\n",
            "tags": [
                "G计划"
            ]
        }
    ]
}